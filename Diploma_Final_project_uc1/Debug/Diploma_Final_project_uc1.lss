
Diploma_Final_project_uc1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000298a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  0000298a  00002a1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000c2  008000c2  00002a80  2**0
                  ALLOC
  3 .stab         00001e00  00000000  00000000  00002a80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a48  00000000  00000000  00004880  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000052c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005428  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000055b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000075fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  000086fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009680  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009800  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00009ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a350  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e8       	ldi	r30, 0x8A	; 138
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 ec       	ldi	r26, 0xC2	; 194
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3c       	cpi	r26, 0xC3	; 195
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a9 11 	call	0x2352	; 0x2352 <main>
      8a:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 47 14 	jmp	0x288e	; 0x288e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa eb       	ldi	r26, 0xBA	; 186
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 63 14 	jmp	0x28c6	; 0x28c6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 53 14 	jmp	0x28a6	; 0x28a6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6f 14 	jmp	0x28de	; 0x28de <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 53 14 	jmp	0x28a6	; 0x28a6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6f 14 	jmp	0x28de	; 0x28de <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 47 14 	jmp	0x288e	; 0x288e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8a eb       	ldi	r24, 0xBA	; 186
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 63 14 	jmp	0x28c6	; 0x28c6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4f 14 	jmp	0x289e	; 0x289e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a eb       	ldi	r22, 0xBA	; 186
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 6b 14 	jmp	0x28d6	; 0x28d6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 53 14 	jmp	0x28a6	; 0x28a6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 6f 14 	jmp	0x28de	; 0x28de <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 53 14 	jmp	0x28a6	; 0x28a6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 6f 14 	jmp	0x28de	; 0x28de <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 53 14 	jmp	0x28a6	; 0x28a6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 6f 14 	jmp	0x28de	; 0x28de <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 57 14 	jmp	0x28ae	; 0x28ae <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <UART_init>:

#include "UART.h"

#define UBRR (F_CPU/(8UL*BAUD)-1)

void UART_init(void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	0f 92       	push	r0
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	UCSRC &=!(1<<UMSEL);
     ca8:	e0 e4       	ldi	r30, 0x40	; 64
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	e0 e4       	ldi	r30, 0x40	; 64
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	10 82       	st	Z, r1
	UCSRB = (1<<RXEN) | (1<<TXEN);
     cb4:	ea e2       	ldi	r30, 0x2A	; 42
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	88 e1       	ldi	r24, 0x18	; 24
     cba:	80 83       	st	Z, r24
	UCSRC |=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
     cbc:	a0 e4       	ldi	r26, 0x40	; 64
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e0 e4       	ldi	r30, 0x40	; 64
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	86 68       	ori	r24, 0x86	; 134
     cc8:	8c 93       	st	X, r24
	UCSRC|=(1<<UPM1);/*Even parity*/
     cca:	a0 e4       	ldi	r26, 0x40	; 64
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e0 e4       	ldi	r30, 0x40	; 64
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	80 62       	ori	r24, 0x20	; 32
     cd6:	8c 93       	st	X, r24

	UCSRA = (1<<U2X);
     cd8:	eb e2       	ldi	r30, 0x2B	; 43
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	82 e0       	ldi	r24, 0x02	; 2
     cde:	80 83       	st	Z, r24
	UBRRL= UBRR;
     ce0:	e9 e2       	ldi	r30, 0x29	; 41
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	8c e0       	ldi	r24, 0x0C	; 12
     ce6:	80 83       	st	Z, r24
	UBRRH= (UBRR>>8);
     ce8:	e0 e4       	ldi	r30, 0x40	; 64
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	10 82       	st	Z, r1
}
     cee:	0f 90       	pop	r0
     cf0:	cf 91       	pop	r28
     cf2:	df 91       	pop	r29
     cf4:	08 95       	ret

00000cf6 <UART_ReceiveByte>:

unsigned char UART_ReceiveByte(void){
     cf6:	df 93       	push	r29
     cf8:	cf 93       	push	r28
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62

while(!(UCSRA&(1<<RXC)));
     cfe:	eb e2       	ldi	r30, 0x2B	; 43
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	88 23       	and	r24, r24
     d06:	dc f7       	brge	.-10     	; 0xcfe <UART_ReceiveByte+0x8>
	return UDR;
     d08:	ec e2       	ldi	r30, 0x2C	; 44
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
}
     d0e:	cf 91       	pop	r28
     d10:	df 91       	pop	r29
     d12:	08 95       	ret

00000d14 <UART_SendByte>:

void UART_SendByte(unsigned char DATA){
     d14:	df 93       	push	r29
     d16:	cf 93       	push	r28
     d18:	0f 92       	push	r0
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
     d1e:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSRA&(1<<TXC)));
    UCSRA|=(1<<TXC); //CLEAR the flag by writing logic 1
*/


     while(!(UCSRA&(1<<UDRE)));
     d20:	eb e2       	ldi	r30, 0x2B	; 43
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	88 2f       	mov	r24, r24
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	80 72       	andi	r24, 0x20	; 32
     d2c:	90 70       	andi	r25, 0x00	; 0
     d2e:	00 97       	sbiw	r24, 0x00	; 0
     d30:	b9 f3       	breq	.-18     	; 0xd20 <UART_SendByte+0xc>
     UDR=DATA;
     d32:	ec e2       	ldi	r30, 0x2C	; 44
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	80 83       	st	Z, r24

}
     d3a:	0f 90       	pop	r0
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <UART_sendString>:

void UART_sendString(const unsigned char*str){
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	00 d0       	rcall	.+0      	; 0xd48 <UART_sendString+0x6>
     d48:	0f 92       	push	r0
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	9b 83       	std	Y+3, r25	; 0x03
     d50:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char i=0;
     d52:	19 82       	std	Y+1, r1	; 0x01
     d54:	0e c0       	rjmp	.+28     	; 0xd72 <UART_sendString+0x30>
	while(str[i]!='\0'){
		UART_SendByte(str[i]);
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
     d5e:	9b 81       	ldd	r25, Y+3	; 0x03
     d60:	fc 01       	movw	r30, r24
     d62:	e2 0f       	add	r30, r18
     d64:	f3 1f       	adc	r31, r19
     d66:	80 81       	ld	r24, Z
     d68:	0e 94 8a 06 	call	0xd14	; 0xd14 <UART_SendByte>
		i++;
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	8f 5f       	subi	r24, 0xFF	; 255
     d70:	89 83       	std	Y+1, r24	; 0x01

}

void UART_sendString(const unsigned char*str){
	unsigned char i=0;
	while(str[i]!='\0'){
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	9b 81       	ldd	r25, Y+3	; 0x03
     d7c:	fc 01       	movw	r30, r24
     d7e:	e2 0f       	add	r30, r18
     d80:	f3 1f       	adc	r31, r19
     d82:	80 81       	ld	r24, Z
     d84:	88 23       	and	r24, r24
     d86:	39 f7       	brne	.-50     	; 0xd56 <UART_sendString+0x14>
		UART_SendByte(str[i]);
		i++;
	}
}
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	cf 91       	pop	r28
     d90:	df 91       	pop	r29
     d92:	08 95       	ret

00000d94 <UART_receiveString>:

/*you can also send length of the str instead of special char like $*/
void UART_receiveString(unsigned char*str){
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	00 d0       	rcall	.+0      	; 0xd9e <UART_receiveString+0xa>
     d9e:	0f 92       	push	r0
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	9b 83       	std	Y+3, r25	; 0x03
     da6:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char i=0;
     da8:	19 82       	std	Y+1, r1	; 0x01
	str[i]=UART_ReceiveByte();
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	9b 81       	ldd	r25, Y+3	; 0x03
     db4:	8c 01       	movw	r16, r24
     db6:	02 0f       	add	r16, r18
     db8:	13 1f       	adc	r17, r19
     dba:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <UART_ReceiveByte>
     dbe:	f8 01       	movw	r30, r16
     dc0:	80 83       	st	Z, r24
     dc2:	0f c0       	rjmp	.+30     	; 0xde2 <UART_receiveString+0x4e>
		while(str[i]!='$'){
			i++;
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	8f 5f       	subi	r24, 0xFF	; 255
     dc8:	89 83       	std	Y+1, r24	; 0x01
			str[i]=UART_ReceiveByte();
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	8a 81       	ldd	r24, Y+2	; 0x02
     dd2:	9b 81       	ldd	r25, Y+3	; 0x03
     dd4:	8c 01       	movw	r16, r24
     dd6:	02 0f       	add	r16, r18
     dd8:	13 1f       	adc	r17, r19
     dda:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <UART_ReceiveByte>
     dde:	f8 01       	movw	r30, r16
     de0:	80 83       	st	Z, r24

/*you can also send length of the str instead of special char like $*/
void UART_receiveString(unsigned char*str){
	unsigned char i=0;
	str[i]=UART_ReceiveByte();
		while(str[i]!='$'){
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	9b 81       	ldd	r25, Y+3	; 0x03
     dec:	fc 01       	movw	r30, r24
     dee:	e2 0f       	add	r30, r18
     df0:	f3 1f       	adc	r31, r19
     df2:	80 81       	ld	r24, Z
     df4:	84 32       	cpi	r24, 0x24	; 36
     df6:	31 f7       	brne	.-52     	; 0xdc4 <UART_receiveString+0x30>
			i++;
			str[i]=UART_ReceiveByte();

		}
		str[i] = '\0';
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	9b 81       	ldd	r25, Y+3	; 0x03
     e02:	fc 01       	movw	r30, r24
     e04:	e2 0f       	add	r30, r18
     e06:	f3 1f       	adc	r31, r19
     e08:	10 82       	st	Z, r1
}
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	cf 91       	pop	r28
     e12:	df 91       	pop	r29
     e14:	1f 91       	pop	r17
     e16:	0f 91       	pop	r16
     e18:	08 95       	ret

00000e1a <keypad4x3>:
static unsigned char keypad4x3(unsigned char key);
#endif


#if(N_COL==3)
static unsigned char keypad4x3(unsigned char key){
     e1a:	df 93       	push	r29
     e1c:	cf 93       	push	r28
     e1e:	00 d0       	rcall	.+0      	; 0xe20 <keypad4x3+0x6>
     e20:	00 d0       	rcall	.+0      	; 0xe22 <keypad4x3+0x8>
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	89 83       	std	Y+1, r24	; 0x01
	switch (key)	{
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	28 2f       	mov	r18, r24
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	3c 83       	std	Y+4, r19	; 0x04
     e30:	2b 83       	std	Y+3, r18	; 0x03
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	9c 81       	ldd	r25, Y+4	; 0x04
     e36:	8a 30       	cpi	r24, 0x0A	; 10
     e38:	91 05       	cpc	r25, r1
     e3a:	81 f0       	breq	.+32     	; 0xe5c <keypad4x3+0x42>
     e3c:	2b 81       	ldd	r18, Y+3	; 0x03
     e3e:	3c 81       	ldd	r19, Y+4	; 0x04
     e40:	2a 30       	cpi	r18, 0x0A	; 10
     e42:	31 05       	cpc	r19, r1
     e44:	9c f0       	brlt	.+38     	; 0xe6c <keypad4x3+0x52>
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	9c 81       	ldd	r25, Y+4	; 0x04
     e4a:	8b 30       	cpi	r24, 0x0B	; 11
     e4c:	91 05       	cpc	r25, r1
     e4e:	49 f0       	breq	.+18     	; 0xe62 <keypad4x3+0x48>
     e50:	2b 81       	ldd	r18, Y+3	; 0x03
     e52:	3c 81       	ldd	r19, Y+4	; 0x04
     e54:	2c 30       	cpi	r18, 0x0C	; 12
     e56:	31 05       	cpc	r19, r1
     e58:	31 f0       	breq	.+12     	; 0xe66 <keypad4x3+0x4c>
     e5a:	08 c0       	rjmp	.+16     	; 0xe6c <keypad4x3+0x52>
	case 10: return '*'; // ASCII Code of =
     e5c:	3a e2       	ldi	r19, 0x2A	; 42
     e5e:	3a 83       	std	Y+2, r19	; 0x02
     e60:	07 c0       	rjmp	.+14     	; 0xe70 <keypad4x3+0x56>
			 break;
	case 11: return 0;
     e62:	1a 82       	std	Y+2, r1	; 0x02
     e64:	05 c0       	rjmp	.+10     	; 0xe70 <keypad4x3+0x56>
			 break;
	case 12: return '#'; // ASCII Code of +
     e66:	83 e2       	ldi	r24, 0x23	; 35
     e68:	8a 83       	std	Y+2, r24	; 0x02
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <keypad4x3+0x56>
			 break;

	default :
		return key;
     e6c:	99 81       	ldd	r25, Y+1	; 0x01
     e6e:	9a 83       	std	Y+2, r25	; 0x02
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
		break;

	}
}
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <get_key>:

#endif



unsigned char get_key(void){
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	00 d0       	rcall	.+0      	; 0xe86 <get_key+0x6>
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
		unsigned char row,col;
		while(1){
			for(col=0;col<N_COL;col++){
     e8a:	19 82       	std	Y+1, r1	; 0x01
     e8c:	4d c0       	rjmp	.+154    	; 0xf28 <get_key+0xa8>
				keypad_PORT_DIR=(0b00010000<<col);
     e8e:	ea e3       	ldi	r30, 0x3A	; 58
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	80 e1       	ldi	r24, 0x10	; 16
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <get_key+0x22>
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	2a 95       	dec	r18
     ea4:	e2 f7       	brpl	.-8      	; 0xe9e <get_key+0x1e>
     ea6:	80 83       	st	Z, r24
				keypad_OUT_PORT=~(0b00010000<<col);
     ea8:	eb e3       	ldi	r30, 0x3B	; 59
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	80 e1       	ldi	r24, 0x10	; 16
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	02 2e       	mov	r0, r18
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <get_key+0x3e>
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	0a 94       	dec	r0
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <get_key+0x3a>
     ec2:	80 95       	com	r24
     ec4:	80 83       	st	Z, r24
				for(row=0;row<N_ROW; row++){
     ec6:	1a 82       	std	Y+2, r1	; 0x02
     ec8:	29 c0       	rjmp	.+82     	; 0xf1c <get_key+0x9c>

					if(!(keypad_IN_PORT &(1<<row))){
     eca:	e9 e3       	ldi	r30, 0x39	; 57
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	88 2f       	mov	r24, r24
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	a9 01       	movw	r20, r18
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <get_key+0x62>
     ede:	55 95       	asr	r21
     ee0:	47 95       	ror	r20
     ee2:	8a 95       	dec	r24
     ee4:	e2 f7       	brpl	.-8      	; 0xede <get_key+0x5e>
     ee6:	ca 01       	movw	r24, r20
     ee8:	81 70       	andi	r24, 0x01	; 1
     eea:	90 70       	andi	r25, 0x00	; 0
     eec:	00 97       	sbiw	r24, 0x00	; 0
     eee:	99 f4       	brne	.+38     	; 0xf16 <get_key+0x96>
#if(N_COL == 4)
						return keypad4x4(row*N_COL+col+1);
#elif(N_COL == 3)
						return keypad4x3(row*N_COL+col+1);
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	c9 01       	movw	r24, r18
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	82 0f       	add	r24, r18
     efe:	93 1f       	adc	r25, r19
     f00:	98 2f       	mov	r25, r24
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	89 0f       	add	r24, r25
     f06:	8f 5f       	subi	r24, 0xFF	; 255
     f08:	0e 94 0d 07 	call	0xe1a	; 0xe1a <keypad4x3>
					}
				}

			}
		}
}
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	08 95       	ret
		unsigned char row,col;
		while(1){
			for(col=0;col<N_COL;col++){
				keypad_PORT_DIR=(0b00010000<<col);
				keypad_OUT_PORT=~(0b00010000<<col);
				for(row=0;row<N_ROW; row++){
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	8f 5f       	subi	r24, 0xFF	; 255
     f1a:	8a 83       	std	Y+2, r24	; 0x02
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	84 30       	cpi	r24, 0x04	; 4
     f20:	a0 f2       	brcs	.-88     	; 0xeca <get_key+0x4a>


unsigned char get_key(void){
		unsigned char row,col;
		while(1){
			for(col=0;col<N_COL;col++){
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	8f 5f       	subi	r24, 0xFF	; 255
     f26:	89 83       	std	Y+1, r24	; 0x01
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	83 30       	cpi	r24, 0x03	; 3
     f2c:	08 f4       	brcc	.+2      	; 0xf30 <get_key+0xb0>
     f2e:	af cf       	rjmp	.-162    	; 0xe8e <get_key+0xe>
     f30:	ac cf       	rjmp	.-168    	; 0xe8a <get_key+0xa>

00000f32 <lcd_init>:
 *      Author: Aya Hussein
 */

#include "lcd.h"

void lcd_init(void){
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR|=(1<<RS);
     f3a:	a1 e3       	ldi	r26, 0x31	; 49
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e1 e3       	ldi	r30, 0x31	; 49
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	80 61       	ori	r24, 0x10	; 16
     f46:	8c 93       	st	X, r24
	LCD_CTRL_PORT_DIR|=(1<<RW);
     f48:	a1 e3       	ldi	r26, 0x31	; 49
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e1 e3       	ldi	r30, 0x31	; 49
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	80 62       	ori	r24, 0x20	; 32
     f54:	8c 93       	st	X, r24
	LCD_CTRL_PORT_DIR|=(1<<E);
     f56:	a1 e3       	ldi	r26, 0x31	; 49
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e1 e3       	ldi	r30, 0x31	; 49
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	80 64       	ori	r24, 0x40	; 64
     f62:	8c 93       	st	X, r24
	LCD_DATA_PORT_DIR=0xFF;
	lcd_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE);

#elif(USED_MODE==4)
	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT_DIR=0xF0;
     f64:	e4 e3       	ldi	r30, 0x34	; 52
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 ef       	ldi	r24, 0xF0	; 240
     f6a:	80 83       	st	Z, r24
	#elif
	LCD_DATA_PORT_DIR=0x0F;
	#endif
	lcd_sendCommand(FOUR_BITS_DATA_MODE);
     f6c:	82 e0       	ldi	r24, 0x02	; 2
     f6e:	0e 94 c5 07 	call	0xf8a	; 0xf8a <lcd_sendCommand>
	lcd_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
     f72:	88 e2       	ldi	r24, 0x28	; 40
     f74:	0e 94 c5 07 	call	0xf8a	; 0xf8a <lcd_sendCommand>
#endif

	lcd_sendCommand(CURSOR_OFF);
     f78:	8c e0       	ldi	r24, 0x0C	; 12
     f7a:	0e 94 c5 07 	call	0xf8a	; 0xf8a <lcd_sendCommand>
	lcd_sendCommand(CLEAR_SCREEN);
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	0e 94 c5 07 	call	0xf8a	; 0xf8a <lcd_sendCommand>
}
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <lcd_sendCommand>:


void lcd_sendCommand(unsigned char command){
     f8a:	0f 93       	push	r16
     f8c:	1f 93       	push	r17
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	cd 56       	subi	r28, 0x6D	; 109
     f98:	d0 40       	sbci	r29, 0x00	; 0
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	f8 94       	cli
     f9e:	de bf       	out	0x3e, r29	; 62
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	cd bf       	out	0x3d, r28	; 61
     fa4:	fe 01       	movw	r30, r28
     fa6:	e3 59       	subi	r30, 0x93	; 147
     fa8:	ff 4f       	sbci	r31, 0xFF	; 255
     faa:	80 83       	st	Z, r24
	LCD_CTRL_PORT&=~(1<<RS);
     fac:	a2 e3       	ldi	r26, 0x32	; 50
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e2 e3       	ldi	r30, 0x32	; 50
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	8f 7e       	andi	r24, 0xEF	; 239
     fb8:	8c 93       	st	X, r24
	LCD_CTRL_PORT&=~(1<<RW);
     fba:	a2 e3       	ldi	r26, 0x32	; 50
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e2 e3       	ldi	r30, 0x32	; 50
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	8f 7d       	andi	r24, 0xDF	; 223
     fc6:	8c 93       	st	X, r24
     fc8:	fe 01       	movw	r30, r28
     fca:	e7 59       	subi	r30, 0x97	; 151
     fcc:	ff 4f       	sbci	r31, 0xFF	; 255
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	a0 e8       	ldi	r26, 0x80	; 128
     fd4:	bf e3       	ldi	r27, 0x3F	; 63
     fd6:	80 83       	st	Z, r24
     fd8:	91 83       	std	Z+1, r25	; 0x01
     fda:	a2 83       	std	Z+2, r26	; 0x02
     fdc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fde:	8e 01       	movw	r16, r28
     fe0:	0b 59       	subi	r16, 0x9B	; 155
     fe2:	1f 4f       	sbci	r17, 0xFF	; 255
     fe4:	fe 01       	movw	r30, r28
     fe6:	e7 59       	subi	r30, 0x97	; 151
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	60 81       	ld	r22, Z
     fec:	71 81       	ldd	r23, Z+1	; 0x01
     fee:	82 81       	ldd	r24, Z+2	; 0x02
     ff0:	93 81       	ldd	r25, Z+3	; 0x03
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	4a e7       	ldi	r20, 0x7A	; 122
     ff8:	53 e4       	ldi	r21, 0x43	; 67
     ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	f8 01       	movw	r30, r16
    1004:	80 83       	st	Z, r24
    1006:	91 83       	std	Z+1, r25	; 0x01
    1008:	a2 83       	std	Z+2, r26	; 0x02
    100a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    100c:	fe 01       	movw	r30, r28
    100e:	eb 59       	subi	r30, 0x9B	; 155
    1010:	ff 4f       	sbci	r31, 0xFF	; 255
    1012:	60 81       	ld	r22, Z
    1014:	71 81       	ldd	r23, Z+1	; 0x01
    1016:	82 81       	ldd	r24, Z+2	; 0x02
    1018:	93 81       	ldd	r25, Z+3	; 0x03
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	40 e8       	ldi	r20, 0x80	; 128
    1020:	5f e3       	ldi	r21, 0x3F	; 63
    1022:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1026:	88 23       	and	r24, r24
    1028:	44 f4       	brge	.+16     	; 0x103a <lcd_sendCommand+0xb0>
		__ticks = 1;
    102a:	fe 01       	movw	r30, r28
    102c:	ed 59       	subi	r30, 0x9D	; 157
    102e:	ff 4f       	sbci	r31, 0xFF	; 255
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	91 83       	std	Z+1, r25	; 0x01
    1036:	80 83       	st	Z, r24
    1038:	64 c0       	rjmp	.+200    	; 0x1102 <lcd_sendCommand+0x178>
	else if (__tmp > 65535)
    103a:	fe 01       	movw	r30, r28
    103c:	eb 59       	subi	r30, 0x9B	; 155
    103e:	ff 4f       	sbci	r31, 0xFF	; 255
    1040:	60 81       	ld	r22, Z
    1042:	71 81       	ldd	r23, Z+1	; 0x01
    1044:	82 81       	ldd	r24, Z+2	; 0x02
    1046:	93 81       	ldd	r25, Z+3	; 0x03
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	3f ef       	ldi	r19, 0xFF	; 255
    104c:	4f e7       	ldi	r20, 0x7F	; 127
    104e:	57 e4       	ldi	r21, 0x47	; 71
    1050:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1054:	18 16       	cp	r1, r24
    1056:	0c f0       	brlt	.+2      	; 0x105a <lcd_sendCommand+0xd0>
    1058:	43 c0       	rjmp	.+134    	; 0x10e0 <lcd_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    105a:	fe 01       	movw	r30, r28
    105c:	e7 59       	subi	r30, 0x97	; 151
    105e:	ff 4f       	sbci	r31, 0xFF	; 255
    1060:	60 81       	ld	r22, Z
    1062:	71 81       	ldd	r23, Z+1	; 0x01
    1064:	82 81       	ldd	r24, Z+2	; 0x02
    1066:	93 81       	ldd	r25, Z+3	; 0x03
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	40 e2       	ldi	r20, 0x20	; 32
    106e:	51 e4       	ldi	r21, 0x41	; 65
    1070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	8e 01       	movw	r16, r28
    107a:	0d 59       	subi	r16, 0x9D	; 157
    107c:	1f 4f       	sbci	r17, 0xFF	; 255
    107e:	bc 01       	movw	r22, r24
    1080:	cd 01       	movw	r24, r26
    1082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	f8 01       	movw	r30, r16
    108c:	91 83       	std	Z+1, r25	; 0x01
    108e:	80 83       	st	Z, r24
    1090:	1f c0       	rjmp	.+62     	; 0x10d0 <lcd_sendCommand+0x146>
    1092:	fe 01       	movw	r30, r28
    1094:	ef 59       	subi	r30, 0x9F	; 159
    1096:	ff 4f       	sbci	r31, 0xFF	; 255
    1098:	89 e1       	ldi	r24, 0x19	; 25
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	91 83       	std	Z+1, r25	; 0x01
    109e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10a0:	fe 01       	movw	r30, r28
    10a2:	ef 59       	subi	r30, 0x9F	; 159
    10a4:	ff 4f       	sbci	r31, 0xFF	; 255
    10a6:	80 81       	ld	r24, Z
    10a8:	91 81       	ldd	r25, Z+1	; 0x01
    10aa:	01 97       	sbiw	r24, 0x01	; 1
    10ac:	f1 f7       	brne	.-4      	; 0x10aa <lcd_sendCommand+0x120>
    10ae:	fe 01       	movw	r30, r28
    10b0:	ef 59       	subi	r30, 0x9F	; 159
    10b2:	ff 4f       	sbci	r31, 0xFF	; 255
    10b4:	91 83       	std	Z+1, r25	; 0x01
    10b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10b8:	de 01       	movw	r26, r28
    10ba:	ad 59       	subi	r26, 0x9D	; 157
    10bc:	bf 4f       	sbci	r27, 0xFF	; 255
    10be:	fe 01       	movw	r30, r28
    10c0:	ed 59       	subi	r30, 0x9D	; 157
    10c2:	ff 4f       	sbci	r31, 0xFF	; 255
    10c4:	80 81       	ld	r24, Z
    10c6:	91 81       	ldd	r25, Z+1	; 0x01
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	11 96       	adiw	r26, 0x01	; 1
    10cc:	9c 93       	st	X, r25
    10ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d0:	fe 01       	movw	r30, r28
    10d2:	ed 59       	subi	r30, 0x9D	; 157
    10d4:	ff 4f       	sbci	r31, 0xFF	; 255
    10d6:	80 81       	ld	r24, Z
    10d8:	91 81       	ldd	r25, Z+1	; 0x01
    10da:	00 97       	sbiw	r24, 0x00	; 0
    10dc:	d1 f6       	brne	.-76     	; 0x1092 <lcd_sendCommand+0x108>
    10de:	27 c0       	rjmp	.+78     	; 0x112e <lcd_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10e0:	8e 01       	movw	r16, r28
    10e2:	0d 59       	subi	r16, 0x9D	; 157
    10e4:	1f 4f       	sbci	r17, 0xFF	; 255
    10e6:	fe 01       	movw	r30, r28
    10e8:	eb 59       	subi	r30, 0x9B	; 155
    10ea:	ff 4f       	sbci	r31, 0xFF	; 255
    10ec:	60 81       	ld	r22, Z
    10ee:	71 81       	ldd	r23, Z+1	; 0x01
    10f0:	82 81       	ldd	r24, Z+2	; 0x02
    10f2:	93 81       	ldd	r25, Z+3	; 0x03
    10f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	f8 01       	movw	r30, r16
    10fe:	91 83       	std	Z+1, r25	; 0x01
    1100:	80 83       	st	Z, r24
    1102:	de 01       	movw	r26, r28
    1104:	a1 5a       	subi	r26, 0xA1	; 161
    1106:	bf 4f       	sbci	r27, 0xFF	; 255
    1108:	fe 01       	movw	r30, r28
    110a:	ed 59       	subi	r30, 0x9D	; 157
    110c:	ff 4f       	sbci	r31, 0xFF	; 255
    110e:	80 81       	ld	r24, Z
    1110:	91 81       	ldd	r25, Z+1	; 0x01
    1112:	8d 93       	st	X+, r24
    1114:	9c 93       	st	X, r25
    1116:	fe 01       	movw	r30, r28
    1118:	e1 5a       	subi	r30, 0xA1	; 161
    111a:	ff 4f       	sbci	r31, 0xFF	; 255
    111c:	80 81       	ld	r24, Z
    111e:	91 81       	ldd	r25, Z+1	; 0x01
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	f1 f7       	brne	.-4      	; 0x1120 <lcd_sendCommand+0x196>
    1124:	fe 01       	movw	r30, r28
    1126:	e1 5a       	subi	r30, 0xA1	; 161
    1128:	ff 4f       	sbci	r31, 0xFF	; 255
    112a:	91 83       	std	Z+1, r25	; 0x01
    112c:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_CTRL_PORT|=(1<<E);
    112e:	a2 e3       	ldi	r26, 0x32	; 50
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e2 e3       	ldi	r30, 0x32	; 50
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	80 64       	ori	r24, 0x40	; 64
    113a:	8c 93       	st	X, r24
    113c:	fe 01       	movw	r30, r28
    113e:	e5 5a       	subi	r30, 0xA5	; 165
    1140:	ff 4f       	sbci	r31, 0xFF	; 255
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	a0 e8       	ldi	r26, 0x80	; 128
    1148:	bf e3       	ldi	r27, 0x3F	; 63
    114a:	80 83       	st	Z, r24
    114c:	91 83       	std	Z+1, r25	; 0x01
    114e:	a2 83       	std	Z+2, r26	; 0x02
    1150:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1152:	8e 01       	movw	r16, r28
    1154:	09 5a       	subi	r16, 0xA9	; 169
    1156:	1f 4f       	sbci	r17, 0xFF	; 255
    1158:	fe 01       	movw	r30, r28
    115a:	e5 5a       	subi	r30, 0xA5	; 165
    115c:	ff 4f       	sbci	r31, 0xFF	; 255
    115e:	60 81       	ld	r22, Z
    1160:	71 81       	ldd	r23, Z+1	; 0x01
    1162:	82 81       	ldd	r24, Z+2	; 0x02
    1164:	93 81       	ldd	r25, Z+3	; 0x03
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	4a e7       	ldi	r20, 0x7A	; 122
    116c:	53 e4       	ldi	r21, 0x43	; 67
    116e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1172:	dc 01       	movw	r26, r24
    1174:	cb 01       	movw	r24, r22
    1176:	f8 01       	movw	r30, r16
    1178:	80 83       	st	Z, r24
    117a:	91 83       	std	Z+1, r25	; 0x01
    117c:	a2 83       	std	Z+2, r26	; 0x02
    117e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1180:	fe 01       	movw	r30, r28
    1182:	e9 5a       	subi	r30, 0xA9	; 169
    1184:	ff 4f       	sbci	r31, 0xFF	; 255
    1186:	60 81       	ld	r22, Z
    1188:	71 81       	ldd	r23, Z+1	; 0x01
    118a:	82 81       	ldd	r24, Z+2	; 0x02
    118c:	93 81       	ldd	r25, Z+3	; 0x03
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	40 e8       	ldi	r20, 0x80	; 128
    1194:	5f e3       	ldi	r21, 0x3F	; 63
    1196:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    119a:	88 23       	and	r24, r24
    119c:	44 f4       	brge	.+16     	; 0x11ae <lcd_sendCommand+0x224>
		__ticks = 1;
    119e:	fe 01       	movw	r30, r28
    11a0:	eb 5a       	subi	r30, 0xAB	; 171
    11a2:	ff 4f       	sbci	r31, 0xFF	; 255
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	91 83       	std	Z+1, r25	; 0x01
    11aa:	80 83       	st	Z, r24
    11ac:	64 c0       	rjmp	.+200    	; 0x1276 <lcd_sendCommand+0x2ec>
	else if (__tmp > 65535)
    11ae:	fe 01       	movw	r30, r28
    11b0:	e9 5a       	subi	r30, 0xA9	; 169
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	60 81       	ld	r22, Z
    11b6:	71 81       	ldd	r23, Z+1	; 0x01
    11b8:	82 81       	ldd	r24, Z+2	; 0x02
    11ba:	93 81       	ldd	r25, Z+3	; 0x03
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	3f ef       	ldi	r19, 0xFF	; 255
    11c0:	4f e7       	ldi	r20, 0x7F	; 127
    11c2:	57 e4       	ldi	r21, 0x47	; 71
    11c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11c8:	18 16       	cp	r1, r24
    11ca:	0c f0       	brlt	.+2      	; 0x11ce <lcd_sendCommand+0x244>
    11cc:	43 c0       	rjmp	.+134    	; 0x1254 <lcd_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ce:	fe 01       	movw	r30, r28
    11d0:	e5 5a       	subi	r30, 0xA5	; 165
    11d2:	ff 4f       	sbci	r31, 0xFF	; 255
    11d4:	60 81       	ld	r22, Z
    11d6:	71 81       	ldd	r23, Z+1	; 0x01
    11d8:	82 81       	ldd	r24, Z+2	; 0x02
    11da:	93 81       	ldd	r25, Z+3	; 0x03
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	40 e2       	ldi	r20, 0x20	; 32
    11e2:	51 e4       	ldi	r21, 0x41	; 65
    11e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22
    11ec:	8e 01       	movw	r16, r28
    11ee:	0b 5a       	subi	r16, 0xAB	; 171
    11f0:	1f 4f       	sbci	r17, 0xFF	; 255
    11f2:	bc 01       	movw	r22, r24
    11f4:	cd 01       	movw	r24, r26
    11f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	f8 01       	movw	r30, r16
    1200:	91 83       	std	Z+1, r25	; 0x01
    1202:	80 83       	st	Z, r24
    1204:	1f c0       	rjmp	.+62     	; 0x1244 <lcd_sendCommand+0x2ba>
    1206:	fe 01       	movw	r30, r28
    1208:	ed 5a       	subi	r30, 0xAD	; 173
    120a:	ff 4f       	sbci	r31, 0xFF	; 255
    120c:	89 e1       	ldi	r24, 0x19	; 25
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	91 83       	std	Z+1, r25	; 0x01
    1212:	80 83       	st	Z, r24
    1214:	fe 01       	movw	r30, r28
    1216:	ed 5a       	subi	r30, 0xAD	; 173
    1218:	ff 4f       	sbci	r31, 0xFF	; 255
    121a:	80 81       	ld	r24, Z
    121c:	91 81       	ldd	r25, Z+1	; 0x01
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	f1 f7       	brne	.-4      	; 0x121e <lcd_sendCommand+0x294>
    1222:	fe 01       	movw	r30, r28
    1224:	ed 5a       	subi	r30, 0xAD	; 173
    1226:	ff 4f       	sbci	r31, 0xFF	; 255
    1228:	91 83       	std	Z+1, r25	; 0x01
    122a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    122c:	de 01       	movw	r26, r28
    122e:	ab 5a       	subi	r26, 0xAB	; 171
    1230:	bf 4f       	sbci	r27, 0xFF	; 255
    1232:	fe 01       	movw	r30, r28
    1234:	eb 5a       	subi	r30, 0xAB	; 171
    1236:	ff 4f       	sbci	r31, 0xFF	; 255
    1238:	80 81       	ld	r24, Z
    123a:	91 81       	ldd	r25, Z+1	; 0x01
    123c:	01 97       	sbiw	r24, 0x01	; 1
    123e:	11 96       	adiw	r26, 0x01	; 1
    1240:	9c 93       	st	X, r25
    1242:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1244:	fe 01       	movw	r30, r28
    1246:	eb 5a       	subi	r30, 0xAB	; 171
    1248:	ff 4f       	sbci	r31, 0xFF	; 255
    124a:	80 81       	ld	r24, Z
    124c:	91 81       	ldd	r25, Z+1	; 0x01
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	d1 f6       	brne	.-76     	; 0x1206 <lcd_sendCommand+0x27c>
    1252:	27 c0       	rjmp	.+78     	; 0x12a2 <lcd_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1254:	8e 01       	movw	r16, r28
    1256:	0b 5a       	subi	r16, 0xAB	; 171
    1258:	1f 4f       	sbci	r17, 0xFF	; 255
    125a:	fe 01       	movw	r30, r28
    125c:	e9 5a       	subi	r30, 0xA9	; 169
    125e:	ff 4f       	sbci	r31, 0xFF	; 255
    1260:	60 81       	ld	r22, Z
    1262:	71 81       	ldd	r23, Z+1	; 0x01
    1264:	82 81       	ldd	r24, Z+2	; 0x02
    1266:	93 81       	ldd	r25, Z+3	; 0x03
    1268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    126c:	dc 01       	movw	r26, r24
    126e:	cb 01       	movw	r24, r22
    1270:	f8 01       	movw	r30, r16
    1272:	91 83       	std	Z+1, r25	; 0x01
    1274:	80 83       	st	Z, r24
    1276:	de 01       	movw	r26, r28
    1278:	af 5a       	subi	r26, 0xAF	; 175
    127a:	bf 4f       	sbci	r27, 0xFF	; 255
    127c:	fe 01       	movw	r30, r28
    127e:	eb 5a       	subi	r30, 0xAB	; 171
    1280:	ff 4f       	sbci	r31, 0xFF	; 255
    1282:	80 81       	ld	r24, Z
    1284:	91 81       	ldd	r25, Z+1	; 0x01
    1286:	8d 93       	st	X+, r24
    1288:	9c 93       	st	X, r25
    128a:	fe 01       	movw	r30, r28
    128c:	ef 5a       	subi	r30, 0xAF	; 175
    128e:	ff 4f       	sbci	r31, 0xFF	; 255
    1290:	80 81       	ld	r24, Z
    1292:	91 81       	ldd	r25, Z+1	; 0x01
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	f1 f7       	brne	.-4      	; 0x1294 <lcd_sendCommand+0x30a>
    1298:	fe 01       	movw	r30, r28
    129a:	ef 5a       	subi	r30, 0xAF	; 175
    129c:	ff 4f       	sbci	r31, 0xFF	; 255
    129e:	91 83       	std	Z+1, r25	; 0x01
    12a0:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_CTRL_PORT&=~(1<<E); //clear en
	_delay_ms(1);
#elif(USED_MODE==4)
	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|(command&0xF0);
    12a2:	a5 e3       	ldi	r26, 0x35	; 53
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e5 e3       	ldi	r30, 0x35	; 53
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	98 2f       	mov	r25, r24
    12ae:	9f 70       	andi	r25, 0x0F	; 15
    12b0:	fe 01       	movw	r30, r28
    12b2:	e3 59       	subi	r30, 0x93	; 147
    12b4:	ff 4f       	sbci	r31, 0xFF	; 255
    12b6:	80 81       	ld	r24, Z
    12b8:	80 7f       	andi	r24, 0xF0	; 240
    12ba:	89 2b       	or	r24, r25
    12bc:	8c 93       	st	X, r24
    12be:	fe 01       	movw	r30, r28
    12c0:	e3 5b       	subi	r30, 0xB3	; 179
    12c2:	ff 4f       	sbci	r31, 0xFF	; 255
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	a0 e8       	ldi	r26, 0x80	; 128
    12ca:	bf e3       	ldi	r27, 0x3F	; 63
    12cc:	80 83       	st	Z, r24
    12ce:	91 83       	std	Z+1, r25	; 0x01
    12d0:	a2 83       	std	Z+2, r26	; 0x02
    12d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d4:	8e 01       	movw	r16, r28
    12d6:	07 5b       	subi	r16, 0xB7	; 183
    12d8:	1f 4f       	sbci	r17, 0xFF	; 255
    12da:	fe 01       	movw	r30, r28
    12dc:	e3 5b       	subi	r30, 0xB3	; 179
    12de:	ff 4f       	sbci	r31, 0xFF	; 255
    12e0:	60 81       	ld	r22, Z
    12e2:	71 81       	ldd	r23, Z+1	; 0x01
    12e4:	82 81       	ldd	r24, Z+2	; 0x02
    12e6:	93 81       	ldd	r25, Z+3	; 0x03
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	4a e7       	ldi	r20, 0x7A	; 122
    12ee:	53 e4       	ldi	r21, 0x43	; 67
    12f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	f8 01       	movw	r30, r16
    12fa:	80 83       	st	Z, r24
    12fc:	91 83       	std	Z+1, r25	; 0x01
    12fe:	a2 83       	std	Z+2, r26	; 0x02
    1300:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1302:	fe 01       	movw	r30, r28
    1304:	e7 5b       	subi	r30, 0xB7	; 183
    1306:	ff 4f       	sbci	r31, 0xFF	; 255
    1308:	60 81       	ld	r22, Z
    130a:	71 81       	ldd	r23, Z+1	; 0x01
    130c:	82 81       	ldd	r24, Z+2	; 0x02
    130e:	93 81       	ldd	r25, Z+3	; 0x03
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 e8       	ldi	r20, 0x80	; 128
    1316:	5f e3       	ldi	r21, 0x3F	; 63
    1318:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    131c:	88 23       	and	r24, r24
    131e:	44 f4       	brge	.+16     	; 0x1330 <lcd_sendCommand+0x3a6>
		__ticks = 1;
    1320:	fe 01       	movw	r30, r28
    1322:	e9 5b       	subi	r30, 0xB9	; 185
    1324:	ff 4f       	sbci	r31, 0xFF	; 255
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	91 83       	std	Z+1, r25	; 0x01
    132c:	80 83       	st	Z, r24
    132e:	64 c0       	rjmp	.+200    	; 0x13f8 <lcd_sendCommand+0x46e>
	else if (__tmp > 65535)
    1330:	fe 01       	movw	r30, r28
    1332:	e7 5b       	subi	r30, 0xB7	; 183
    1334:	ff 4f       	sbci	r31, 0xFF	; 255
    1336:	60 81       	ld	r22, Z
    1338:	71 81       	ldd	r23, Z+1	; 0x01
    133a:	82 81       	ldd	r24, Z+2	; 0x02
    133c:	93 81       	ldd	r25, Z+3	; 0x03
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	3f ef       	ldi	r19, 0xFF	; 255
    1342:	4f e7       	ldi	r20, 0x7F	; 127
    1344:	57 e4       	ldi	r21, 0x47	; 71
    1346:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    134a:	18 16       	cp	r1, r24
    134c:	0c f0       	brlt	.+2      	; 0x1350 <lcd_sendCommand+0x3c6>
    134e:	43 c0       	rjmp	.+134    	; 0x13d6 <lcd_sendCommand+0x44c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1350:	fe 01       	movw	r30, r28
    1352:	e3 5b       	subi	r30, 0xB3	; 179
    1354:	ff 4f       	sbci	r31, 0xFF	; 255
    1356:	60 81       	ld	r22, Z
    1358:	71 81       	ldd	r23, Z+1	; 0x01
    135a:	82 81       	ldd	r24, Z+2	; 0x02
    135c:	93 81       	ldd	r25, Z+3	; 0x03
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	40 e2       	ldi	r20, 0x20	; 32
    1364:	51 e4       	ldi	r21, 0x41	; 65
    1366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	8e 01       	movw	r16, r28
    1370:	09 5b       	subi	r16, 0xB9	; 185
    1372:	1f 4f       	sbci	r17, 0xFF	; 255
    1374:	bc 01       	movw	r22, r24
    1376:	cd 01       	movw	r24, r26
    1378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	f8 01       	movw	r30, r16
    1382:	91 83       	std	Z+1, r25	; 0x01
    1384:	80 83       	st	Z, r24
    1386:	1f c0       	rjmp	.+62     	; 0x13c6 <lcd_sendCommand+0x43c>
    1388:	fe 01       	movw	r30, r28
    138a:	eb 5b       	subi	r30, 0xBB	; 187
    138c:	ff 4f       	sbci	r31, 0xFF	; 255
    138e:	89 e1       	ldi	r24, 0x19	; 25
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	91 83       	std	Z+1, r25	; 0x01
    1394:	80 83       	st	Z, r24
    1396:	fe 01       	movw	r30, r28
    1398:	eb 5b       	subi	r30, 0xBB	; 187
    139a:	ff 4f       	sbci	r31, 0xFF	; 255
    139c:	80 81       	ld	r24, Z
    139e:	91 81       	ldd	r25, Z+1	; 0x01
    13a0:	01 97       	sbiw	r24, 0x01	; 1
    13a2:	f1 f7       	brne	.-4      	; 0x13a0 <lcd_sendCommand+0x416>
    13a4:	fe 01       	movw	r30, r28
    13a6:	eb 5b       	subi	r30, 0xBB	; 187
    13a8:	ff 4f       	sbci	r31, 0xFF	; 255
    13aa:	91 83       	std	Z+1, r25	; 0x01
    13ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ae:	de 01       	movw	r26, r28
    13b0:	a9 5b       	subi	r26, 0xB9	; 185
    13b2:	bf 4f       	sbci	r27, 0xFF	; 255
    13b4:	fe 01       	movw	r30, r28
    13b6:	e9 5b       	subi	r30, 0xB9	; 185
    13b8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ba:	80 81       	ld	r24, Z
    13bc:	91 81       	ldd	r25, Z+1	; 0x01
    13be:	01 97       	sbiw	r24, 0x01	; 1
    13c0:	11 96       	adiw	r26, 0x01	; 1
    13c2:	9c 93       	st	X, r25
    13c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c6:	fe 01       	movw	r30, r28
    13c8:	e9 5b       	subi	r30, 0xB9	; 185
    13ca:	ff 4f       	sbci	r31, 0xFF	; 255
    13cc:	80 81       	ld	r24, Z
    13ce:	91 81       	ldd	r25, Z+1	; 0x01
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	d1 f6       	brne	.-76     	; 0x1388 <lcd_sendCommand+0x3fe>
    13d4:	27 c0       	rjmp	.+78     	; 0x1424 <lcd_sendCommand+0x49a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13d6:	8e 01       	movw	r16, r28
    13d8:	09 5b       	subi	r16, 0xB9	; 185
    13da:	1f 4f       	sbci	r17, 0xFF	; 255
    13dc:	fe 01       	movw	r30, r28
    13de:	e7 5b       	subi	r30, 0xB7	; 183
    13e0:	ff 4f       	sbci	r31, 0xFF	; 255
    13e2:	60 81       	ld	r22, Z
    13e4:	71 81       	ldd	r23, Z+1	; 0x01
    13e6:	82 81       	ldd	r24, Z+2	; 0x02
    13e8:	93 81       	ldd	r25, Z+3	; 0x03
    13ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ee:	dc 01       	movw	r26, r24
    13f0:	cb 01       	movw	r24, r22
    13f2:	f8 01       	movw	r30, r16
    13f4:	91 83       	std	Z+1, r25	; 0x01
    13f6:	80 83       	st	Z, r24
    13f8:	de 01       	movw	r26, r28
    13fa:	ad 5b       	subi	r26, 0xBD	; 189
    13fc:	bf 4f       	sbci	r27, 0xFF	; 255
    13fe:	fe 01       	movw	r30, r28
    1400:	e9 5b       	subi	r30, 0xB9	; 185
    1402:	ff 4f       	sbci	r31, 0xFF	; 255
    1404:	80 81       	ld	r24, Z
    1406:	91 81       	ldd	r25, Z+1	; 0x01
    1408:	8d 93       	st	X+, r24
    140a:	9c 93       	st	X, r25
    140c:	fe 01       	movw	r30, r28
    140e:	ed 5b       	subi	r30, 0xBD	; 189
    1410:	ff 4f       	sbci	r31, 0xFF	; 255
    1412:	80 81       	ld	r24, Z
    1414:	91 81       	ldd	r25, Z+1	; 0x01
    1416:	01 97       	sbiw	r24, 0x01	; 1
    1418:	f1 f7       	brne	.-4      	; 0x1416 <lcd_sendCommand+0x48c>
    141a:	fe 01       	movw	r30, r28
    141c:	ed 5b       	subi	r30, 0xBD	; 189
    141e:	ff 4f       	sbci	r31, 0xFF	; 255
    1420:	91 83       	std	Z+1, r25	; 0x01
    1422:	80 83       	st	Z, r24
	LCD_DATA_PORT=(LCD_DATA_PORT&0xF0)|((command&0xF0)>>4); /*Because we want to insert the last 4 bits of command with the first 4 bits in port*/
	#endif

	/*least 4 bits of command*/
		_delay_ms(1);
		LCD_CTRL_PORT&=~(1<<E); //clear en
    1424:	a2 e3       	ldi	r26, 0x32	; 50
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	e2 e3       	ldi	r30, 0x32	; 50
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	8f 7b       	andi	r24, 0xBF	; 191
    1430:	8c 93       	st	X, r24
    1432:	fe 01       	movw	r30, r28
    1434:	ff 96       	adiw	r30, 0x3f	; 63
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	a0 e8       	ldi	r26, 0x80	; 128
    143c:	bf e3       	ldi	r27, 0x3F	; 63
    143e:	80 83       	st	Z, r24
    1440:	91 83       	std	Z+1, r25	; 0x01
    1442:	a2 83       	std	Z+2, r26	; 0x02
    1444:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1446:	fe 01       	movw	r30, r28
    1448:	ff 96       	adiw	r30, 0x3f	; 63
    144a:	60 81       	ld	r22, Z
    144c:	71 81       	ldd	r23, Z+1	; 0x01
    144e:	82 81       	ldd	r24, Z+2	; 0x02
    1450:	93 81       	ldd	r25, Z+3	; 0x03
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	4a e7       	ldi	r20, 0x7A	; 122
    1458:	53 e4       	ldi	r21, 0x43	; 67
    145a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	8b af       	std	Y+59, r24	; 0x3b
    1464:	9c af       	std	Y+60, r25	; 0x3c
    1466:	ad af       	std	Y+61, r26	; 0x3d
    1468:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
    146a:	6b ad       	ldd	r22, Y+59	; 0x3b
    146c:	7c ad       	ldd	r23, Y+60	; 0x3c
    146e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1470:	9e ad       	ldd	r25, Y+62	; 0x3e
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	40 e8       	ldi	r20, 0x80	; 128
    1478:	5f e3       	ldi	r21, 0x3F	; 63
    147a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    147e:	88 23       	and	r24, r24
    1480:	2c f4       	brge	.+10     	; 0x148c <lcd_sendCommand+0x502>
		__ticks = 1;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	9a af       	std	Y+58, r25	; 0x3a
    1488:	89 af       	std	Y+57, r24	; 0x39
    148a:	41 c0       	rjmp	.+130    	; 0x150e <lcd_sendCommand+0x584>
	else if (__tmp > 65535)
    148c:	6b ad       	ldd	r22, Y+59	; 0x3b
    148e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1490:	8d ad       	ldd	r24, Y+61	; 0x3d
    1492:	9e ad       	ldd	r25, Y+62	; 0x3e
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	3f ef       	ldi	r19, 0xFF	; 255
    1498:	4f e7       	ldi	r20, 0x7F	; 127
    149a:	57 e4       	ldi	r21, 0x47	; 71
    149c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14a0:	18 16       	cp	r1, r24
    14a2:	5c f5       	brge	.+86     	; 0x14fa <lcd_sendCommand+0x570>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a4:	fe 01       	movw	r30, r28
    14a6:	ff 96       	adiw	r30, 0x3f	; 63
    14a8:	60 81       	ld	r22, Z
    14aa:	71 81       	ldd	r23, Z+1	; 0x01
    14ac:	82 81       	ldd	r24, Z+2	; 0x02
    14ae:	93 81       	ldd	r25, Z+3	; 0x03
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	40 e2       	ldi	r20, 0x20	; 32
    14b6:	51 e4       	ldi	r21, 0x41	; 65
    14b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14bc:	dc 01       	movw	r26, r24
    14be:	cb 01       	movw	r24, r22
    14c0:	bc 01       	movw	r22, r24
    14c2:	cd 01       	movw	r24, r26
    14c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	9a af       	std	Y+58, r25	; 0x3a
    14ce:	89 af       	std	Y+57, r24	; 0x39
    14d0:	0f c0       	rjmp	.+30     	; 0x14f0 <lcd_sendCommand+0x566>
    14d2:	89 e1       	ldi	r24, 0x19	; 25
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	98 af       	std	Y+56, r25	; 0x38
    14d8:	8f ab       	std	Y+55, r24	; 0x37
    14da:	8f a9       	ldd	r24, Y+55	; 0x37
    14dc:	98 ad       	ldd	r25, Y+56	; 0x38
    14de:	01 97       	sbiw	r24, 0x01	; 1
    14e0:	f1 f7       	brne	.-4      	; 0x14de <lcd_sendCommand+0x554>
    14e2:	98 af       	std	Y+56, r25	; 0x38
    14e4:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e6:	89 ad       	ldd	r24, Y+57	; 0x39
    14e8:	9a ad       	ldd	r25, Y+58	; 0x3a
    14ea:	01 97       	sbiw	r24, 0x01	; 1
    14ec:	9a af       	std	Y+58, r25	; 0x3a
    14ee:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14f0:	89 ad       	ldd	r24, Y+57	; 0x39
    14f2:	9a ad       	ldd	r25, Y+58	; 0x3a
    14f4:	00 97       	sbiw	r24, 0x00	; 0
    14f6:	69 f7       	brne	.-38     	; 0x14d2 <lcd_sendCommand+0x548>
    14f8:	14 c0       	rjmp	.+40     	; 0x1522 <lcd_sendCommand+0x598>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14fa:	6b ad       	ldd	r22, Y+59	; 0x3b
    14fc:	7c ad       	ldd	r23, Y+60	; 0x3c
    14fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1500:	9e ad       	ldd	r25, Y+62	; 0x3e
    1502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	9a af       	std	Y+58, r25	; 0x3a
    150c:	89 af       	std	Y+57, r24	; 0x39
    150e:	89 ad       	ldd	r24, Y+57	; 0x39
    1510:	9a ad       	ldd	r25, Y+58	; 0x3a
    1512:	9e ab       	std	Y+54, r25	; 0x36
    1514:	8d ab       	std	Y+53, r24	; 0x35
    1516:	8d a9       	ldd	r24, Y+53	; 0x35
    1518:	9e a9       	ldd	r25, Y+54	; 0x36
    151a:	01 97       	sbiw	r24, 0x01	; 1
    151c:	f1 f7       	brne	.-4      	; 0x151a <lcd_sendCommand+0x590>
    151e:	9e ab       	std	Y+54, r25	; 0x36
    1520:	8d ab       	std	Y+53, r24	; 0x35
		_delay_ms(1);
		LCD_CTRL_PORT|=(1<<E);//set en to send the rest of the data
    1522:	a2 e3       	ldi	r26, 0x32	; 50
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e2 e3       	ldi	r30, 0x32	; 50
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	80 64       	ori	r24, 0x40	; 64
    152e:	8c 93       	st	X, r24
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	a0 e8       	ldi	r26, 0x80	; 128
    1536:	bf e3       	ldi	r27, 0x3F	; 63
    1538:	89 ab       	std	Y+49, r24	; 0x31
    153a:	9a ab       	std	Y+50, r25	; 0x32
    153c:	ab ab       	std	Y+51, r26	; 0x33
    153e:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1540:	69 a9       	ldd	r22, Y+49	; 0x31
    1542:	7a a9       	ldd	r23, Y+50	; 0x32
    1544:	8b a9       	ldd	r24, Y+51	; 0x33
    1546:	9c a9       	ldd	r25, Y+52	; 0x34
    1548:	2b ea       	ldi	r18, 0xAB	; 171
    154a:	3a ea       	ldi	r19, 0xAA	; 170
    154c:	4a ea       	ldi	r20, 0xAA	; 170
    154e:	5e e3       	ldi	r21, 0x3E	; 62
    1550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	8d a7       	std	Y+45, r24	; 0x2d
    155a:	9e a7       	std	Y+46, r25	; 0x2e
    155c:	af a7       	std	Y+47, r26	; 0x2f
    155e:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    1560:	6d a5       	ldd	r22, Y+45	; 0x2d
    1562:	7e a5       	ldd	r23, Y+46	; 0x2e
    1564:	8f a5       	ldd	r24, Y+47	; 0x2f
    1566:	98 a9       	ldd	r25, Y+48	; 0x30
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	40 e8       	ldi	r20, 0x80	; 128
    156e:	5f e3       	ldi	r21, 0x3F	; 63
    1570:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1574:	88 23       	and	r24, r24
    1576:	1c f4       	brge	.+6      	; 0x157e <lcd_sendCommand+0x5f4>
		__ticks = 1;
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	8c a7       	std	Y+44, r24	; 0x2c
    157c:	91 c0       	rjmp	.+290    	; 0x16a0 <lcd_sendCommand+0x716>
	else if (__tmp > 255)
    157e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1580:	7e a5       	ldd	r23, Y+46	; 0x2e
    1582:	8f a5       	ldd	r24, Y+47	; 0x2f
    1584:	98 a9       	ldd	r25, Y+48	; 0x30
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	4f e7       	ldi	r20, 0x7F	; 127
    158c:	53 e4       	ldi	r21, 0x43	; 67
    158e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1592:	18 16       	cp	r1, r24
    1594:	0c f0       	brlt	.+2      	; 0x1598 <lcd_sendCommand+0x60e>
    1596:	7b c0       	rjmp	.+246    	; 0x168e <lcd_sendCommand+0x704>
	{
		_delay_ms(__us / 1000.0);
    1598:	69 a9       	ldd	r22, Y+49	; 0x31
    159a:	7a a9       	ldd	r23, Y+50	; 0x32
    159c:	8b a9       	ldd	r24, Y+51	; 0x33
    159e:	9c a9       	ldd	r25, Y+52	; 0x34
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	4a e7       	ldi	r20, 0x7A	; 122
    15a6:	54 e4       	ldi	r21, 0x44	; 68
    15a8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	88 a7       	std	Y+40, r24	; 0x28
    15b2:	99 a7       	std	Y+41, r25	; 0x29
    15b4:	aa a7       	std	Y+42, r26	; 0x2a
    15b6:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b8:	68 a5       	ldd	r22, Y+40	; 0x28
    15ba:	79 a5       	ldd	r23, Y+41	; 0x29
    15bc:	8a a5       	ldd	r24, Y+42	; 0x2a
    15be:	9b a5       	ldd	r25, Y+43	; 0x2b
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	4a e7       	ldi	r20, 0x7A	; 122
    15c6:	53 e4       	ldi	r21, 0x43	; 67
    15c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	8c a3       	std	Y+36, r24	; 0x24
    15d2:	9d a3       	std	Y+37, r25	; 0x25
    15d4:	ae a3       	std	Y+38, r26	; 0x26
    15d6:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    15d8:	6c a1       	ldd	r22, Y+36	; 0x24
    15da:	7d a1       	ldd	r23, Y+37	; 0x25
    15dc:	8e a1       	ldd	r24, Y+38	; 0x26
    15de:	9f a1       	ldd	r25, Y+39	; 0x27
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	40 e8       	ldi	r20, 0x80	; 128
    15e6:	5f e3       	ldi	r21, 0x3F	; 63
    15e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15ec:	88 23       	and	r24, r24
    15ee:	2c f4       	brge	.+10     	; 0x15fa <lcd_sendCommand+0x670>
		__ticks = 1;
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	9b a3       	std	Y+35, r25	; 0x23
    15f6:	8a a3       	std	Y+34, r24	; 0x22
    15f8:	3f c0       	rjmp	.+126    	; 0x1678 <lcd_sendCommand+0x6ee>
	else if (__tmp > 65535)
    15fa:	6c a1       	ldd	r22, Y+36	; 0x24
    15fc:	7d a1       	ldd	r23, Y+37	; 0x25
    15fe:	8e a1       	ldd	r24, Y+38	; 0x26
    1600:	9f a1       	ldd	r25, Y+39	; 0x27
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	3f ef       	ldi	r19, 0xFF	; 255
    1606:	4f e7       	ldi	r20, 0x7F	; 127
    1608:	57 e4       	ldi	r21, 0x47	; 71
    160a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    160e:	18 16       	cp	r1, r24
    1610:	4c f5       	brge	.+82     	; 0x1664 <lcd_sendCommand+0x6da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1612:	68 a5       	ldd	r22, Y+40	; 0x28
    1614:	79 a5       	ldd	r23, Y+41	; 0x29
    1616:	8a a5       	ldd	r24, Y+42	; 0x2a
    1618:	9b a5       	ldd	r25, Y+43	; 0x2b
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	40 e2       	ldi	r20, 0x20	; 32
    1620:	51 e4       	ldi	r21, 0x41	; 65
    1622:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	bc 01       	movw	r22, r24
    162c:	cd 01       	movw	r24, r26
    162e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	9b a3       	std	Y+35, r25	; 0x23
    1638:	8a a3       	std	Y+34, r24	; 0x22
    163a:	0f c0       	rjmp	.+30     	; 0x165a <lcd_sendCommand+0x6d0>
    163c:	89 e1       	ldi	r24, 0x19	; 25
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	99 a3       	std	Y+33, r25	; 0x21
    1642:	88 a3       	std	Y+32, r24	; 0x20
    1644:	88 a1       	ldd	r24, Y+32	; 0x20
    1646:	99 a1       	ldd	r25, Y+33	; 0x21
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	f1 f7       	brne	.-4      	; 0x1648 <lcd_sendCommand+0x6be>
    164c:	99 a3       	std	Y+33, r25	; 0x21
    164e:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1650:	8a a1       	ldd	r24, Y+34	; 0x22
    1652:	9b a1       	ldd	r25, Y+35	; 0x23
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	9b a3       	std	Y+35, r25	; 0x23
    1658:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    165a:	8a a1       	ldd	r24, Y+34	; 0x22
    165c:	9b a1       	ldd	r25, Y+35	; 0x23
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	69 f7       	brne	.-38     	; 0x163c <lcd_sendCommand+0x6b2>
    1662:	24 c0       	rjmp	.+72     	; 0x16ac <lcd_sendCommand+0x722>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1664:	6c a1       	ldd	r22, Y+36	; 0x24
    1666:	7d a1       	ldd	r23, Y+37	; 0x25
    1668:	8e a1       	ldd	r24, Y+38	; 0x26
    166a:	9f a1       	ldd	r25, Y+39	; 0x27
    166c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	9b a3       	std	Y+35, r25	; 0x23
    1676:	8a a3       	std	Y+34, r24	; 0x22
    1678:	8a a1       	ldd	r24, Y+34	; 0x22
    167a:	9b a1       	ldd	r25, Y+35	; 0x23
    167c:	9f 8f       	std	Y+31, r25	; 0x1f
    167e:	8e 8f       	std	Y+30, r24	; 0x1e
    1680:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1682:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1684:	01 97       	sbiw	r24, 0x01	; 1
    1686:	f1 f7       	brne	.-4      	; 0x1684 <lcd_sendCommand+0x6fa>
    1688:	9f 8f       	std	Y+31, r25	; 0x1f
    168a:	8e 8f       	std	Y+30, r24	; 0x1e
    168c:	0f c0       	rjmp	.+30     	; 0x16ac <lcd_sendCommand+0x722>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    168e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1690:	7e a5       	ldd	r23, Y+46	; 0x2e
    1692:	8f a5       	ldd	r24, Y+47	; 0x2f
    1694:	98 a9       	ldd	r25, Y+48	; 0x30
    1696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	8c a7       	std	Y+44, r24	; 0x2c
    16a0:	8c a5       	ldd	r24, Y+44	; 0x2c
    16a2:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16a6:	8a 95       	dec	r24
    16a8:	f1 f7       	brne	.-4      	; 0x16a6 <lcd_sendCommand+0x71c>
    16aa:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_us(1);
		#ifdef UPPER_PORT_PINS
		LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|((command&0x0F)<<4);
    16ac:	a5 e3       	ldi	r26, 0x35	; 53
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e5 e3       	ldi	r30, 0x35	; 53
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	28 2f       	mov	r18, r24
    16b8:	2f 70       	andi	r18, 0x0F	; 15
    16ba:	fe 01       	movw	r30, r28
    16bc:	e3 59       	subi	r30, 0x93	; 147
    16be:	ff 4f       	sbci	r31, 0xFF	; 255
    16c0:	80 81       	ld	r24, Z
    16c2:	88 2f       	mov	r24, r24
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	82 95       	swap	r24
    16c8:	92 95       	swap	r25
    16ca:	90 7f       	andi	r25, 0xF0	; 240
    16cc:	98 27       	eor	r25, r24
    16ce:	80 7f       	andi	r24, 0xF0	; 240
    16d0:	98 27       	eor	r25, r24
    16d2:	82 2b       	or	r24, r18
    16d4:	8c 93       	st	X, r24
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	a0 e8       	ldi	r26, 0x80	; 128
    16dc:	bf e3       	ldi	r27, 0x3F	; 63
    16de:	89 8f       	std	Y+25, r24	; 0x19
    16e0:	9a 8f       	std	Y+26, r25	; 0x1a
    16e2:	ab 8f       	std	Y+27, r26	; 0x1b
    16e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e6:	69 8d       	ldd	r22, Y+25	; 0x19
    16e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	4a e7       	ldi	r20, 0x7A	; 122
    16f4:	53 e4       	ldi	r21, 0x43	; 67
    16f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	8d 8b       	std	Y+21, r24	; 0x15
    1700:	9e 8b       	std	Y+22, r25	; 0x16
    1702:	af 8b       	std	Y+23, r26	; 0x17
    1704:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1706:	6d 89       	ldd	r22, Y+21	; 0x15
    1708:	7e 89       	ldd	r23, Y+22	; 0x16
    170a:	8f 89       	ldd	r24, Y+23	; 0x17
    170c:	98 8d       	ldd	r25, Y+24	; 0x18
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	40 e8       	ldi	r20, 0x80	; 128
    1714:	5f e3       	ldi	r21, 0x3F	; 63
    1716:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    171a:	88 23       	and	r24, r24
    171c:	2c f4       	brge	.+10     	; 0x1728 <lcd_sendCommand+0x79e>
		__ticks = 1;
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	9c 8b       	std	Y+20, r25	; 0x14
    1724:	8b 8b       	std	Y+19, r24	; 0x13
    1726:	3f c0       	rjmp	.+126    	; 0x17a6 <lcd_sendCommand+0x81c>
	else if (__tmp > 65535)
    1728:	6d 89       	ldd	r22, Y+21	; 0x15
    172a:	7e 89       	ldd	r23, Y+22	; 0x16
    172c:	8f 89       	ldd	r24, Y+23	; 0x17
    172e:	98 8d       	ldd	r25, Y+24	; 0x18
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	3f ef       	ldi	r19, 0xFF	; 255
    1734:	4f e7       	ldi	r20, 0x7F	; 127
    1736:	57 e4       	ldi	r21, 0x47	; 71
    1738:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    173c:	18 16       	cp	r1, r24
    173e:	4c f5       	brge	.+82     	; 0x1792 <lcd_sendCommand+0x808>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1740:	69 8d       	ldd	r22, Y+25	; 0x19
    1742:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1744:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1746:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	40 e2       	ldi	r20, 0x20	; 32
    174e:	51 e4       	ldi	r21, 0x41	; 65
    1750:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	bc 01       	movw	r22, r24
    175a:	cd 01       	movw	r24, r26
    175c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	9c 8b       	std	Y+20, r25	; 0x14
    1766:	8b 8b       	std	Y+19, r24	; 0x13
    1768:	0f c0       	rjmp	.+30     	; 0x1788 <lcd_sendCommand+0x7fe>
    176a:	89 e1       	ldi	r24, 0x19	; 25
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	9a 8b       	std	Y+18, r25	; 0x12
    1770:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1772:	89 89       	ldd	r24, Y+17	; 0x11
    1774:	9a 89       	ldd	r25, Y+18	; 0x12
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	f1 f7       	brne	.-4      	; 0x1776 <lcd_sendCommand+0x7ec>
    177a:	9a 8b       	std	Y+18, r25	; 0x12
    177c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177e:	8b 89       	ldd	r24, Y+19	; 0x13
    1780:	9c 89       	ldd	r25, Y+20	; 0x14
    1782:	01 97       	sbiw	r24, 0x01	; 1
    1784:	9c 8b       	std	Y+20, r25	; 0x14
    1786:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1788:	8b 89       	ldd	r24, Y+19	; 0x13
    178a:	9c 89       	ldd	r25, Y+20	; 0x14
    178c:	00 97       	sbiw	r24, 0x00	; 0
    178e:	69 f7       	brne	.-38     	; 0x176a <lcd_sendCommand+0x7e0>
    1790:	14 c0       	rjmp	.+40     	; 0x17ba <lcd_sendCommand+0x830>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1792:	6d 89       	ldd	r22, Y+21	; 0x15
    1794:	7e 89       	ldd	r23, Y+22	; 0x16
    1796:	8f 89       	ldd	r24, Y+23	; 0x17
    1798:	98 8d       	ldd	r25, Y+24	; 0x18
    179a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	9c 8b       	std	Y+20, r25	; 0x14
    17a4:	8b 8b       	std	Y+19, r24	; 0x13
    17a6:	8b 89       	ldd	r24, Y+19	; 0x13
    17a8:	9c 89       	ldd	r25, Y+20	; 0x14
    17aa:	98 8b       	std	Y+16, r25	; 0x10
    17ac:	8f 87       	std	Y+15, r24	; 0x0f
    17ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    17b0:	98 89       	ldd	r25, Y+16	; 0x10
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	f1 f7       	brne	.-4      	; 0x17b2 <lcd_sendCommand+0x828>
    17b6:	98 8b       	std	Y+16, r25	; 0x10
    17b8:	8f 87       	std	Y+15, r24	; 0x0f
		#elif
		LCD_DATA_PORT=(LCD_DATA_PORT&0xF0)|(command&0x0F);
		#endif
		_delay_ms(1);
		LCD_CTRL_PORT&=~(1<<E); //clear en
    17ba:	a2 e3       	ldi	r26, 0x32	; 50
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e2 e3       	ldi	r30, 0x32	; 50
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	8f 7b       	andi	r24, 0xBF	; 191
    17c6:	8c 93       	st	X, r24
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	a0 e8       	ldi	r26, 0x80	; 128
    17ce:	bf e3       	ldi	r27, 0x3F	; 63
    17d0:	8b 87       	std	Y+11, r24	; 0x0b
    17d2:	9c 87       	std	Y+12, r25	; 0x0c
    17d4:	ad 87       	std	Y+13, r26	; 0x0d
    17d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17da:	7c 85       	ldd	r23, Y+12	; 0x0c
    17dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    17de:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	4a e7       	ldi	r20, 0x7A	; 122
    17e6:	53 e4       	ldi	r21, 0x43	; 67
    17e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	8f 83       	std	Y+7, r24	; 0x07
    17f2:	98 87       	std	Y+8, r25	; 0x08
    17f4:	a9 87       	std	Y+9, r26	; 0x09
    17f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17f8:	6f 81       	ldd	r22, Y+7	; 0x07
    17fa:	78 85       	ldd	r23, Y+8	; 0x08
    17fc:	89 85       	ldd	r24, Y+9	; 0x09
    17fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	40 e8       	ldi	r20, 0x80	; 128
    1806:	5f e3       	ldi	r21, 0x3F	; 63
    1808:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    180c:	88 23       	and	r24, r24
    180e:	2c f4       	brge	.+10     	; 0x181a <lcd_sendCommand+0x890>
		__ticks = 1;
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	9e 83       	std	Y+6, r25	; 0x06
    1816:	8d 83       	std	Y+5, r24	; 0x05
    1818:	3f c0       	rjmp	.+126    	; 0x1898 <lcd_sendCommand+0x90e>
	else if (__tmp > 65535)
    181a:	6f 81       	ldd	r22, Y+7	; 0x07
    181c:	78 85       	ldd	r23, Y+8	; 0x08
    181e:	89 85       	ldd	r24, Y+9	; 0x09
    1820:	9a 85       	ldd	r25, Y+10	; 0x0a
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	3f ef       	ldi	r19, 0xFF	; 255
    1826:	4f e7       	ldi	r20, 0x7F	; 127
    1828:	57 e4       	ldi	r21, 0x47	; 71
    182a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    182e:	18 16       	cp	r1, r24
    1830:	4c f5       	brge	.+82     	; 0x1884 <lcd_sendCommand+0x8fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1832:	6b 85       	ldd	r22, Y+11	; 0x0b
    1834:	7c 85       	ldd	r23, Y+12	; 0x0c
    1836:	8d 85       	ldd	r24, Y+13	; 0x0d
    1838:	9e 85       	ldd	r25, Y+14	; 0x0e
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	40 e2       	ldi	r20, 0x20	; 32
    1840:	51 e4       	ldi	r21, 0x41	; 65
    1842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1846:	dc 01       	movw	r26, r24
    1848:	cb 01       	movw	r24, r22
    184a:	bc 01       	movw	r22, r24
    184c:	cd 01       	movw	r24, r26
    184e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	9e 83       	std	Y+6, r25	; 0x06
    1858:	8d 83       	std	Y+5, r24	; 0x05
    185a:	0f c0       	rjmp	.+30     	; 0x187a <lcd_sendCommand+0x8f0>
    185c:	89 e1       	ldi	r24, 0x19	; 25
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	9c 83       	std	Y+4, r25	; 0x04
    1862:	8b 83       	std	Y+3, r24	; 0x03
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	9c 81       	ldd	r25, Y+4	; 0x04
    1868:	01 97       	sbiw	r24, 0x01	; 1
    186a:	f1 f7       	brne	.-4      	; 0x1868 <lcd_sendCommand+0x8de>
    186c:	9c 83       	std	Y+4, r25	; 0x04
    186e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1870:	8d 81       	ldd	r24, Y+5	; 0x05
    1872:	9e 81       	ldd	r25, Y+6	; 0x06
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	9e 83       	std	Y+6, r25	; 0x06
    1878:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    187a:	8d 81       	ldd	r24, Y+5	; 0x05
    187c:	9e 81       	ldd	r25, Y+6	; 0x06
    187e:	00 97       	sbiw	r24, 0x00	; 0
    1880:	69 f7       	brne	.-38     	; 0x185c <lcd_sendCommand+0x8d2>
    1882:	14 c0       	rjmp	.+40     	; 0x18ac <lcd_sendCommand+0x922>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1884:	6f 81       	ldd	r22, Y+7	; 0x07
    1886:	78 85       	ldd	r23, Y+8	; 0x08
    1888:	89 85       	ldd	r24, Y+9	; 0x09
    188a:	9a 85       	ldd	r25, Y+10	; 0x0a
    188c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1890:	dc 01       	movw	r26, r24
    1892:	cb 01       	movw	r24, r22
    1894:	9e 83       	std	Y+6, r25	; 0x06
    1896:	8d 83       	std	Y+5, r24	; 0x05
    1898:	8d 81       	ldd	r24, Y+5	; 0x05
    189a:	9e 81       	ldd	r25, Y+6	; 0x06
    189c:	9a 83       	std	Y+2, r25	; 0x02
    189e:	89 83       	std	Y+1, r24	; 0x01
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	9a 81       	ldd	r25, Y+2	; 0x02
    18a4:	01 97       	sbiw	r24, 0x01	; 1
    18a6:	f1 f7       	brne	.-4      	; 0x18a4 <lcd_sendCommand+0x91a>
    18a8:	9a 83       	std	Y+2, r25	; 0x02
    18aa:	89 83       	std	Y+1, r24	; 0x01





}
    18ac:	c3 59       	subi	r28, 0x93	; 147
    18ae:	df 4f       	sbci	r29, 0xFF	; 255
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	f8 94       	cli
    18b4:	de bf       	out	0x3e, r29	; 62
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	cd bf       	out	0x3d, r28	; 61
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	1f 91       	pop	r17
    18c0:	0f 91       	pop	r16
    18c2:	08 95       	ret

000018c4 <lcd_displayChar>:


void lcd_displayChar(unsigned char data){
    18c4:	0f 93       	push	r16
    18c6:	1f 93       	push	r17
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	cd 56       	subi	r28, 0x6D	; 109
    18d2:	d0 40       	sbci	r29, 0x00	; 0
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	de bf       	out	0x3e, r29	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	cd bf       	out	0x3d, r28	; 61
    18de:	fe 01       	movw	r30, r28
    18e0:	e3 59       	subi	r30, 0x93	; 147
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	80 83       	st	Z, r24
	LCD_CTRL_PORT|=(1<<RS);
    18e6:	a2 e3       	ldi	r26, 0x32	; 50
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e2 e3       	ldi	r30, 0x32	; 50
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	80 61       	ori	r24, 0x10	; 16
    18f2:	8c 93       	st	X, r24
	LCD_CTRL_PORT&=~(1<<RW);
    18f4:	a2 e3       	ldi	r26, 0x32	; 50
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e2 e3       	ldi	r30, 0x32	; 50
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	8f 7d       	andi	r24, 0xDF	; 223
    1900:	8c 93       	st	X, r24
    1902:	fe 01       	movw	r30, r28
    1904:	e7 59       	subi	r30, 0x97	; 151
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	a0 e8       	ldi	r26, 0x80	; 128
    190e:	bf e3       	ldi	r27, 0x3F	; 63
    1910:	80 83       	st	Z, r24
    1912:	91 83       	std	Z+1, r25	; 0x01
    1914:	a2 83       	std	Z+2, r26	; 0x02
    1916:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1918:	8e 01       	movw	r16, r28
    191a:	0b 59       	subi	r16, 0x9B	; 155
    191c:	1f 4f       	sbci	r17, 0xFF	; 255
    191e:	fe 01       	movw	r30, r28
    1920:	e7 59       	subi	r30, 0x97	; 151
    1922:	ff 4f       	sbci	r31, 0xFF	; 255
    1924:	60 81       	ld	r22, Z
    1926:	71 81       	ldd	r23, Z+1	; 0x01
    1928:	82 81       	ldd	r24, Z+2	; 0x02
    192a:	93 81       	ldd	r25, Z+3	; 0x03
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	4a e7       	ldi	r20, 0x7A	; 122
    1932:	53 e4       	ldi	r21, 0x43	; 67
    1934:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	f8 01       	movw	r30, r16
    193e:	80 83       	st	Z, r24
    1940:	91 83       	std	Z+1, r25	; 0x01
    1942:	a2 83       	std	Z+2, r26	; 0x02
    1944:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1946:	fe 01       	movw	r30, r28
    1948:	eb 59       	subi	r30, 0x9B	; 155
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	60 81       	ld	r22, Z
    194e:	71 81       	ldd	r23, Z+1	; 0x01
    1950:	82 81       	ldd	r24, Z+2	; 0x02
    1952:	93 81       	ldd	r25, Z+3	; 0x03
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	40 e8       	ldi	r20, 0x80	; 128
    195a:	5f e3       	ldi	r21, 0x3F	; 63
    195c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1960:	88 23       	and	r24, r24
    1962:	44 f4       	brge	.+16     	; 0x1974 <lcd_displayChar+0xb0>
		__ticks = 1;
    1964:	fe 01       	movw	r30, r28
    1966:	ed 59       	subi	r30, 0x9D	; 157
    1968:	ff 4f       	sbci	r31, 0xFF	; 255
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	91 83       	std	Z+1, r25	; 0x01
    1970:	80 83       	st	Z, r24
    1972:	64 c0       	rjmp	.+200    	; 0x1a3c <lcd_displayChar+0x178>
	else if (__tmp > 65535)
    1974:	fe 01       	movw	r30, r28
    1976:	eb 59       	subi	r30, 0x9B	; 155
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	60 81       	ld	r22, Z
    197c:	71 81       	ldd	r23, Z+1	; 0x01
    197e:	82 81       	ldd	r24, Z+2	; 0x02
    1980:	93 81       	ldd	r25, Z+3	; 0x03
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	3f ef       	ldi	r19, 0xFF	; 255
    1986:	4f e7       	ldi	r20, 0x7F	; 127
    1988:	57 e4       	ldi	r21, 0x47	; 71
    198a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    198e:	18 16       	cp	r1, r24
    1990:	0c f0       	brlt	.+2      	; 0x1994 <lcd_displayChar+0xd0>
    1992:	43 c0       	rjmp	.+134    	; 0x1a1a <lcd_displayChar+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1994:	fe 01       	movw	r30, r28
    1996:	e7 59       	subi	r30, 0x97	; 151
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	60 81       	ld	r22, Z
    199c:	71 81       	ldd	r23, Z+1	; 0x01
    199e:	82 81       	ldd	r24, Z+2	; 0x02
    19a0:	93 81       	ldd	r25, Z+3	; 0x03
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e2       	ldi	r20, 0x20	; 32
    19a8:	51 e4       	ldi	r21, 0x41	; 65
    19aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	8e 01       	movw	r16, r28
    19b4:	0d 59       	subi	r16, 0x9D	; 157
    19b6:	1f 4f       	sbci	r17, 0xFF	; 255
    19b8:	bc 01       	movw	r22, r24
    19ba:	cd 01       	movw	r24, r26
    19bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	f8 01       	movw	r30, r16
    19c6:	91 83       	std	Z+1, r25	; 0x01
    19c8:	80 83       	st	Z, r24
    19ca:	1f c0       	rjmp	.+62     	; 0x1a0a <lcd_displayChar+0x146>
    19cc:	fe 01       	movw	r30, r28
    19ce:	ef 59       	subi	r30, 0x9F	; 159
    19d0:	ff 4f       	sbci	r31, 0xFF	; 255
    19d2:	89 e1       	ldi	r24, 0x19	; 25
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	91 83       	std	Z+1, r25	; 0x01
    19d8:	80 83       	st	Z, r24
    19da:	fe 01       	movw	r30, r28
    19dc:	ef 59       	subi	r30, 0x9F	; 159
    19de:	ff 4f       	sbci	r31, 0xFF	; 255
    19e0:	80 81       	ld	r24, Z
    19e2:	91 81       	ldd	r25, Z+1	; 0x01
    19e4:	01 97       	sbiw	r24, 0x01	; 1
    19e6:	f1 f7       	brne	.-4      	; 0x19e4 <lcd_displayChar+0x120>
    19e8:	fe 01       	movw	r30, r28
    19ea:	ef 59       	subi	r30, 0x9F	; 159
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	91 83       	std	Z+1, r25	; 0x01
    19f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f2:	de 01       	movw	r26, r28
    19f4:	ad 59       	subi	r26, 0x9D	; 157
    19f6:	bf 4f       	sbci	r27, 0xFF	; 255
    19f8:	fe 01       	movw	r30, r28
    19fa:	ed 59       	subi	r30, 0x9D	; 157
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	80 81       	ld	r24, Z
    1a00:	91 81       	ldd	r25, Z+1	; 0x01
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	11 96       	adiw	r26, 0x01	; 1
    1a06:	9c 93       	st	X, r25
    1a08:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	ed 59       	subi	r30, 0x9D	; 157
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	80 81       	ld	r24, Z
    1a12:	91 81       	ldd	r25, Z+1	; 0x01
    1a14:	00 97       	sbiw	r24, 0x00	; 0
    1a16:	d1 f6       	brne	.-76     	; 0x19cc <lcd_displayChar+0x108>
    1a18:	27 c0       	rjmp	.+78     	; 0x1a68 <lcd_displayChar+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a1a:	8e 01       	movw	r16, r28
    1a1c:	0d 59       	subi	r16, 0x9D	; 157
    1a1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a20:	fe 01       	movw	r30, r28
    1a22:	eb 59       	subi	r30, 0x9B	; 155
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	60 81       	ld	r22, Z
    1a28:	71 81       	ldd	r23, Z+1	; 0x01
    1a2a:	82 81       	ldd	r24, Z+2	; 0x02
    1a2c:	93 81       	ldd	r25, Z+3	; 0x03
    1a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	f8 01       	movw	r30, r16
    1a38:	91 83       	std	Z+1, r25	; 0x01
    1a3a:	80 83       	st	Z, r24
    1a3c:	de 01       	movw	r26, r28
    1a3e:	a1 5a       	subi	r26, 0xA1	; 161
    1a40:	bf 4f       	sbci	r27, 0xFF	; 255
    1a42:	fe 01       	movw	r30, r28
    1a44:	ed 59       	subi	r30, 0x9D	; 157
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	80 81       	ld	r24, Z
    1a4a:	91 81       	ldd	r25, Z+1	; 0x01
    1a4c:	8d 93       	st	X+, r24
    1a4e:	9c 93       	st	X, r25
    1a50:	fe 01       	movw	r30, r28
    1a52:	e1 5a       	subi	r30, 0xA1	; 161
    1a54:	ff 4f       	sbci	r31, 0xFF	; 255
    1a56:	80 81       	ld	r24, Z
    1a58:	91 81       	ldd	r25, Z+1	; 0x01
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	f1 f7       	brne	.-4      	; 0x1a5a <lcd_displayChar+0x196>
    1a5e:	fe 01       	movw	r30, r28
    1a60:	e1 5a       	subi	r30, 0xA1	; 161
    1a62:	ff 4f       	sbci	r31, 0xFF	; 255
    1a64:	91 83       	std	Z+1, r25	; 0x01
    1a66:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_CTRL_PORT|=(1<<E);
    1a68:	a2 e3       	ldi	r26, 0x32	; 50
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e2 e3       	ldi	r30, 0x32	; 50
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	80 64       	ori	r24, 0x40	; 64
    1a74:	8c 93       	st	X, r24
    1a76:	fe 01       	movw	r30, r28
    1a78:	e5 5a       	subi	r30, 0xA5	; 165
    1a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	a0 e8       	ldi	r26, 0x80	; 128
    1a82:	bf e3       	ldi	r27, 0x3F	; 63
    1a84:	80 83       	st	Z, r24
    1a86:	91 83       	std	Z+1, r25	; 0x01
    1a88:	a2 83       	std	Z+2, r26	; 0x02
    1a8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a8c:	8e 01       	movw	r16, r28
    1a8e:	09 5a       	subi	r16, 0xA9	; 169
    1a90:	1f 4f       	sbci	r17, 0xFF	; 255
    1a92:	fe 01       	movw	r30, r28
    1a94:	e5 5a       	subi	r30, 0xA5	; 165
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	60 81       	ld	r22, Z
    1a9a:	71 81       	ldd	r23, Z+1	; 0x01
    1a9c:	82 81       	ldd	r24, Z+2	; 0x02
    1a9e:	93 81       	ldd	r25, Z+3	; 0x03
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	4a e7       	ldi	r20, 0x7A	; 122
    1aa6:	53 e4       	ldi	r21, 0x43	; 67
    1aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	f8 01       	movw	r30, r16
    1ab2:	80 83       	st	Z, r24
    1ab4:	91 83       	std	Z+1, r25	; 0x01
    1ab6:	a2 83       	std	Z+2, r26	; 0x02
    1ab8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1aba:	fe 01       	movw	r30, r28
    1abc:	e9 5a       	subi	r30, 0xA9	; 169
    1abe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac0:	60 81       	ld	r22, Z
    1ac2:	71 81       	ldd	r23, Z+1	; 0x01
    1ac4:	82 81       	ldd	r24, Z+2	; 0x02
    1ac6:	93 81       	ldd	r25, Z+3	; 0x03
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	40 e8       	ldi	r20, 0x80	; 128
    1ace:	5f e3       	ldi	r21, 0x3F	; 63
    1ad0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ad4:	88 23       	and	r24, r24
    1ad6:	44 f4       	brge	.+16     	; 0x1ae8 <lcd_displayChar+0x224>
		__ticks = 1;
    1ad8:	fe 01       	movw	r30, r28
    1ada:	eb 5a       	subi	r30, 0xAB	; 171
    1adc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	91 83       	std	Z+1, r25	; 0x01
    1ae4:	80 83       	st	Z, r24
    1ae6:	64 c0       	rjmp	.+200    	; 0x1bb0 <lcd_displayChar+0x2ec>
	else if (__tmp > 65535)
    1ae8:	fe 01       	movw	r30, r28
    1aea:	e9 5a       	subi	r30, 0xA9	; 169
    1aec:	ff 4f       	sbci	r31, 0xFF	; 255
    1aee:	60 81       	ld	r22, Z
    1af0:	71 81       	ldd	r23, Z+1	; 0x01
    1af2:	82 81       	ldd	r24, Z+2	; 0x02
    1af4:	93 81       	ldd	r25, Z+3	; 0x03
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	3f ef       	ldi	r19, 0xFF	; 255
    1afa:	4f e7       	ldi	r20, 0x7F	; 127
    1afc:	57 e4       	ldi	r21, 0x47	; 71
    1afe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b02:	18 16       	cp	r1, r24
    1b04:	0c f0       	brlt	.+2      	; 0x1b08 <lcd_displayChar+0x244>
    1b06:	43 c0       	rjmp	.+134    	; 0x1b8e <lcd_displayChar+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b08:	fe 01       	movw	r30, r28
    1b0a:	e5 5a       	subi	r30, 0xA5	; 165
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	60 81       	ld	r22, Z
    1b10:	71 81       	ldd	r23, Z+1	; 0x01
    1b12:	82 81       	ldd	r24, Z+2	; 0x02
    1b14:	93 81       	ldd	r25, Z+3	; 0x03
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	40 e2       	ldi	r20, 0x20	; 32
    1b1c:	51 e4       	ldi	r21, 0x41	; 65
    1b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	8e 01       	movw	r16, r28
    1b28:	0b 5a       	subi	r16, 0xAB	; 171
    1b2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b2c:	bc 01       	movw	r22, r24
    1b2e:	cd 01       	movw	r24, r26
    1b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	f8 01       	movw	r30, r16
    1b3a:	91 83       	std	Z+1, r25	; 0x01
    1b3c:	80 83       	st	Z, r24
    1b3e:	1f c0       	rjmp	.+62     	; 0x1b7e <lcd_displayChar+0x2ba>
    1b40:	fe 01       	movw	r30, r28
    1b42:	ed 5a       	subi	r30, 0xAD	; 173
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	89 e1       	ldi	r24, 0x19	; 25
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	91 83       	std	Z+1, r25	; 0x01
    1b4c:	80 83       	st	Z, r24
    1b4e:	fe 01       	movw	r30, r28
    1b50:	ed 5a       	subi	r30, 0xAD	; 173
    1b52:	ff 4f       	sbci	r31, 0xFF	; 255
    1b54:	80 81       	ld	r24, Z
    1b56:	91 81       	ldd	r25, Z+1	; 0x01
    1b58:	01 97       	sbiw	r24, 0x01	; 1
    1b5a:	f1 f7       	brne	.-4      	; 0x1b58 <lcd_displayChar+0x294>
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	ed 5a       	subi	r30, 0xAD	; 173
    1b60:	ff 4f       	sbci	r31, 0xFF	; 255
    1b62:	91 83       	std	Z+1, r25	; 0x01
    1b64:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b66:	de 01       	movw	r26, r28
    1b68:	ab 5a       	subi	r26, 0xAB	; 171
    1b6a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	eb 5a       	subi	r30, 0xAB	; 171
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	80 81       	ld	r24, Z
    1b74:	91 81       	ldd	r25, Z+1	; 0x01
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	11 96       	adiw	r26, 0x01	; 1
    1b7a:	9c 93       	st	X, r25
    1b7c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7e:	fe 01       	movw	r30, r28
    1b80:	eb 5a       	subi	r30, 0xAB	; 171
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	80 81       	ld	r24, Z
    1b86:	91 81       	ldd	r25, Z+1	; 0x01
    1b88:	00 97       	sbiw	r24, 0x00	; 0
    1b8a:	d1 f6       	brne	.-76     	; 0x1b40 <lcd_displayChar+0x27c>
    1b8c:	27 c0       	rjmp	.+78     	; 0x1bdc <lcd_displayChar+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b8e:	8e 01       	movw	r16, r28
    1b90:	0b 5a       	subi	r16, 0xAB	; 171
    1b92:	1f 4f       	sbci	r17, 0xFF	; 255
    1b94:	fe 01       	movw	r30, r28
    1b96:	e9 5a       	subi	r30, 0xA9	; 169
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	60 81       	ld	r22, Z
    1b9c:	71 81       	ldd	r23, Z+1	; 0x01
    1b9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ba0:	93 81       	ldd	r25, Z+3	; 0x03
    1ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	f8 01       	movw	r30, r16
    1bac:	91 83       	std	Z+1, r25	; 0x01
    1bae:	80 83       	st	Z, r24
    1bb0:	de 01       	movw	r26, r28
    1bb2:	af 5a       	subi	r26, 0xAF	; 175
    1bb4:	bf 4f       	sbci	r27, 0xFF	; 255
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	eb 5a       	subi	r30, 0xAB	; 171
    1bba:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbc:	80 81       	ld	r24, Z
    1bbe:	91 81       	ldd	r25, Z+1	; 0x01
    1bc0:	8d 93       	st	X+, r24
    1bc2:	9c 93       	st	X, r25
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	ef 5a       	subi	r30, 0xAF	; 175
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	80 81       	ld	r24, Z
    1bcc:	91 81       	ldd	r25, Z+1	; 0x01
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	f1 f7       	brne	.-4      	; 0x1bce <lcd_displayChar+0x30a>
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	ef 5a       	subi	r30, 0xAF	; 175
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	91 83       	std	Z+1, r25	; 0x01
    1bda:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_CTRL_PORT&=~(1<<E); //clear en
	_delay_ms(1);
#elif(USED_MODE==4)
	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|(data&0xF0);
    1bdc:	a5 e3       	ldi	r26, 0x35	; 53
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	e5 e3       	ldi	r30, 0x35	; 53
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	98 2f       	mov	r25, r24
    1be8:	9f 70       	andi	r25, 0x0F	; 15
    1bea:	fe 01       	movw	r30, r28
    1bec:	e3 59       	subi	r30, 0x93	; 147
    1bee:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf0:	80 81       	ld	r24, Z
    1bf2:	80 7f       	andi	r24, 0xF0	; 240
    1bf4:	89 2b       	or	r24, r25
    1bf6:	8c 93       	st	X, r24
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	e3 5b       	subi	r30, 0xB3	; 179
    1bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	a0 e8       	ldi	r26, 0x80	; 128
    1c04:	bf e3       	ldi	r27, 0x3F	; 63
    1c06:	80 83       	st	Z, r24
    1c08:	91 83       	std	Z+1, r25	; 0x01
    1c0a:	a2 83       	std	Z+2, r26	; 0x02
    1c0c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c0e:	8e 01       	movw	r16, r28
    1c10:	07 5b       	subi	r16, 0xB7	; 183
    1c12:	1f 4f       	sbci	r17, 0xFF	; 255
    1c14:	fe 01       	movw	r30, r28
    1c16:	e3 5b       	subi	r30, 0xB3	; 179
    1c18:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1a:	60 81       	ld	r22, Z
    1c1c:	71 81       	ldd	r23, Z+1	; 0x01
    1c1e:	82 81       	ldd	r24, Z+2	; 0x02
    1c20:	93 81       	ldd	r25, Z+3	; 0x03
    1c22:	2b ea       	ldi	r18, 0xAB	; 171
    1c24:	3a ea       	ldi	r19, 0xAA	; 170
    1c26:	4a ea       	ldi	r20, 0xAA	; 170
    1c28:	5e e3       	ldi	r21, 0x3E	; 62
    1c2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	f8 01       	movw	r30, r16
    1c34:	80 83       	st	Z, r24
    1c36:	91 83       	std	Z+1, r25	; 0x01
    1c38:	a2 83       	std	Z+2, r26	; 0x02
    1c3a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c3c:	fe 01       	movw	r30, r28
    1c3e:	e7 5b       	subi	r30, 0xB7	; 183
    1c40:	ff 4f       	sbci	r31, 0xFF	; 255
    1c42:	60 81       	ld	r22, Z
    1c44:	71 81       	ldd	r23, Z+1	; 0x01
    1c46:	82 81       	ldd	r24, Z+2	; 0x02
    1c48:	93 81       	ldd	r25, Z+3	; 0x03
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	40 e8       	ldi	r20, 0x80	; 128
    1c50:	5f e3       	ldi	r21, 0x3F	; 63
    1c52:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c56:	88 23       	and	r24, r24
    1c58:	34 f4       	brge	.+12     	; 0x1c66 <lcd_displayChar+0x3a2>
		__ticks = 1;
    1c5a:	fe 01       	movw	r30, r28
    1c5c:	e8 5b       	subi	r30, 0xB8	; 184
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	80 83       	st	Z, r24
    1c64:	b4 c0       	rjmp	.+360    	; 0x1dce <lcd_displayChar+0x50a>
	else if (__tmp > 255)
    1c66:	fe 01       	movw	r30, r28
    1c68:	e7 5b       	subi	r30, 0xB7	; 183
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	60 81       	ld	r22, Z
    1c6e:	71 81       	ldd	r23, Z+1	; 0x01
    1c70:	82 81       	ldd	r24, Z+2	; 0x02
    1c72:	93 81       	ldd	r25, Z+3	; 0x03
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	4f e7       	ldi	r20, 0x7F	; 127
    1c7a:	53 e4       	ldi	r21, 0x43	; 67
    1c7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c80:	18 16       	cp	r1, r24
    1c82:	0c f0       	brlt	.+2      	; 0x1c86 <lcd_displayChar+0x3c2>
    1c84:	94 c0       	rjmp	.+296    	; 0x1dae <lcd_displayChar+0x4ea>
	{
		_delay_ms(__us / 1000.0);
    1c86:	fe 01       	movw	r30, r28
    1c88:	e3 5b       	subi	r30, 0xB3	; 179
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	60 81       	ld	r22, Z
    1c8e:	71 81       	ldd	r23, Z+1	; 0x01
    1c90:	82 81       	ldd	r24, Z+2	; 0x02
    1c92:	93 81       	ldd	r25, Z+3	; 0x03
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	4a e7       	ldi	r20, 0x7A	; 122
    1c9a:	54 e4       	ldi	r21, 0x44	; 68
    1c9c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	ec 5b       	subi	r30, 0xBC	; 188
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	80 83       	st	Z, r24
    1cac:	91 83       	std	Z+1, r25	; 0x01
    1cae:	a2 83       	std	Z+2, r26	; 0x02
    1cb0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb2:	8e 01       	movw	r16, r28
    1cb4:	00 5c       	subi	r16, 0xC0	; 192
    1cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb8:	fe 01       	movw	r30, r28
    1cba:	ec 5b       	subi	r30, 0xBC	; 188
    1cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbe:	60 81       	ld	r22, Z
    1cc0:	71 81       	ldd	r23, Z+1	; 0x01
    1cc2:	82 81       	ldd	r24, Z+2	; 0x02
    1cc4:	93 81       	ldd	r25, Z+3	; 0x03
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	4a e7       	ldi	r20, 0x7A	; 122
    1ccc:	53 e4       	ldi	r21, 0x43	; 67
    1cce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	f8 01       	movw	r30, r16
    1cd8:	80 83       	st	Z, r24
    1cda:	91 83       	std	Z+1, r25	; 0x01
    1cdc:	a2 83       	std	Z+2, r26	; 0x02
    1cde:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	e0 5c       	subi	r30, 0xC0	; 192
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	60 81       	ld	r22, Z
    1ce8:	71 81       	ldd	r23, Z+1	; 0x01
    1cea:	82 81       	ldd	r24, Z+2	; 0x02
    1cec:	93 81       	ldd	r25, Z+3	; 0x03
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e8       	ldi	r20, 0x80	; 128
    1cf4:	5f e3       	ldi	r21, 0x3F	; 63
    1cf6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cfa:	88 23       	and	r24, r24
    1cfc:	2c f4       	brge	.+10     	; 0x1d08 <lcd_displayChar+0x444>
		__ticks = 1;
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	9f af       	std	Y+63, r25	; 0x3f
    1d04:	8e af       	std	Y+62, r24	; 0x3e
    1d06:	48 c0       	rjmp	.+144    	; 0x1d98 <lcd_displayChar+0x4d4>
	else if (__tmp > 65535)
    1d08:	fe 01       	movw	r30, r28
    1d0a:	e0 5c       	subi	r30, 0xC0	; 192
    1d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0e:	60 81       	ld	r22, Z
    1d10:	71 81       	ldd	r23, Z+1	; 0x01
    1d12:	82 81       	ldd	r24, Z+2	; 0x02
    1d14:	93 81       	ldd	r25, Z+3	; 0x03
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	3f ef       	ldi	r19, 0xFF	; 255
    1d1a:	4f e7       	ldi	r20, 0x7F	; 127
    1d1c:	57 e4       	ldi	r21, 0x47	; 71
    1d1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d22:	18 16       	cp	r1, r24
    1d24:	64 f5       	brge	.+88     	; 0x1d7e <lcd_displayChar+0x4ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d26:	fe 01       	movw	r30, r28
    1d28:	ec 5b       	subi	r30, 0xBC	; 188
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	60 81       	ld	r22, Z
    1d2e:	71 81       	ldd	r23, Z+1	; 0x01
    1d30:	82 81       	ldd	r24, Z+2	; 0x02
    1d32:	93 81       	ldd	r25, Z+3	; 0x03
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e2       	ldi	r20, 0x20	; 32
    1d3a:	51 e4       	ldi	r21, 0x41	; 65
    1d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	bc 01       	movw	r22, r24
    1d46:	cd 01       	movw	r24, r26
    1d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	9f af       	std	Y+63, r25	; 0x3f
    1d52:	8e af       	std	Y+62, r24	; 0x3e
    1d54:	0f c0       	rjmp	.+30     	; 0x1d74 <lcd_displayChar+0x4b0>
    1d56:	89 e1       	ldi	r24, 0x19	; 25
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	9d af       	std	Y+61, r25	; 0x3d
    1d5c:	8c af       	std	Y+60, r24	; 0x3c
    1d5e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1d60:	9d ad       	ldd	r25, Y+61	; 0x3d
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	f1 f7       	brne	.-4      	; 0x1d62 <lcd_displayChar+0x49e>
    1d66:	9d af       	std	Y+61, r25	; 0x3d
    1d68:	8c af       	std	Y+60, r24	; 0x3c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d6c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	9f af       	std	Y+63, r25	; 0x3f
    1d72:	8e af       	std	Y+62, r24	; 0x3e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d74:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d76:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	69 f7       	brne	.-38     	; 0x1d56 <lcd_displayChar+0x492>
    1d7c:	31 c0       	rjmp	.+98     	; 0x1de0 <lcd_displayChar+0x51c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7e:	fe 01       	movw	r30, r28
    1d80:	e0 5c       	subi	r30, 0xC0	; 192
    1d82:	ff 4f       	sbci	r31, 0xFF	; 255
    1d84:	60 81       	ld	r22, Z
    1d86:	71 81       	ldd	r23, Z+1	; 0x01
    1d88:	82 81       	ldd	r24, Z+2	; 0x02
    1d8a:	93 81       	ldd	r25, Z+3	; 0x03
    1d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	9f af       	std	Y+63, r25	; 0x3f
    1d96:	8e af       	std	Y+62, r24	; 0x3e
    1d98:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d9a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d9c:	9b af       	std	Y+59, r25	; 0x3b
    1d9e:	8a af       	std	Y+58, r24	; 0x3a
    1da0:	8a ad       	ldd	r24, Y+58	; 0x3a
    1da2:	9b ad       	ldd	r25, Y+59	; 0x3b
    1da4:	01 97       	sbiw	r24, 0x01	; 1
    1da6:	f1 f7       	brne	.-4      	; 0x1da4 <lcd_displayChar+0x4e0>
    1da8:	9b af       	std	Y+59, r25	; 0x3b
    1daa:	8a af       	std	Y+58, r24	; 0x3a
    1dac:	19 c0       	rjmp	.+50     	; 0x1de0 <lcd_displayChar+0x51c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1dae:	8e 01       	movw	r16, r28
    1db0:	08 5b       	subi	r16, 0xB8	; 184
    1db2:	1f 4f       	sbci	r17, 0xFF	; 255
    1db4:	fe 01       	movw	r30, r28
    1db6:	e7 5b       	subi	r30, 0xB7	; 183
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	60 81       	ld	r22, Z
    1dbc:	71 81       	ldd	r23, Z+1	; 0x01
    1dbe:	82 81       	ldd	r24, Z+2	; 0x02
    1dc0:	93 81       	ldd	r25, Z+3	; 0x03
    1dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	f8 01       	movw	r30, r16
    1dcc:	80 83       	st	Z, r24
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e8 5b       	subi	r30, 0xB8	; 184
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	80 81       	ld	r24, Z
    1dd6:	89 af       	std	Y+57, r24	; 0x39
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dd8:	89 ad       	ldd	r24, Y+57	; 0x39
    1dda:	8a 95       	dec	r24
    1ddc:	f1 f7       	brne	.-4      	; 0x1dda <lcd_displayChar+0x516>
    1dde:	89 af       	std	Y+57, r24	; 0x39
	LCD_DATA_PORT=(LCD_DATA_PORT&0xF0)|((data&0xF0)>>4); /*Because we want to insert the last 4 bits of command with the first 4 bits in port*/
	#endif

	/*least 4 bits of data*/
	_delay_us(1);
	LCD_CTRL_PORT&=~(1<<E); //clear en
    1de0:	a2 e3       	ldi	r26, 0x32	; 50
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e2 e3       	ldi	r30, 0x32	; 50
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	8f 7b       	andi	r24, 0xBF	; 191
    1dec:	8c 93       	st	X, r24
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	a0 e8       	ldi	r26, 0x80	; 128
    1df4:	bf e3       	ldi	r27, 0x3F	; 63
    1df6:	8d ab       	std	Y+53, r24	; 0x35
    1df8:	9e ab       	std	Y+54, r25	; 0x36
    1dfa:	af ab       	std	Y+55, r26	; 0x37
    1dfc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dfe:	6d a9       	ldd	r22, Y+53	; 0x35
    1e00:	7e a9       	ldd	r23, Y+54	; 0x36
    1e02:	8f a9       	ldd	r24, Y+55	; 0x37
    1e04:	98 ad       	ldd	r25, Y+56	; 0x38
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	4a e7       	ldi	r20, 0x7A	; 122
    1e0c:	53 e4       	ldi	r21, 0x43	; 67
    1e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	89 ab       	std	Y+49, r24	; 0x31
    1e18:	9a ab       	std	Y+50, r25	; 0x32
    1e1a:	ab ab       	std	Y+51, r26	; 0x33
    1e1c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e1e:	69 a9       	ldd	r22, Y+49	; 0x31
    1e20:	7a a9       	ldd	r23, Y+50	; 0x32
    1e22:	8b a9       	ldd	r24, Y+51	; 0x33
    1e24:	9c a9       	ldd	r25, Y+52	; 0x34
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	40 e8       	ldi	r20, 0x80	; 128
    1e2c:	5f e3       	ldi	r21, 0x3F	; 63
    1e2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e32:	88 23       	and	r24, r24
    1e34:	2c f4       	brge	.+10     	; 0x1e40 <lcd_displayChar+0x57c>
		__ticks = 1;
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	98 ab       	std	Y+48, r25	; 0x30
    1e3c:	8f a7       	std	Y+47, r24	; 0x2f
    1e3e:	3f c0       	rjmp	.+126    	; 0x1ebe <lcd_displayChar+0x5fa>
	else if (__tmp > 65535)
    1e40:	69 a9       	ldd	r22, Y+49	; 0x31
    1e42:	7a a9       	ldd	r23, Y+50	; 0x32
    1e44:	8b a9       	ldd	r24, Y+51	; 0x33
    1e46:	9c a9       	ldd	r25, Y+52	; 0x34
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	3f ef       	ldi	r19, 0xFF	; 255
    1e4c:	4f e7       	ldi	r20, 0x7F	; 127
    1e4e:	57 e4       	ldi	r21, 0x47	; 71
    1e50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e54:	18 16       	cp	r1, r24
    1e56:	4c f5       	brge	.+82     	; 0x1eaa <lcd_displayChar+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e58:	6d a9       	ldd	r22, Y+53	; 0x35
    1e5a:	7e a9       	ldd	r23, Y+54	; 0x36
    1e5c:	8f a9       	ldd	r24, Y+55	; 0x37
    1e5e:	98 ad       	ldd	r25, Y+56	; 0x38
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	40 e2       	ldi	r20, 0x20	; 32
    1e66:	51 e4       	ldi	r21, 0x41	; 65
    1e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	bc 01       	movw	r22, r24
    1e72:	cd 01       	movw	r24, r26
    1e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	98 ab       	std	Y+48, r25	; 0x30
    1e7e:	8f a7       	std	Y+47, r24	; 0x2f
    1e80:	0f c0       	rjmp	.+30     	; 0x1ea0 <lcd_displayChar+0x5dc>
    1e82:	89 e1       	ldi	r24, 0x19	; 25
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	9e a7       	std	Y+46, r25	; 0x2e
    1e88:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e8a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e8c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e8e:	01 97       	sbiw	r24, 0x01	; 1
    1e90:	f1 f7       	brne	.-4      	; 0x1e8e <lcd_displayChar+0x5ca>
    1e92:	9e a7       	std	Y+46, r25	; 0x2e
    1e94:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e96:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e98:	98 a9       	ldd	r25, Y+48	; 0x30
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	98 ab       	std	Y+48, r25	; 0x30
    1e9e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ea2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ea4:	00 97       	sbiw	r24, 0x00	; 0
    1ea6:	69 f7       	brne	.-38     	; 0x1e82 <lcd_displayChar+0x5be>
    1ea8:	14 c0       	rjmp	.+40     	; 0x1ed2 <lcd_displayChar+0x60e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eaa:	69 a9       	ldd	r22, Y+49	; 0x31
    1eac:	7a a9       	ldd	r23, Y+50	; 0x32
    1eae:	8b a9       	ldd	r24, Y+51	; 0x33
    1eb0:	9c a9       	ldd	r25, Y+52	; 0x34
    1eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	98 ab       	std	Y+48, r25	; 0x30
    1ebc:	8f a7       	std	Y+47, r24	; 0x2f
    1ebe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ec0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ec2:	9c a7       	std	Y+44, r25	; 0x2c
    1ec4:	8b a7       	std	Y+43, r24	; 0x2b
    1ec6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ec8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1eca:	01 97       	sbiw	r24, 0x01	; 1
    1ecc:	f1 f7       	brne	.-4      	; 0x1eca <lcd_displayChar+0x606>
    1ece:	9c a7       	std	Y+44, r25	; 0x2c
    1ed0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_CTRL_PORT|=(1<<E);//set en to send the rest of the data
    1ed2:	a2 e3       	ldi	r26, 0x32	; 50
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	e2 e3       	ldi	r30, 0x32	; 50
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	80 64       	ori	r24, 0x40	; 64
    1ede:	8c 93       	st	X, r24
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	a0 e8       	ldi	r26, 0x80	; 128
    1ee6:	bf e3       	ldi	r27, 0x3F	; 63
    1ee8:	8f a3       	std	Y+39, r24	; 0x27
    1eea:	98 a7       	std	Y+40, r25	; 0x28
    1eec:	a9 a7       	std	Y+41, r26	; 0x29
    1eee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ef2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ef4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ef6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	4a e7       	ldi	r20, 0x7A	; 122
    1efe:	53 e4       	ldi	r21, 0x43	; 67
    1f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	8b a3       	std	Y+35, r24	; 0x23
    1f0a:	9c a3       	std	Y+36, r25	; 0x24
    1f0c:	ad a3       	std	Y+37, r26	; 0x25
    1f0e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f10:	6b a1       	ldd	r22, Y+35	; 0x23
    1f12:	7c a1       	ldd	r23, Y+36	; 0x24
    1f14:	8d a1       	ldd	r24, Y+37	; 0x25
    1f16:	9e a1       	ldd	r25, Y+38	; 0x26
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e8       	ldi	r20, 0x80	; 128
    1f1e:	5f e3       	ldi	r21, 0x3F	; 63
    1f20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f24:	88 23       	and	r24, r24
    1f26:	2c f4       	brge	.+10     	; 0x1f32 <lcd_displayChar+0x66e>
		__ticks = 1;
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	9a a3       	std	Y+34, r25	; 0x22
    1f2e:	89 a3       	std	Y+33, r24	; 0x21
    1f30:	3f c0       	rjmp	.+126    	; 0x1fb0 <lcd_displayChar+0x6ec>
	else if (__tmp > 65535)
    1f32:	6b a1       	ldd	r22, Y+35	; 0x23
    1f34:	7c a1       	ldd	r23, Y+36	; 0x24
    1f36:	8d a1       	ldd	r24, Y+37	; 0x25
    1f38:	9e a1       	ldd	r25, Y+38	; 0x26
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	3f ef       	ldi	r19, 0xFF	; 255
    1f3e:	4f e7       	ldi	r20, 0x7F	; 127
    1f40:	57 e4       	ldi	r21, 0x47	; 71
    1f42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f46:	18 16       	cp	r1, r24
    1f48:	4c f5       	brge	.+82     	; 0x1f9c <lcd_displayChar+0x6d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4a:	6f a1       	ldd	r22, Y+39	; 0x27
    1f4c:	78 a5       	ldd	r23, Y+40	; 0x28
    1f4e:	89 a5       	ldd	r24, Y+41	; 0x29
    1f50:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e2       	ldi	r20, 0x20	; 32
    1f58:	51 e4       	ldi	r21, 0x41	; 65
    1f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	bc 01       	movw	r22, r24
    1f64:	cd 01       	movw	r24, r26
    1f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	9a a3       	std	Y+34, r25	; 0x22
    1f70:	89 a3       	std	Y+33, r24	; 0x21
    1f72:	0f c0       	rjmp	.+30     	; 0x1f92 <lcd_displayChar+0x6ce>
    1f74:	89 e1       	ldi	r24, 0x19	; 25
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	98 a3       	std	Y+32, r25	; 0x20
    1f7a:	8f 8f       	std	Y+31, r24	; 0x1f
    1f7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f7e:	98 a1       	ldd	r25, Y+32	; 0x20
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	f1 f7       	brne	.-4      	; 0x1f80 <lcd_displayChar+0x6bc>
    1f84:	98 a3       	std	Y+32, r25	; 0x20
    1f86:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f88:	89 a1       	ldd	r24, Y+33	; 0x21
    1f8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	9a a3       	std	Y+34, r25	; 0x22
    1f90:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f92:	89 a1       	ldd	r24, Y+33	; 0x21
    1f94:	9a a1       	ldd	r25, Y+34	; 0x22
    1f96:	00 97       	sbiw	r24, 0x00	; 0
    1f98:	69 f7       	brne	.-38     	; 0x1f74 <lcd_displayChar+0x6b0>
    1f9a:	14 c0       	rjmp	.+40     	; 0x1fc4 <lcd_displayChar+0x700>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f9c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f9e:	7c a1       	ldd	r23, Y+36	; 0x24
    1fa0:	8d a1       	ldd	r24, Y+37	; 0x25
    1fa2:	9e a1       	ldd	r25, Y+38	; 0x26
    1fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	9a a3       	std	Y+34, r25	; 0x22
    1fae:	89 a3       	std	Y+33, r24	; 0x21
    1fb0:	89 a1       	ldd	r24, Y+33	; 0x21
    1fb2:	9a a1       	ldd	r25, Y+34	; 0x22
    1fb4:	9e 8f       	std	Y+30, r25	; 0x1e
    1fb6:	8d 8f       	std	Y+29, r24	; 0x1d
    1fb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	f1 f7       	brne	.-4      	; 0x1fbc <lcd_displayChar+0x6f8>
    1fc0:	9e 8f       	std	Y+30, r25	; 0x1e
    1fc2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|((data&0x0F)<<4);
    1fc4:	a5 e3       	ldi	r26, 0x35	; 53
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
    1fc8:	e5 e3       	ldi	r30, 0x35	; 53
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	28 2f       	mov	r18, r24
    1fd0:	2f 70       	andi	r18, 0x0F	; 15
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	e3 59       	subi	r30, 0x93	; 147
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	80 81       	ld	r24, Z
    1fda:	88 2f       	mov	r24, r24
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	82 95       	swap	r24
    1fe0:	92 95       	swap	r25
    1fe2:	90 7f       	andi	r25, 0xF0	; 240
    1fe4:	98 27       	eor	r25, r24
    1fe6:	80 7f       	andi	r24, 0xF0	; 240
    1fe8:	98 27       	eor	r25, r24
    1fea:	82 2b       	or	r24, r18
    1fec:	8c 93       	st	X, r24
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	a0 e8       	ldi	r26, 0x80	; 128
    1ff4:	bf e3       	ldi	r27, 0x3F	; 63
    1ff6:	89 8f       	std	Y+25, r24	; 0x19
    1ff8:	9a 8f       	std	Y+26, r25	; 0x1a
    1ffa:	ab 8f       	std	Y+27, r26	; 0x1b
    1ffc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffe:	69 8d       	ldd	r22, Y+25	; 0x19
    2000:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2002:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2004:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	4a e7       	ldi	r20, 0x7A	; 122
    200c:	53 e4       	ldi	r21, 0x43	; 67
    200e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	8d 8b       	std	Y+21, r24	; 0x15
    2018:	9e 8b       	std	Y+22, r25	; 0x16
    201a:	af 8b       	std	Y+23, r26	; 0x17
    201c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    201e:	6d 89       	ldd	r22, Y+21	; 0x15
    2020:	7e 89       	ldd	r23, Y+22	; 0x16
    2022:	8f 89       	ldd	r24, Y+23	; 0x17
    2024:	98 8d       	ldd	r25, Y+24	; 0x18
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 e8       	ldi	r20, 0x80	; 128
    202c:	5f e3       	ldi	r21, 0x3F	; 63
    202e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2032:	88 23       	and	r24, r24
    2034:	2c f4       	brge	.+10     	; 0x2040 <lcd_displayChar+0x77c>
		__ticks = 1;
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	9c 8b       	std	Y+20, r25	; 0x14
    203c:	8b 8b       	std	Y+19, r24	; 0x13
    203e:	3f c0       	rjmp	.+126    	; 0x20be <lcd_displayChar+0x7fa>
	else if (__tmp > 65535)
    2040:	6d 89       	ldd	r22, Y+21	; 0x15
    2042:	7e 89       	ldd	r23, Y+22	; 0x16
    2044:	8f 89       	ldd	r24, Y+23	; 0x17
    2046:	98 8d       	ldd	r25, Y+24	; 0x18
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	3f ef       	ldi	r19, 0xFF	; 255
    204c:	4f e7       	ldi	r20, 0x7F	; 127
    204e:	57 e4       	ldi	r21, 0x47	; 71
    2050:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2054:	18 16       	cp	r1, r24
    2056:	4c f5       	brge	.+82     	; 0x20aa <lcd_displayChar+0x7e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2058:	69 8d       	ldd	r22, Y+25	; 0x19
    205a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    205c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    205e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e2       	ldi	r20, 0x20	; 32
    2066:	51 e4       	ldi	r21, 0x41	; 65
    2068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	bc 01       	movw	r22, r24
    2072:	cd 01       	movw	r24, r26
    2074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	9c 8b       	std	Y+20, r25	; 0x14
    207e:	8b 8b       	std	Y+19, r24	; 0x13
    2080:	0f c0       	rjmp	.+30     	; 0x20a0 <lcd_displayChar+0x7dc>
    2082:	89 e1       	ldi	r24, 0x19	; 25
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	9a 8b       	std	Y+18, r25	; 0x12
    2088:	89 8b       	std	Y+17, r24	; 0x11
    208a:	89 89       	ldd	r24, Y+17	; 0x11
    208c:	9a 89       	ldd	r25, Y+18	; 0x12
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <lcd_displayChar+0x7ca>
    2092:	9a 8b       	std	Y+18, r25	; 0x12
    2094:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2096:	8b 89       	ldd	r24, Y+19	; 0x13
    2098:	9c 89       	ldd	r25, Y+20	; 0x14
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	9c 8b       	std	Y+20, r25	; 0x14
    209e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a0:	8b 89       	ldd	r24, Y+19	; 0x13
    20a2:	9c 89       	ldd	r25, Y+20	; 0x14
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	69 f7       	brne	.-38     	; 0x2082 <lcd_displayChar+0x7be>
    20a8:	14 c0       	rjmp	.+40     	; 0x20d2 <lcd_displayChar+0x80e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20aa:	6d 89       	ldd	r22, Y+21	; 0x15
    20ac:	7e 89       	ldd	r23, Y+22	; 0x16
    20ae:	8f 89       	ldd	r24, Y+23	; 0x17
    20b0:	98 8d       	ldd	r25, Y+24	; 0x18
    20b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	9c 8b       	std	Y+20, r25	; 0x14
    20bc:	8b 8b       	std	Y+19, r24	; 0x13
    20be:	8b 89       	ldd	r24, Y+19	; 0x13
    20c0:	9c 89       	ldd	r25, Y+20	; 0x14
    20c2:	98 8b       	std	Y+16, r25	; 0x10
    20c4:	8f 87       	std	Y+15, r24	; 0x0f
    20c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    20c8:	98 89       	ldd	r25, Y+16	; 0x10
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <lcd_displayChar+0x806>
    20ce:	98 8b       	std	Y+16, r25	; 0x10
    20d0:	8f 87       	std	Y+15, r24	; 0x0f
	#elif
	LCD_DATA_PORT=(LCD_DATA_PORT&0xF0)|(data&0x0F);
	#endif
	_delay_ms(1);
	LCD_CTRL_PORT&=~(1<<E); //clear en
    20d2:	a2 e3       	ldi	r26, 0x32	; 50
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	e2 e3       	ldi	r30, 0x32	; 50
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	8f 7b       	andi	r24, 0xBF	; 191
    20de:	8c 93       	st	X, r24
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	a0 e8       	ldi	r26, 0x80	; 128
    20e6:	bf e3       	ldi	r27, 0x3F	; 63
    20e8:	8b 87       	std	Y+11, r24	; 0x0b
    20ea:	9c 87       	std	Y+12, r25	; 0x0c
    20ec:	ad 87       	std	Y+13, r26	; 0x0d
    20ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	4a e7       	ldi	r20, 0x7A	; 122
    20fe:	53 e4       	ldi	r21, 0x43	; 67
    2100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	8f 83       	std	Y+7, r24	; 0x07
    210a:	98 87       	std	Y+8, r25	; 0x08
    210c:	a9 87       	std	Y+9, r26	; 0x09
    210e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2110:	6f 81       	ldd	r22, Y+7	; 0x07
    2112:	78 85       	ldd	r23, Y+8	; 0x08
    2114:	89 85       	ldd	r24, Y+9	; 0x09
    2116:	9a 85       	ldd	r25, Y+10	; 0x0a
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	40 e8       	ldi	r20, 0x80	; 128
    211e:	5f e3       	ldi	r21, 0x3F	; 63
    2120:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2124:	88 23       	and	r24, r24
    2126:	2c f4       	brge	.+10     	; 0x2132 <lcd_displayChar+0x86e>
		__ticks = 1;
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	9e 83       	std	Y+6, r25	; 0x06
    212e:	8d 83       	std	Y+5, r24	; 0x05
    2130:	3f c0       	rjmp	.+126    	; 0x21b0 <lcd_displayChar+0x8ec>
	else if (__tmp > 65535)
    2132:	6f 81       	ldd	r22, Y+7	; 0x07
    2134:	78 85       	ldd	r23, Y+8	; 0x08
    2136:	89 85       	ldd	r24, Y+9	; 0x09
    2138:	9a 85       	ldd	r25, Y+10	; 0x0a
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	3f ef       	ldi	r19, 0xFF	; 255
    213e:	4f e7       	ldi	r20, 0x7F	; 127
    2140:	57 e4       	ldi	r21, 0x47	; 71
    2142:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2146:	18 16       	cp	r1, r24
    2148:	4c f5       	brge	.+82     	; 0x219c <lcd_displayChar+0x8d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    214a:	6b 85       	ldd	r22, Y+11	; 0x0b
    214c:	7c 85       	ldd	r23, Y+12	; 0x0c
    214e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2150:	9e 85       	ldd	r25, Y+14	; 0x0e
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e2       	ldi	r20, 0x20	; 32
    2158:	51 e4       	ldi	r21, 0x41	; 65
    215a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	bc 01       	movw	r22, r24
    2164:	cd 01       	movw	r24, r26
    2166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	9e 83       	std	Y+6, r25	; 0x06
    2170:	8d 83       	std	Y+5, r24	; 0x05
    2172:	0f c0       	rjmp	.+30     	; 0x2192 <lcd_displayChar+0x8ce>
    2174:	89 e1       	ldi	r24, 0x19	; 25
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	9c 83       	std	Y+4, r25	; 0x04
    217a:	8b 83       	std	Y+3, r24	; 0x03
    217c:	8b 81       	ldd	r24, Y+3	; 0x03
    217e:	9c 81       	ldd	r25, Y+4	; 0x04
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	f1 f7       	brne	.-4      	; 0x2180 <lcd_displayChar+0x8bc>
    2184:	9c 83       	std	Y+4, r25	; 0x04
    2186:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2188:	8d 81       	ldd	r24, Y+5	; 0x05
    218a:	9e 81       	ldd	r25, Y+6	; 0x06
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	9e 83       	std	Y+6, r25	; 0x06
    2190:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2192:	8d 81       	ldd	r24, Y+5	; 0x05
    2194:	9e 81       	ldd	r25, Y+6	; 0x06
    2196:	00 97       	sbiw	r24, 0x00	; 0
    2198:	69 f7       	brne	.-38     	; 0x2174 <lcd_displayChar+0x8b0>
    219a:	14 c0       	rjmp	.+40     	; 0x21c4 <lcd_displayChar+0x900>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    219c:	6f 81       	ldd	r22, Y+7	; 0x07
    219e:	78 85       	ldd	r23, Y+8	; 0x08
    21a0:	89 85       	ldd	r24, Y+9	; 0x09
    21a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	9e 83       	std	Y+6, r25	; 0x06
    21ae:	8d 83       	std	Y+5, r24	; 0x05
    21b0:	8d 81       	ldd	r24, Y+5	; 0x05
    21b2:	9e 81       	ldd	r25, Y+6	; 0x06
    21b4:	9a 83       	std	Y+2, r25	; 0x02
    21b6:	89 83       	std	Y+1, r24	; 0x01
    21b8:	89 81       	ldd	r24, Y+1	; 0x01
    21ba:	9a 81       	ldd	r25, Y+2	; 0x02
    21bc:	01 97       	sbiw	r24, 0x01	; 1
    21be:	f1 f7       	brne	.-4      	; 0x21bc <lcd_displayChar+0x8f8>
    21c0:	9a 83       	std	Y+2, r25	; 0x02
    21c2:	89 83       	std	Y+1, r24	; 0x01





}
    21c4:	c3 59       	subi	r28, 0x93	; 147
    21c6:	df 4f       	sbci	r29, 0xFF	; 255
    21c8:	0f b6       	in	r0, 0x3f	; 63
    21ca:	f8 94       	cli
    21cc:	de bf       	out	0x3e, r29	; 62
    21ce:	0f be       	out	0x3f, r0	; 63
    21d0:	cd bf       	out	0x3d, r28	; 61
    21d2:	cf 91       	pop	r28
    21d4:	df 91       	pop	r29
    21d6:	1f 91       	pop	r17
    21d8:	0f 91       	pop	r16
    21da:	08 95       	ret

000021dc <lcd_displayString>:


void lcd_displayString(unsigned char *str){
    21dc:	df 93       	push	r29
    21de:	cf 93       	push	r28
    21e0:	00 d0       	rcall	.+0      	; 0x21e2 <lcd_displayString+0x6>
    21e2:	00 d0       	rcall	.+0      	; 0x21e4 <lcd_displayString+0x8>
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
    21e8:	9c 83       	std	Y+4, r25	; 0x04
    21ea:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0;str[i]!='\0';i++){
    21ec:	1a 82       	std	Y+2, r1	; 0x02
    21ee:	19 82       	std	Y+1, r1	; 0x01
    21f0:	0f c0       	rjmp	.+30     	; 0x2210 <lcd_displayString+0x34>
		lcd_displayChar(str[i]);}
    21f2:	29 81       	ldd	r18, Y+1	; 0x01
    21f4:	3a 81       	ldd	r19, Y+2	; 0x02
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	9c 81       	ldd	r25, Y+4	; 0x04
    21fa:	fc 01       	movw	r30, r24
    21fc:	e2 0f       	add	r30, r18
    21fe:	f3 1f       	adc	r31, r19
    2200:	80 81       	ld	r24, Z
    2202:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <lcd_displayChar>
}


void lcd_displayString(unsigned char *str){
	int i;
	for(i=0;str[i]!='\0';i++){
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	9a 81       	ldd	r25, Y+2	; 0x02
    220a:	01 96       	adiw	r24, 0x01	; 1
    220c:	9a 83       	std	Y+2, r25	; 0x02
    220e:	89 83       	std	Y+1, r24	; 0x01
    2210:	29 81       	ldd	r18, Y+1	; 0x01
    2212:	3a 81       	ldd	r19, Y+2	; 0x02
    2214:	8b 81       	ldd	r24, Y+3	; 0x03
    2216:	9c 81       	ldd	r25, Y+4	; 0x04
    2218:	fc 01       	movw	r30, r24
    221a:	e2 0f       	add	r30, r18
    221c:	f3 1f       	adc	r31, r19
    221e:	80 81       	ld	r24, Z
    2220:	88 23       	and	r24, r24
    2222:	39 f7       	brne	.-50     	; 0x21f2 <lcd_displayString+0x16>
		lcd_displayChar(str[i]);}
}
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	08 95       	ret

00002232 <lcd_goToRowColumn>:


void lcd_goToRowColumn(unsigned char row, unsigned char col){
    2232:	df 93       	push	r29
    2234:	cf 93       	push	r28
    2236:	00 d0       	rcall	.+0      	; 0x2238 <lcd_goToRowColumn+0x6>
    2238:	00 d0       	rcall	.+0      	; 0x223a <lcd_goToRowColumn+0x8>
    223a:	0f 92       	push	r0
    223c:	cd b7       	in	r28, 0x3d	; 61
    223e:	de b7       	in	r29, 0x3e	; 62
    2240:	8a 83       	std	Y+2, r24	; 0x02
    2242:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char command;
	switch(row){
    2244:	8a 81       	ldd	r24, Y+2	; 0x02
    2246:	28 2f       	mov	r18, r24
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	3d 83       	std	Y+5, r19	; 0x05
    224c:	2c 83       	std	Y+4, r18	; 0x04
    224e:	8c 81       	ldd	r24, Y+4	; 0x04
    2250:	9d 81       	ldd	r25, Y+5	; 0x05
    2252:	81 30       	cpi	r24, 0x01	; 1
    2254:	91 05       	cpc	r25, r1
    2256:	e1 f0       	breq	.+56     	; 0x2290 <lcd_goToRowColumn+0x5e>
    2258:	2c 81       	ldd	r18, Y+4	; 0x04
    225a:	3d 81       	ldd	r19, Y+5	; 0x05
    225c:	22 30       	cpi	r18, 0x02	; 2
    225e:	31 05       	cpc	r19, r1
    2260:	2c f4       	brge	.+10     	; 0x226c <lcd_goToRowColumn+0x3a>
    2262:	8c 81       	ldd	r24, Y+4	; 0x04
    2264:	9d 81       	ldd	r25, Y+5	; 0x05
    2266:	00 97       	sbiw	r24, 0x00	; 0
    2268:	61 f0       	breq	.+24     	; 0x2282 <lcd_goToRowColumn+0x50>
    226a:	2f c0       	rjmp	.+94     	; 0x22ca <lcd_goToRowColumn+0x98>
    226c:	2c 81       	ldd	r18, Y+4	; 0x04
    226e:	3d 81       	ldd	r19, Y+5	; 0x05
    2270:	22 30       	cpi	r18, 0x02	; 2
    2272:	31 05       	cpc	r19, r1
    2274:	b9 f0       	breq	.+46     	; 0x22a4 <lcd_goToRowColumn+0x72>
    2276:	8c 81       	ldd	r24, Y+4	; 0x04
    2278:	9d 81       	ldd	r25, Y+5	; 0x05
    227a:	83 30       	cpi	r24, 0x03	; 3
    227c:	91 05       	cpc	r25, r1
    227e:	e1 f0       	breq	.+56     	; 0x22b8 <lcd_goToRowColumn+0x86>
    2280:	24 c0       	rjmp	.+72     	; 0x22ca <lcd_goToRowColumn+0x98>
	case 0: command= col|0x80;
    2282:	8b 81       	ldd	r24, Y+3	; 0x03
    2284:	80 68       	ori	r24, 0x80	; 128
    2286:	89 83       	std	Y+1, r24	; 0x01
		lcd_sendCommand(command);
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	0e 94 c5 07 	call	0xf8a	; 0xf8a <lcd_sendCommand>
    228e:	1d c0       	rjmp	.+58     	; 0x22ca <lcd_goToRowColumn+0x98>
		break;
	case 1:
		command=0x40+col;
    2290:	8b 81       	ldd	r24, Y+3	; 0x03
    2292:	80 5c       	subi	r24, 0xC0	; 192
    2294:	89 83       	std	Y+1, r24	; 0x01
		command|=0x80;
    2296:	89 81       	ldd	r24, Y+1	; 0x01
    2298:	80 68       	ori	r24, 0x80	; 128
    229a:	89 83       	std	Y+1, r24	; 0x01
	    lcd_sendCommand(command);
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	0e 94 c5 07 	call	0xf8a	; 0xf8a <lcd_sendCommand>
    22a2:	13 c0       	rjmp	.+38     	; 0x22ca <lcd_goToRowColumn+0x98>
	    break;
	case 2:
		command=0x10+col;
    22a4:	8b 81       	ldd	r24, Y+3	; 0x03
    22a6:	80 5f       	subi	r24, 0xF0	; 240
    22a8:	89 83       	std	Y+1, r24	; 0x01
		command|=0x80;
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
    22ac:	80 68       	ori	r24, 0x80	; 128
    22ae:	89 83       	std	Y+1, r24	; 0x01
	    lcd_sendCommand(command);
    22b0:	89 81       	ldd	r24, Y+1	; 0x01
    22b2:	0e 94 c5 07 	call	0xf8a	; 0xf8a <lcd_sendCommand>
    22b6:	09 c0       	rjmp	.+18     	; 0x22ca <lcd_goToRowColumn+0x98>
		break;
	case 3:
		command=0x50+col;
    22b8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ba:	80 5b       	subi	r24, 0xB0	; 176
    22bc:	89 83       	std	Y+1, r24	; 0x01
		command|=0x80;
    22be:	89 81       	ldd	r24, Y+1	; 0x01
    22c0:	80 68       	ori	r24, 0x80	; 128
    22c2:	89 83       	std	Y+1, r24	; 0x01
		lcd_sendCommand(command);
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	0e 94 c5 07 	call	0xf8a	; 0xf8a <lcd_sendCommand>
		break;
	}


	}
    22ca:	0f 90       	pop	r0
    22cc:	0f 90       	pop	r0
    22ce:	0f 90       	pop	r0
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	08 95       	ret

000022da <lcd_displayStringRowColumn>:


void lcd_displayStringRowColumn(unsigned char row, unsigned char col,unsigned char *str){
    22da:	df 93       	push	r29
    22dc:	cf 93       	push	r28
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <lcd_displayStringRowColumn+0x6>
    22e0:	00 d0       	rcall	.+0      	; 0x22e2 <lcd_displayStringRowColumn+0x8>
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
    22e6:	89 83       	std	Y+1, r24	; 0x01
    22e8:	6a 83       	std	Y+2, r22	; 0x02
    22ea:	5c 83       	std	Y+4, r21	; 0x04
    22ec:	4b 83       	std	Y+3, r20	; 0x03

	lcd_goToRowColumn(row,col);
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	6a 81       	ldd	r22, Y+2	; 0x02
    22f2:	0e 94 19 11 	call	0x2232	; 0x2232 <lcd_goToRowColumn>
	lcd_displayString(str);
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	9c 81       	ldd	r25, Y+4	; 0x04
    22fa:	0e 94 ee 10 	call	0x21dc	; 0x21dc <lcd_displayString>

}
    22fe:	0f 90       	pop	r0
    2300:	0f 90       	pop	r0
    2302:	0f 90       	pop	r0
    2304:	0f 90       	pop	r0
    2306:	cf 91       	pop	r28
    2308:	df 91       	pop	r29
    230a:	08 95       	ret

0000230c <lcd_intgerToString>:

void lcd_intgerToString(int data)
{
    230c:	df 93       	push	r29
    230e:	cf 93       	push	r28
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62
    2314:	62 97       	sbiw	r28, 0x12	; 18
    2316:	0f b6       	in	r0, 0x3f	; 63
    2318:	f8 94       	cli
    231a:	de bf       	out	0x3e, r29	; 62
    231c:	0f be       	out	0x3f, r0	; 63
    231e:	cd bf       	out	0x3d, r28	; 61
    2320:	9a 8b       	std	Y+18, r25	; 0x12
    2322:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2324:	89 89       	ldd	r24, Y+17	; 0x11
    2326:	9a 89       	ldd	r25, Y+18	; 0x12
    2328:	9e 01       	movw	r18, r28
    232a:	2f 5f       	subi	r18, 0xFF	; 255
    232c:	3f 4f       	sbci	r19, 0xFF	; 255
    232e:	b9 01       	movw	r22, r18
    2330:	4a e0       	ldi	r20, 0x0A	; 10
    2332:	50 e0       	ldi	r21, 0x00	; 0
    2334:	0e 94 7e 14 	call	0x28fc	; 0x28fc <itoa>
   lcd_displayString(buff);
    2338:	ce 01       	movw	r24, r28
    233a:	01 96       	adiw	r24, 0x01	; 1
    233c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <lcd_displayString>
}
    2340:	62 96       	adiw	r28, 0x12	; 18
    2342:	0f b6       	in	r0, 0x3f	; 63
    2344:	f8 94       	cli
    2346:	de bf       	out	0x3e, r29	; 62
    2348:	0f be       	out	0x3f, r0	; 63
    234a:	cd bf       	out	0x3d, r28	; 61
    234c:	cf 91       	pop	r28
    234e:	df 91       	pop	r29
    2350:	08 95       	ret

00002352 <main>:
unsigned char getPass(void);




int main(){
    2352:	df 93       	push	r29
    2354:	cf 93       	push	r28
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
    235a:	a0 97       	sbiw	r28, 0x20	; 32
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	f8 94       	cli
    2360:	de bf       	out	0x3e, r29	; 62
    2362:	0f be       	out	0x3f, r0	; 63
    2364:	cd bf       	out	0x3d, r28	; 61

	lcd_init();
    2366:	0e 94 99 07 	call	0xf32	; 0xf32 <lcd_init>
	UART_init();
    236a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <UART_init>
	display_main_menu();
    236e:	0e 94 76 13 	call	0x26ec	; 0x26ec <display_main_menu>

	while(1){
		unsigned char data;
		unsigned char key;
		key= get_key();
    2372:	0e 94 40 07 	call	0xe80	; 0xe80 <get_key>
    2376:	8d 8f       	std	Y+29, r24	; 0x1d
		UART_SendByte(key);
    2378:	8d 8d       	ldd	r24, Y+29	; 0x1d
    237a:	0e 94 8a 06 	call	0xd14	; 0xd14 <UART_SendByte>
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	a6 e9       	ldi	r26, 0x96	; 150
    2384:	b3 e4       	ldi	r27, 0x43	; 67
    2386:	89 8f       	std	Y+25, r24	; 0x19
    2388:	9a 8f       	std	Y+26, r25	; 0x1a
    238a:	ab 8f       	std	Y+27, r26	; 0x1b
    238c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    238e:	69 8d       	ldd	r22, Y+25	; 0x19
    2390:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2392:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2394:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	4a e7       	ldi	r20, 0x7A	; 122
    239c:	53 e4       	ldi	r21, 0x43	; 67
    239e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	8d 8b       	std	Y+21, r24	; 0x15
    23a8:	9e 8b       	std	Y+22, r25	; 0x16
    23aa:	af 8b       	std	Y+23, r26	; 0x17
    23ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23ae:	6d 89       	ldd	r22, Y+21	; 0x15
    23b0:	7e 89       	ldd	r23, Y+22	; 0x16
    23b2:	8f 89       	ldd	r24, Y+23	; 0x17
    23b4:	98 8d       	ldd	r25, Y+24	; 0x18
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	40 e8       	ldi	r20, 0x80	; 128
    23bc:	5f e3       	ldi	r21, 0x3F	; 63
    23be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23c2:	88 23       	and	r24, r24
    23c4:	2c f4       	brge	.+10     	; 0x23d0 <main+0x7e>
		__ticks = 1;
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	9c 8b       	std	Y+20, r25	; 0x14
    23cc:	8b 8b       	std	Y+19, r24	; 0x13
    23ce:	3f c0       	rjmp	.+126    	; 0x244e <main+0xfc>
	else if (__tmp > 65535)
    23d0:	6d 89       	ldd	r22, Y+21	; 0x15
    23d2:	7e 89       	ldd	r23, Y+22	; 0x16
    23d4:	8f 89       	ldd	r24, Y+23	; 0x17
    23d6:	98 8d       	ldd	r25, Y+24	; 0x18
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	3f ef       	ldi	r19, 0xFF	; 255
    23dc:	4f e7       	ldi	r20, 0x7F	; 127
    23de:	57 e4       	ldi	r21, 0x47	; 71
    23e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23e4:	18 16       	cp	r1, r24
    23e6:	4c f5       	brge	.+82     	; 0x243a <main+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e8:	69 8d       	ldd	r22, Y+25	; 0x19
    23ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	40 e2       	ldi	r20, 0x20	; 32
    23f6:	51 e4       	ldi	r21, 0x41	; 65
    23f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	bc 01       	movw	r22, r24
    2402:	cd 01       	movw	r24, r26
    2404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	9c 8b       	std	Y+20, r25	; 0x14
    240e:	8b 8b       	std	Y+19, r24	; 0x13
    2410:	0f c0       	rjmp	.+30     	; 0x2430 <main+0xde>
    2412:	89 e1       	ldi	r24, 0x19	; 25
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	9a 8b       	std	Y+18, r25	; 0x12
    2418:	89 8b       	std	Y+17, r24	; 0x11
    241a:	89 89       	ldd	r24, Y+17	; 0x11
    241c:	9a 89       	ldd	r25, Y+18	; 0x12
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	f1 f7       	brne	.-4      	; 0x241e <main+0xcc>
    2422:	9a 8b       	std	Y+18, r25	; 0x12
    2424:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2426:	8b 89       	ldd	r24, Y+19	; 0x13
    2428:	9c 89       	ldd	r25, Y+20	; 0x14
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	9c 8b       	std	Y+20, r25	; 0x14
    242e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2430:	8b 89       	ldd	r24, Y+19	; 0x13
    2432:	9c 89       	ldd	r25, Y+20	; 0x14
    2434:	00 97       	sbiw	r24, 0x00	; 0
    2436:	69 f7       	brne	.-38     	; 0x2412 <main+0xc0>
    2438:	14 c0       	rjmp	.+40     	; 0x2462 <main+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243a:	6d 89       	ldd	r22, Y+21	; 0x15
    243c:	7e 89       	ldd	r23, Y+22	; 0x16
    243e:	8f 89       	ldd	r24, Y+23	; 0x17
    2440:	98 8d       	ldd	r25, Y+24	; 0x18
    2442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	9c 8b       	std	Y+20, r25	; 0x14
    244c:	8b 8b       	std	Y+19, r24	; 0x13
    244e:	8b 89       	ldd	r24, Y+19	; 0x13
    2450:	9c 89       	ldd	r25, Y+20	; 0x14
    2452:	98 8b       	std	Y+16, r25	; 0x10
    2454:	8f 87       	std	Y+15, r24	; 0x0f
    2456:	8f 85       	ldd	r24, Y+15	; 0x0f
    2458:	98 89       	ldd	r25, Y+16	; 0x10
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	f1 f7       	brne	.-4      	; 0x245a <main+0x108>
    245e:	98 8b       	std	Y+16, r25	; 0x10
    2460:	8f 87       	std	Y+15, r24	; 0x0f
		//data= UART_ReceiveByte();
		_delay_ms(300);

		switch (key)
    2462:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2464:	28 2f       	mov	r18, r24
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	38 a3       	std	Y+32, r19	; 0x20
    246a:	2f 8f       	std	Y+31, r18	; 0x1f
    246c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    246e:	98 a1       	ldd	r25, Y+32	; 0x20
    2470:	83 32       	cpi	r24, 0x23	; 35
    2472:	91 05       	cpc	r25, r1
    2474:	09 f4       	brne	.+2      	; 0x2478 <main+0x126>
    2476:	7d cf       	rjmp	.-262    	; 0x2372 <main+0x20>
    2478:	2f 8d       	ldd	r18, Y+31	; 0x1f
    247a:	38 a1       	ldd	r19, Y+32	; 0x20
    247c:	2a 32       	cpi	r18, 0x2A	; 42
    247e:	31 05       	cpc	r19, r1
    2480:	19 f4       	brne	.+6      	; 0x2488 <main+0x136>
		{case'*':
			openingDoor();
    2482:	0e 94 c3 12 	call	0x2586	; 0x2586 <openingDoor>
    2486:	75 cf       	rjmp	.-278    	; 0x2372 <main+0x20>
			break;
		case'#':

			break;
		default:
			lcd_sendCommand(CLEAR_SCREEN);
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	0e 94 c5 07 	call	0xf8a	; 0xf8a <lcd_sendCommand>
			lcd_displayStringRowColumn(0,0,"Plz,try again");
    248e:	20 e6       	ldi	r18, 0x60	; 96
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	60 e0       	ldi	r22, 0x00	; 0
    2496:	a9 01       	movw	r20, r18
    2498:	0e 94 6d 11 	call	0x22da	; 0x22da <lcd_displayStringRowColumn>
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	90 e8       	ldi	r25, 0x80	; 128
    24a0:	ab eb       	ldi	r26, 0xBB	; 187
    24a2:	b4 e4       	ldi	r27, 0x44	; 68
    24a4:	8b 87       	std	Y+11, r24	; 0x0b
    24a6:	9c 87       	std	Y+12, r25	; 0x0c
    24a8:	ad 87       	std	Y+13, r26	; 0x0d
    24aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    24b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	4a e7       	ldi	r20, 0x7A	; 122
    24ba:	53 e4       	ldi	r21, 0x43	; 67
    24bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	8f 83       	std	Y+7, r24	; 0x07
    24c6:	98 87       	std	Y+8, r25	; 0x08
    24c8:	a9 87       	std	Y+9, r26	; 0x09
    24ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24cc:	6f 81       	ldd	r22, Y+7	; 0x07
    24ce:	78 85       	ldd	r23, Y+8	; 0x08
    24d0:	89 85       	ldd	r24, Y+9	; 0x09
    24d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	40 e8       	ldi	r20, 0x80	; 128
    24da:	5f e3       	ldi	r21, 0x3F	; 63
    24dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24e0:	88 23       	and	r24, r24
    24e2:	2c f4       	brge	.+10     	; 0x24ee <main+0x19c>
		__ticks = 1;
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	9e 83       	std	Y+6, r25	; 0x06
    24ea:	8d 83       	std	Y+5, r24	; 0x05
    24ec:	3f c0       	rjmp	.+126    	; 0x256c <main+0x21a>
	else if (__tmp > 65535)
    24ee:	6f 81       	ldd	r22, Y+7	; 0x07
    24f0:	78 85       	ldd	r23, Y+8	; 0x08
    24f2:	89 85       	ldd	r24, Y+9	; 0x09
    24f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	3f ef       	ldi	r19, 0xFF	; 255
    24fa:	4f e7       	ldi	r20, 0x7F	; 127
    24fc:	57 e4       	ldi	r21, 0x47	; 71
    24fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2502:	18 16       	cp	r1, r24
    2504:	4c f5       	brge	.+82     	; 0x2558 <main+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2506:	6b 85       	ldd	r22, Y+11	; 0x0b
    2508:	7c 85       	ldd	r23, Y+12	; 0x0c
    250a:	8d 85       	ldd	r24, Y+13	; 0x0d
    250c:	9e 85       	ldd	r25, Y+14	; 0x0e
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	40 e2       	ldi	r20, 0x20	; 32
    2514:	51 e4       	ldi	r21, 0x41	; 65
    2516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	bc 01       	movw	r22, r24
    2520:	cd 01       	movw	r24, r26
    2522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	9e 83       	std	Y+6, r25	; 0x06
    252c:	8d 83       	std	Y+5, r24	; 0x05
    252e:	0f c0       	rjmp	.+30     	; 0x254e <main+0x1fc>
    2530:	89 e1       	ldi	r24, 0x19	; 25
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	9c 83       	std	Y+4, r25	; 0x04
    2536:	8b 83       	std	Y+3, r24	; 0x03
    2538:	8b 81       	ldd	r24, Y+3	; 0x03
    253a:	9c 81       	ldd	r25, Y+4	; 0x04
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	f1 f7       	brne	.-4      	; 0x253c <main+0x1ea>
    2540:	9c 83       	std	Y+4, r25	; 0x04
    2542:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2544:	8d 81       	ldd	r24, Y+5	; 0x05
    2546:	9e 81       	ldd	r25, Y+6	; 0x06
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	9e 83       	std	Y+6, r25	; 0x06
    254c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    254e:	8d 81       	ldd	r24, Y+5	; 0x05
    2550:	9e 81       	ldd	r25, Y+6	; 0x06
    2552:	00 97       	sbiw	r24, 0x00	; 0
    2554:	69 f7       	brne	.-38     	; 0x2530 <main+0x1de>
    2556:	14 c0       	rjmp	.+40     	; 0x2580 <main+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2558:	6f 81       	ldd	r22, Y+7	; 0x07
    255a:	78 85       	ldd	r23, Y+8	; 0x08
    255c:	89 85       	ldd	r24, Y+9	; 0x09
    255e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	9e 83       	std	Y+6, r25	; 0x06
    256a:	8d 83       	std	Y+5, r24	; 0x05
    256c:	8d 81       	ldd	r24, Y+5	; 0x05
    256e:	9e 81       	ldd	r25, Y+6	; 0x06
    2570:	9a 83       	std	Y+2, r25	; 0x02
    2572:	89 83       	std	Y+1, r24	; 0x01
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	9a 81       	ldd	r25, Y+2	; 0x02
    2578:	01 97       	sbiw	r24, 0x01	; 1
    257a:	f1 f7       	brne	.-4      	; 0x2578 <main+0x226>
    257c:	9a 83       	std	Y+2, r25	; 0x02
    257e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1500);
			display_main_menu();
    2580:	0e 94 76 13 	call	0x26ec	; 0x26ec <display_main_menu>
    2584:	f6 ce       	rjmp	.-532    	; 0x2372 <main+0x20>

00002586 <openingDoor>:

	}
}


void openingDoor(void){
    2586:	df 93       	push	r29
    2588:	cf 93       	push	r28
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
    258e:	2f 97       	sbiw	r28, 0x0f	; 15
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	f8 94       	cli
    2594:	de bf       	out	0x3e, r29	; 62
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	cd bf       	out	0x3d, r28	; 61
	static unsigned char count;
	unsigned char check;

	lcd_sendCommand(CLEAR_SCREEN);
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <lcd_sendCommand>
	lcd_displayStringRowColumn(0,0,"Enter Pass");
    25a0:	2e e6       	ldi	r18, 0x6E	; 110
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	60 e0       	ldi	r22, 0x00	; 0
    25a8:	a9 01       	movw	r20, r18
    25aa:	0e 94 6d 11 	call	0x22da	; 0x22da <lcd_displayStringRowColumn>

   check= getPass();
    25ae:	0e 94 95 13 	call	0x272a	; 0x272a <getPass>
    25b2:	8f 87       	std	Y+15, r24	; 0x0f

	if(check == CORRECT){
    25b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    25b6:	81 32       	cpi	r24, 0x21	; 33
    25b8:	09 f0       	breq	.+2      	; 0x25bc <openingDoor+0x36>
    25ba:	7c c0       	rjmp	.+248    	; 0x26b4 <openingDoor+0x12e>
		lcd_displayStringRowColumn(0,0,"Door Openning");
    25bc:	29 e7       	ldi	r18, 0x79	; 121
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	60 e0       	ldi	r22, 0x00	; 0
    25c4:	a9 01       	movw	r20, r18
    25c6:	0e 94 6d 11 	call	0x22da	; 0x22da <lcd_displayStringRowColumn>
    25ca:	80 e0       	ldi	r24, 0x00	; 0
    25cc:	90 e6       	ldi	r25, 0x60	; 96
    25ce:	aa ee       	ldi	r26, 0xEA	; 234
    25d0:	b6 e4       	ldi	r27, 0x46	; 70
    25d2:	8b 87       	std	Y+11, r24	; 0x0b
    25d4:	9c 87       	std	Y+12, r25	; 0x0c
    25d6:	ad 87       	std	Y+13, r26	; 0x0d
    25d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25da:	6b 85       	ldd	r22, Y+11	; 0x0b
    25dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    25de:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	4a e7       	ldi	r20, 0x7A	; 122
    25e8:	53 e4       	ldi	r21, 0x43	; 67
    25ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	8f 83       	std	Y+7, r24	; 0x07
    25f4:	98 87       	std	Y+8, r25	; 0x08
    25f6:	a9 87       	std	Y+9, r26	; 0x09
    25f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25fa:	6f 81       	ldd	r22, Y+7	; 0x07
    25fc:	78 85       	ldd	r23, Y+8	; 0x08
    25fe:	89 85       	ldd	r24, Y+9	; 0x09
    2600:	9a 85       	ldd	r25, Y+10	; 0x0a
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	40 e8       	ldi	r20, 0x80	; 128
    2608:	5f e3       	ldi	r21, 0x3F	; 63
    260a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    260e:	88 23       	and	r24, r24
    2610:	2c f4       	brge	.+10     	; 0x261c <openingDoor+0x96>
		__ticks = 1;
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	9e 83       	std	Y+6, r25	; 0x06
    2618:	8d 83       	std	Y+5, r24	; 0x05
    261a:	3f c0       	rjmp	.+126    	; 0x269a <openingDoor+0x114>
	else if (__tmp > 65535)
    261c:	6f 81       	ldd	r22, Y+7	; 0x07
    261e:	78 85       	ldd	r23, Y+8	; 0x08
    2620:	89 85       	ldd	r24, Y+9	; 0x09
    2622:	9a 85       	ldd	r25, Y+10	; 0x0a
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	3f ef       	ldi	r19, 0xFF	; 255
    2628:	4f e7       	ldi	r20, 0x7F	; 127
    262a:	57 e4       	ldi	r21, 0x47	; 71
    262c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2630:	18 16       	cp	r1, r24
    2632:	4c f5       	brge	.+82     	; 0x2686 <openingDoor+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2634:	6b 85       	ldd	r22, Y+11	; 0x0b
    2636:	7c 85       	ldd	r23, Y+12	; 0x0c
    2638:	8d 85       	ldd	r24, Y+13	; 0x0d
    263a:	9e 85       	ldd	r25, Y+14	; 0x0e
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	40 e2       	ldi	r20, 0x20	; 32
    2642:	51 e4       	ldi	r21, 0x41	; 65
    2644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	bc 01       	movw	r22, r24
    264e:	cd 01       	movw	r24, r26
    2650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	9e 83       	std	Y+6, r25	; 0x06
    265a:	8d 83       	std	Y+5, r24	; 0x05
    265c:	0f c0       	rjmp	.+30     	; 0x267c <openingDoor+0xf6>
    265e:	89 e1       	ldi	r24, 0x19	; 25
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	9c 83       	std	Y+4, r25	; 0x04
    2664:	8b 83       	std	Y+3, r24	; 0x03
    2666:	8b 81       	ldd	r24, Y+3	; 0x03
    2668:	9c 81       	ldd	r25, Y+4	; 0x04
    266a:	01 97       	sbiw	r24, 0x01	; 1
    266c:	f1 f7       	brne	.-4      	; 0x266a <openingDoor+0xe4>
    266e:	9c 83       	std	Y+4, r25	; 0x04
    2670:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2672:	8d 81       	ldd	r24, Y+5	; 0x05
    2674:	9e 81       	ldd	r25, Y+6	; 0x06
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	9e 83       	std	Y+6, r25	; 0x06
    267a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    267c:	8d 81       	ldd	r24, Y+5	; 0x05
    267e:	9e 81       	ldd	r25, Y+6	; 0x06
    2680:	00 97       	sbiw	r24, 0x00	; 0
    2682:	69 f7       	brne	.-38     	; 0x265e <openingDoor+0xd8>
    2684:	14 c0       	rjmp	.+40     	; 0x26ae <openingDoor+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2686:	6f 81       	ldd	r22, Y+7	; 0x07
    2688:	78 85       	ldd	r23, Y+8	; 0x08
    268a:	89 85       	ldd	r24, Y+9	; 0x09
    268c:	9a 85       	ldd	r25, Y+10	; 0x0a
    268e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	9e 83       	std	Y+6, r25	; 0x06
    2698:	8d 83       	std	Y+5, r24	; 0x05
    269a:	8d 81       	ldd	r24, Y+5	; 0x05
    269c:	9e 81       	ldd	r25, Y+6	; 0x06
    269e:	9a 83       	std	Y+2, r25	; 0x02
    26a0:	89 83       	std	Y+1, r24	; 0x01
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
    26a4:	9a 81       	ldd	r25, Y+2	; 0x02
    26a6:	01 97       	sbiw	r24, 0x01	; 1
    26a8:	f1 f7       	brne	.-4      	; 0x26a6 <openingDoor+0x120>
    26aa:	9a 83       	std	Y+2, r25	; 0x02
    26ac:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(30000);
		display_main_menu();}
    26ae:	0e 94 76 13 	call	0x26ec	; 0x26ec <display_main_menu>
    26b2:	0c c0       	rjmp	.+24     	; 0x26cc <openingDoor+0x146>
	else{
		lcd_sendCommand(CLEAR_SCREEN);
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	0e 94 c5 07 	call	0xf8a	; 0xf8a <lcd_sendCommand>
		lcd_displayStringRowColumn(0,0,"Wrong Pass");
    26ba:	27 e8       	ldi	r18, 0x87	; 135
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	60 e0       	ldi	r22, 0x00	; 0
    26c2:	a9 01       	movw	r20, r18
    26c4:	0e 94 6d 11 	call	0x22da	; 0x22da <lcd_displayStringRowColumn>
		display_main_menu();
    26c8:	0e 94 76 13 	call	0x26ec	; 0x26ec <display_main_menu>
			lcd_displayStringRowColumn(0,0,"Wrong Pass");
			lcd_displayStringRowColumn(1,0,"Try Again");
			getPass();
			}*/
	}
}
    26cc:	2f 96       	adiw	r28, 0x0f	; 15
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	f8 94       	cli
    26d2:	de bf       	out	0x3e, r29	; 62
    26d4:	0f be       	out	0x3f, r0	; 63
    26d6:	cd bf       	out	0x3d, r28	; 61
    26d8:	cf 91       	pop	r28
    26da:	df 91       	pop	r29
    26dc:	08 95       	ret

000026de <changingPass>:

void  changingPass(void){
    26de:	df 93       	push	r29
    26e0:	cf 93       	push	r28
    26e2:	cd b7       	in	r28, 0x3d	; 61
    26e4:	de b7       	in	r29, 0x3e	; 62
	if(get_key==1){
		UART_sendString(password);}
	else{
		display_main_menu();
	}*/
}
    26e6:	cf 91       	pop	r28
    26e8:	df 91       	pop	r29
    26ea:	08 95       	ret

000026ec <display_main_menu>:

void display_main_menu(void){
    26ec:	df 93       	push	r29
    26ee:	cf 93       	push	r28
    26f0:	cd b7       	in	r28, 0x3d	; 61
    26f2:	de b7       	in	r29, 0x3e	; 62
	lcd_sendCommand(CLEAR_SCREEN);
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	0e 94 c5 07 	call	0xf8a	; 0xf8a <lcd_sendCommand>
	lcd_displayStringRowColumn(0, 0,"Main Menu: ");
    26fa:	22 e9       	ldi	r18, 0x92	; 146
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	60 e0       	ldi	r22, 0x00	; 0
    2702:	a9 01       	movw	r20, r18
    2704:	0e 94 6d 11 	call	0x22da	; 0x22da <lcd_displayStringRowColumn>
	lcd_displayStringRowColumn(1,0,"*: Open door");
    2708:	2e e9       	ldi	r18, 0x9E	; 158
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	60 e0       	ldi	r22, 0x00	; 0
    2710:	a9 01       	movw	r20, r18
    2712:	0e 94 6d 11 	call	0x22da	; 0x22da <lcd_displayStringRowColumn>
	lcd_displayStringRowColumn(2, 0,"#: Change Pass");
    2716:	2b ea       	ldi	r18, 0xAB	; 171
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	82 e0       	ldi	r24, 0x02	; 2
    271c:	60 e0       	ldi	r22, 0x00	; 0
    271e:	a9 01       	movw	r20, r18
    2720:	0e 94 6d 11 	call	0x22da	; 0x22da <lcd_displayStringRowColumn>

}
    2724:	cf 91       	pop	r28
    2726:	df 91       	pop	r29
    2728:	08 95       	ret

0000272a <getPass>:

unsigned char getPass(void){
    272a:	0f 93       	push	r16
    272c:	1f 93       	push	r17
    272e:	df 93       	push	r29
    2730:	cf 93       	push	r28
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62
    2736:	64 97       	sbiw	r28, 0x14	; 20
    2738:	0f b6       	in	r0, 0x3f	; 63
    273a:	f8 94       	cli
    273c:	de bf       	out	0x3e, r29	; 62
    273e:	0f be       	out	0x3f, r0	; 63
    2740:	cd bf       	out	0x3d, r28	; 61
	unsigned char i;
	unsigned char password[5];
	lcd_goToRowColumn(2,0);
    2742:	82 e0       	ldi	r24, 0x02	; 2
    2744:	60 e0       	ldi	r22, 0x00	; 0
    2746:	0e 94 19 11 	call	0x2232	; 0x2232 <lcd_goToRowColumn>
	for(i=0;i<=4;i++){
    274a:	1f 86       	std	Y+15, r1	; 0x0f
    274c:	84 c0       	rjmp	.+264    	; 0x2856 <getPass+0x12c>
		password[i] = get_key();
    274e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2750:	08 2f       	mov	r16, r24
    2752:	10 e0       	ldi	r17, 0x00	; 0
    2754:	0e 94 40 07 	call	0xe80	; 0xe80 <get_key>
    2758:	28 2f       	mov	r18, r24
    275a:	ce 01       	movw	r24, r28
    275c:	40 96       	adiw	r24, 0x10	; 16
    275e:	fc 01       	movw	r30, r24
    2760:	e0 0f       	add	r30, r16
    2762:	f1 1f       	adc	r31, r17
    2764:	20 83       	st	Z, r18
		lcd_displayChar('*');
    2766:	8a e2       	ldi	r24, 0x2A	; 42
    2768:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <lcd_displayChar>
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	aa ef       	ldi	r26, 0xFA	; 250
    2772:	b3 e4       	ldi	r27, 0x43	; 67
    2774:	8b 87       	std	Y+11, r24	; 0x0b
    2776:	9c 87       	std	Y+12, r25	; 0x0c
    2778:	ad 87       	std	Y+13, r26	; 0x0d
    277a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    277c:	6b 85       	ldd	r22, Y+11	; 0x0b
    277e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2780:	8d 85       	ldd	r24, Y+13	; 0x0d
    2782:	9e 85       	ldd	r25, Y+14	; 0x0e
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	4a e7       	ldi	r20, 0x7A	; 122
    278a:	53 e4       	ldi	r21, 0x43	; 67
    278c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	8f 83       	std	Y+7, r24	; 0x07
    2796:	98 87       	std	Y+8, r25	; 0x08
    2798:	a9 87       	std	Y+9, r26	; 0x09
    279a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    279c:	6f 81       	ldd	r22, Y+7	; 0x07
    279e:	78 85       	ldd	r23, Y+8	; 0x08
    27a0:	89 85       	ldd	r24, Y+9	; 0x09
    27a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	40 e8       	ldi	r20, 0x80	; 128
    27aa:	5f e3       	ldi	r21, 0x3F	; 63
    27ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27b0:	88 23       	and	r24, r24
    27b2:	2c f4       	brge	.+10     	; 0x27be <getPass+0x94>
		__ticks = 1;
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	9e 83       	std	Y+6, r25	; 0x06
    27ba:	8d 83       	std	Y+5, r24	; 0x05
    27bc:	3f c0       	rjmp	.+126    	; 0x283c <getPass+0x112>
	else if (__tmp > 65535)
    27be:	6f 81       	ldd	r22, Y+7	; 0x07
    27c0:	78 85       	ldd	r23, Y+8	; 0x08
    27c2:	89 85       	ldd	r24, Y+9	; 0x09
    27c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	3f ef       	ldi	r19, 0xFF	; 255
    27ca:	4f e7       	ldi	r20, 0x7F	; 127
    27cc:	57 e4       	ldi	r21, 0x47	; 71
    27ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27d2:	18 16       	cp	r1, r24
    27d4:	4c f5       	brge	.+82     	; 0x2828 <getPass+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    27da:	8d 85       	ldd	r24, Y+13	; 0x0d
    27dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	40 e2       	ldi	r20, 0x20	; 32
    27e4:	51 e4       	ldi	r21, 0x41	; 65
    27e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	bc 01       	movw	r22, r24
    27f0:	cd 01       	movw	r24, r26
    27f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	9e 83       	std	Y+6, r25	; 0x06
    27fc:	8d 83       	std	Y+5, r24	; 0x05
    27fe:	0f c0       	rjmp	.+30     	; 0x281e <getPass+0xf4>
    2800:	89 e1       	ldi	r24, 0x19	; 25
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	9c 83       	std	Y+4, r25	; 0x04
    2806:	8b 83       	std	Y+3, r24	; 0x03
    2808:	8b 81       	ldd	r24, Y+3	; 0x03
    280a:	9c 81       	ldd	r25, Y+4	; 0x04
    280c:	01 97       	sbiw	r24, 0x01	; 1
    280e:	f1 f7       	brne	.-4      	; 0x280c <getPass+0xe2>
    2810:	9c 83       	std	Y+4, r25	; 0x04
    2812:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2814:	8d 81       	ldd	r24, Y+5	; 0x05
    2816:	9e 81       	ldd	r25, Y+6	; 0x06
    2818:	01 97       	sbiw	r24, 0x01	; 1
    281a:	9e 83       	std	Y+6, r25	; 0x06
    281c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281e:	8d 81       	ldd	r24, Y+5	; 0x05
    2820:	9e 81       	ldd	r25, Y+6	; 0x06
    2822:	00 97       	sbiw	r24, 0x00	; 0
    2824:	69 f7       	brne	.-38     	; 0x2800 <getPass+0xd6>
    2826:	14 c0       	rjmp	.+40     	; 0x2850 <getPass+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2828:	6f 81       	ldd	r22, Y+7	; 0x07
    282a:	78 85       	ldd	r23, Y+8	; 0x08
    282c:	89 85       	ldd	r24, Y+9	; 0x09
    282e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	9e 83       	std	Y+6, r25	; 0x06
    283a:	8d 83       	std	Y+5, r24	; 0x05
    283c:	8d 81       	ldd	r24, Y+5	; 0x05
    283e:	9e 81       	ldd	r25, Y+6	; 0x06
    2840:	9a 83       	std	Y+2, r25	; 0x02
    2842:	89 83       	std	Y+1, r24	; 0x01
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	9a 81       	ldd	r25, Y+2	; 0x02
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	f1 f7       	brne	.-4      	; 0x2848 <getPass+0x11e>
    284c:	9a 83       	std	Y+2, r25	; 0x02
    284e:	89 83       	std	Y+1, r24	; 0x01

unsigned char getPass(void){
	unsigned char i;
	unsigned char password[5];
	lcd_goToRowColumn(2,0);
	for(i=0;i<=4;i++){
    2850:	8f 85       	ldd	r24, Y+15	; 0x0f
    2852:	8f 5f       	subi	r24, 0xFF	; 255
    2854:	8f 87       	std	Y+15, r24	; 0x0f
    2856:	8f 85       	ldd	r24, Y+15	; 0x0f
    2858:	85 30       	cpi	r24, 0x05	; 5
    285a:	08 f4       	brcc	.+2      	; 0x285e <getPass+0x134>
    285c:	78 cf       	rjmp	.-272    	; 0x274e <getPass+0x24>
		password[i] = get_key();
		lcd_displayChar('*');
		_delay_ms(500);
	}
	UART_sendString(password);
    285e:	ce 01       	movw	r24, r28
    2860:	40 96       	adiw	r24, 0x10	; 16
    2862:	0e 94 a1 06 	call	0xd42	; 0xd42 <UART_sendString>
	return UART_ReceiveByte();
    2866:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <UART_ReceiveByte>
}
    286a:	64 96       	adiw	r28, 0x14	; 20
    286c:	0f b6       	in	r0, 0x3f	; 63
    286e:	f8 94       	cli
    2870:	de bf       	out	0x3e, r29	; 62
    2872:	0f be       	out	0x3f, r0	; 63
    2874:	cd bf       	out	0x3d, r28	; 61
    2876:	cf 91       	pop	r28
    2878:	df 91       	pop	r29
    287a:	1f 91       	pop	r17
    287c:	0f 91       	pop	r16
    287e:	08 95       	ret

00002880 <blockSystem>:

void blockSystem(void){}
    2880:	df 93       	push	r29
    2882:	cf 93       	push	r28
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
    2888:	cf 91       	pop	r28
    288a:	df 91       	pop	r29
    288c:	08 95       	ret

0000288e <__prologue_saves__>:
    288e:	2f 92       	push	r2
    2890:	3f 92       	push	r3
    2892:	4f 92       	push	r4
    2894:	5f 92       	push	r5
    2896:	6f 92       	push	r6
    2898:	7f 92       	push	r7
    289a:	8f 92       	push	r8
    289c:	9f 92       	push	r9
    289e:	af 92       	push	r10
    28a0:	bf 92       	push	r11
    28a2:	cf 92       	push	r12
    28a4:	df 92       	push	r13
    28a6:	ef 92       	push	r14
    28a8:	ff 92       	push	r15
    28aa:	0f 93       	push	r16
    28ac:	1f 93       	push	r17
    28ae:	cf 93       	push	r28
    28b0:	df 93       	push	r29
    28b2:	cd b7       	in	r28, 0x3d	; 61
    28b4:	de b7       	in	r29, 0x3e	; 62
    28b6:	ca 1b       	sub	r28, r26
    28b8:	db 0b       	sbc	r29, r27
    28ba:	0f b6       	in	r0, 0x3f	; 63
    28bc:	f8 94       	cli
    28be:	de bf       	out	0x3e, r29	; 62
    28c0:	0f be       	out	0x3f, r0	; 63
    28c2:	cd bf       	out	0x3d, r28	; 61
    28c4:	09 94       	ijmp

000028c6 <__epilogue_restores__>:
    28c6:	2a 88       	ldd	r2, Y+18	; 0x12
    28c8:	39 88       	ldd	r3, Y+17	; 0x11
    28ca:	48 88       	ldd	r4, Y+16	; 0x10
    28cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    28ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    28d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    28d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    28d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    28d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    28d8:	b9 84       	ldd	r11, Y+9	; 0x09
    28da:	c8 84       	ldd	r12, Y+8	; 0x08
    28dc:	df 80       	ldd	r13, Y+7	; 0x07
    28de:	ee 80       	ldd	r14, Y+6	; 0x06
    28e0:	fd 80       	ldd	r15, Y+5	; 0x05
    28e2:	0c 81       	ldd	r16, Y+4	; 0x04
    28e4:	1b 81       	ldd	r17, Y+3	; 0x03
    28e6:	aa 81       	ldd	r26, Y+2	; 0x02
    28e8:	b9 81       	ldd	r27, Y+1	; 0x01
    28ea:	ce 0f       	add	r28, r30
    28ec:	d1 1d       	adc	r29, r1
    28ee:	0f b6       	in	r0, 0x3f	; 63
    28f0:	f8 94       	cli
    28f2:	de bf       	out	0x3e, r29	; 62
    28f4:	0f be       	out	0x3f, r0	; 63
    28f6:	cd bf       	out	0x3d, r28	; 61
    28f8:	ed 01       	movw	r28, r26
    28fa:	08 95       	ret

000028fc <itoa>:
    28fc:	fb 01       	movw	r30, r22
    28fe:	9f 01       	movw	r18, r30
    2900:	e8 94       	clt
    2902:	42 30       	cpi	r20, 0x02	; 2
    2904:	c4 f0       	brlt	.+48     	; 0x2936 <itoa+0x3a>
    2906:	45 32       	cpi	r20, 0x25	; 37
    2908:	b4 f4       	brge	.+44     	; 0x2936 <itoa+0x3a>
    290a:	4a 30       	cpi	r20, 0x0A	; 10
    290c:	29 f4       	brne	.+10     	; 0x2918 <itoa+0x1c>
    290e:	97 fb       	bst	r25, 7
    2910:	1e f4       	brtc	.+6      	; 0x2918 <itoa+0x1c>
    2912:	90 95       	com	r25
    2914:	81 95       	neg	r24
    2916:	9f 4f       	sbci	r25, 0xFF	; 255
    2918:	64 2f       	mov	r22, r20
    291a:	77 27       	eor	r23, r23
    291c:	0e 94 af 14 	call	0x295e	; 0x295e <__udivmodhi4>
    2920:	80 5d       	subi	r24, 0xD0	; 208
    2922:	8a 33       	cpi	r24, 0x3A	; 58
    2924:	0c f0       	brlt	.+2      	; 0x2928 <itoa+0x2c>
    2926:	89 5d       	subi	r24, 0xD9	; 217
    2928:	81 93       	st	Z+, r24
    292a:	cb 01       	movw	r24, r22
    292c:	00 97       	sbiw	r24, 0x00	; 0
    292e:	a1 f7       	brne	.-24     	; 0x2918 <itoa+0x1c>
    2930:	16 f4       	brtc	.+4      	; 0x2936 <itoa+0x3a>
    2932:	5d e2       	ldi	r21, 0x2D	; 45
    2934:	51 93       	st	Z+, r21
    2936:	10 82       	st	Z, r1
    2938:	c9 01       	movw	r24, r18
    293a:	0c 94 9f 14 	jmp	0x293e	; 0x293e <strrev>

0000293e <strrev>:
    293e:	dc 01       	movw	r26, r24
    2940:	fc 01       	movw	r30, r24
    2942:	67 2f       	mov	r22, r23
    2944:	71 91       	ld	r23, Z+
    2946:	77 23       	and	r23, r23
    2948:	e1 f7       	brne	.-8      	; 0x2942 <strrev+0x4>
    294a:	32 97       	sbiw	r30, 0x02	; 2
    294c:	04 c0       	rjmp	.+8      	; 0x2956 <strrev+0x18>
    294e:	7c 91       	ld	r23, X
    2950:	6d 93       	st	X+, r22
    2952:	70 83       	st	Z, r23
    2954:	62 91       	ld	r22, -Z
    2956:	ae 17       	cp	r26, r30
    2958:	bf 07       	cpc	r27, r31
    295a:	c8 f3       	brcs	.-14     	; 0x294e <strrev+0x10>
    295c:	08 95       	ret

0000295e <__udivmodhi4>:
    295e:	aa 1b       	sub	r26, r26
    2960:	bb 1b       	sub	r27, r27
    2962:	51 e1       	ldi	r21, 0x11	; 17
    2964:	07 c0       	rjmp	.+14     	; 0x2974 <__udivmodhi4_ep>

00002966 <__udivmodhi4_loop>:
    2966:	aa 1f       	adc	r26, r26
    2968:	bb 1f       	adc	r27, r27
    296a:	a6 17       	cp	r26, r22
    296c:	b7 07       	cpc	r27, r23
    296e:	10 f0       	brcs	.+4      	; 0x2974 <__udivmodhi4_ep>
    2970:	a6 1b       	sub	r26, r22
    2972:	b7 0b       	sbc	r27, r23

00002974 <__udivmodhi4_ep>:
    2974:	88 1f       	adc	r24, r24
    2976:	99 1f       	adc	r25, r25
    2978:	5a 95       	dec	r21
    297a:	a9 f7       	brne	.-22     	; 0x2966 <__udivmodhi4_loop>
    297c:	80 95       	com	r24
    297e:	90 95       	com	r25
    2980:	bc 01       	movw	r22, r24
    2982:	cd 01       	movw	r24, r26
    2984:	08 95       	ret

00002986 <_exit>:
    2986:	f8 94       	cli

00002988 <__stop_program>:
    2988:	ff cf       	rjmp	.-2      	; 0x2988 <__stop_program>
