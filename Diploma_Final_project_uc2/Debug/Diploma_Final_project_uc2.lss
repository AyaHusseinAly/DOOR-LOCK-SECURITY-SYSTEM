
Diploma_Final_project_uc2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002972  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002972  000029e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002370  00000000  00000000  000029f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ca3  00000000  00000000  00004d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00005a03  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00005b63  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00005cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00007d37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00008e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00009dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00009f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000a1fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000aa8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 58 12 	call	0x24b0	; 0x24b0 <main>
      7a:	0c 94 b7 14 	jmp	0x296e	; 0x296e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 4e 14 	jmp	0x289c	; 0x289c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 4e 14 	jmp	0x289c	; 0x289c <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 3a 14 	jmp	0x2874	; 0x2874 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 56 14 	jmp	0x28ac	; 0x28ac <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__ltsf2+0x56>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__ltsf2+0x56>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__ltsf2+0x58>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <PWM_Timer0_Init>:
 *  Created on: Sep 28, 2018
 *      Author: Aya Hussein
 */
#include "Timer_PWM.h"

void PWM_Timer0_Init(unsigned char set_duty_cycle){
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	0f 92       	push	r0
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
     c98:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //initial timer value
     c9a:	e2 e5       	ldi	r30, 0x52	; 82
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	10 82       	st	Z, r1

	OCR0  = set_duty_cycle;
     ca0:	ec e5       	ldi	r30, 0x5C	; 92
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); //set OC0 as output pin --> pin where the PWM signal is generated from MC.
     ca8:	a7 e3       	ldi	r26, 0x37	; 55
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e7 e3       	ldi	r30, 0x37	; 55
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	88 60       	ori	r24, 0x08	; 8
     cb4:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
     cb6:	e3 e5       	ldi	r30, 0x53	; 83
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	8a e6       	ldi	r24, 0x6A	; 106
     cbc:	80 83       	st	Z, r24
}
     cbe:	0f 90       	pop	r0
     cc0:	cf 91       	pop	r28
     cc2:	df 91       	pop	r29
     cc4:	08 95       	ret

00000cc6 <UART_init>:

#include "UART.h"

#define UBRR (F_CPU/(8UL*BAUD)-1)

void UART_init(void){
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	0f 92       	push	r0
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
	UCSRC &=!(1<<UMSEL);
     cd0:	e0 e4       	ldi	r30, 0x40	; 64
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	e0 e4       	ldi	r30, 0x40	; 64
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	10 82       	st	Z, r1
	UCSRB = (1<<RXEN) | (1<<TXEN);
     cdc:	ea e2       	ldi	r30, 0x2A	; 42
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	88 e1       	ldi	r24, 0x18	; 24
     ce2:	80 83       	st	Z, r24
	UCSRC |=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
     ce4:	a0 e4       	ldi	r26, 0x40	; 64
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e0 e4       	ldi	r30, 0x40	; 64
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	86 68       	ori	r24, 0x86	; 134
     cf0:	8c 93       	st	X, r24
	UCSRC|=(1<<UPM1);/*Even parity*/
     cf2:	a0 e4       	ldi	r26, 0x40	; 64
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e0 e4       	ldi	r30, 0x40	; 64
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	80 62       	ori	r24, 0x20	; 32
     cfe:	8c 93       	st	X, r24

	UCSRA = (1<<U2X);
     d00:	eb e2       	ldi	r30, 0x2B	; 43
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	82 e0       	ldi	r24, 0x02	; 2
     d06:	80 83       	st	Z, r24
	UBRRL= UBRR;
     d08:	e9 e2       	ldi	r30, 0x29	; 41
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	8c e0       	ldi	r24, 0x0C	; 12
     d0e:	80 83       	st	Z, r24
	UBRRH= (UBRR>>8);
     d10:	e0 e4       	ldi	r30, 0x40	; 64
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	10 82       	st	Z, r1
}
     d16:	0f 90       	pop	r0
     d18:	cf 91       	pop	r28
     d1a:	df 91       	pop	r29
     d1c:	08 95       	ret

00000d1e <UART_ReceiveByte>:

unsigned char UART_ReceiveByte(void){
     d1e:	df 93       	push	r29
     d20:	cf 93       	push	r28
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62

while(!(UCSRA&(1<<RXC)));
     d26:	eb e2       	ldi	r30, 0x2B	; 43
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	88 23       	and	r24, r24
     d2e:	dc f7       	brge	.-10     	; 0xd26 <UART_ReceiveByte+0x8>
	return UDR;
     d30:	ec e2       	ldi	r30, 0x2C	; 44
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
}
     d36:	cf 91       	pop	r28
     d38:	df 91       	pop	r29
     d3a:	08 95       	ret

00000d3c <UART_SendByte>:

void UART_SendByte(unsigned char DATA){
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	0f 92       	push	r0
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSRA&(1<<TXC)));
    UCSRA|=(1<<TXC); //CLEAR the flag by writing logic 1
*/


     while(!(UCSRA&(1<<UDRE)));
     d48:	eb e2       	ldi	r30, 0x2B	; 43
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	88 2f       	mov	r24, r24
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	80 72       	andi	r24, 0x20	; 32
     d54:	90 70       	andi	r25, 0x00	; 0
     d56:	00 97       	sbiw	r24, 0x00	; 0
     d58:	b9 f3       	breq	.-18     	; 0xd48 <UART_SendByte+0xc>
     UDR=DATA;
     d5a:	ec e2       	ldi	r30, 0x2C	; 44
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	80 83       	st	Z, r24

}
     d62:	0f 90       	pop	r0
     d64:	cf 91       	pop	r28
     d66:	df 91       	pop	r29
     d68:	08 95       	ret

00000d6a <UART_sendString>:

void UART_sendString(const unsigned char*str){
     d6a:	df 93       	push	r29
     d6c:	cf 93       	push	r28
     d6e:	00 d0       	rcall	.+0      	; 0xd70 <UART_sendString+0x6>
     d70:	0f 92       	push	r0
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
     d76:	9b 83       	std	Y+3, r25	; 0x03
     d78:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char i=0;
     d7a:	19 82       	std	Y+1, r1	; 0x01
     d7c:	0e c0       	rjmp	.+28     	; 0xd9a <UART_sendString+0x30>
	while(str[i]!='\0'){
		UART_SendByte(str[i]);
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	8a 81       	ldd	r24, Y+2	; 0x02
     d86:	9b 81       	ldd	r25, Y+3	; 0x03
     d88:	fc 01       	movw	r30, r24
     d8a:	e2 0f       	add	r30, r18
     d8c:	f3 1f       	adc	r31, r19
     d8e:	80 81       	ld	r24, Z
     d90:	0e 94 9e 06 	call	0xd3c	; 0xd3c <UART_SendByte>
		i++;
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	8f 5f       	subi	r24, 0xFF	; 255
     d98:	89 83       	std	Y+1, r24	; 0x01

}

void UART_sendString(const unsigned char*str){
	unsigned char i=0;
	while(str[i]!='\0'){
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	9b 81       	ldd	r25, Y+3	; 0x03
     da4:	fc 01       	movw	r30, r24
     da6:	e2 0f       	add	r30, r18
     da8:	f3 1f       	adc	r31, r19
     daa:	80 81       	ld	r24, Z
     dac:	88 23       	and	r24, r24
     dae:	39 f7       	brne	.-50     	; 0xd7e <UART_sendString+0x14>
		UART_SendByte(str[i]);
		i++;
	}
}
     db0:	0f 90       	pop	r0
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	cf 91       	pop	r28
     db8:	df 91       	pop	r29
     dba:	08 95       	ret

00000dbc <UART_receiveString>:

/*you can also send length of the str instead of special char like $*/
void UART_receiveString(unsigned char*str){
     dbc:	0f 93       	push	r16
     dbe:	1f 93       	push	r17
     dc0:	df 93       	push	r29
     dc2:	cf 93       	push	r28
     dc4:	00 d0       	rcall	.+0      	; 0xdc6 <UART_receiveString+0xa>
     dc6:	0f 92       	push	r0
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	9b 83       	std	Y+3, r25	; 0x03
     dce:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char i=0;
     dd0:	19 82       	std	Y+1, r1	; 0x01
	str[i]=UART_ReceiveByte();
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	8a 81       	ldd	r24, Y+2	; 0x02
     dda:	9b 81       	ldd	r25, Y+3	; 0x03
     ddc:	8c 01       	movw	r16, r24
     dde:	02 0f       	add	r16, r18
     de0:	13 1f       	adc	r17, r19
     de2:	0e 94 8f 06 	call	0xd1e	; 0xd1e <UART_ReceiveByte>
     de6:	f8 01       	movw	r30, r16
     de8:	80 83       	st	Z, r24
     dea:	0f c0       	rjmp	.+30     	; 0xe0a <UART_receiveString+0x4e>
		while(str[i]!='$'){
			i++;
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	8f 5f       	subi	r24, 0xFF	; 255
     df0:	89 83       	std	Y+1, r24	; 0x01
			str[i]=UART_ReceiveByte();
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	9b 81       	ldd	r25, Y+3	; 0x03
     dfc:	8c 01       	movw	r16, r24
     dfe:	02 0f       	add	r16, r18
     e00:	13 1f       	adc	r17, r19
     e02:	0e 94 8f 06 	call	0xd1e	; 0xd1e <UART_ReceiveByte>
     e06:	f8 01       	movw	r30, r16
     e08:	80 83       	st	Z, r24

/*you can also send length of the str instead of special char like $*/
void UART_receiveString(unsigned char*str){
	unsigned char i=0;
	str[i]=UART_ReceiveByte();
		while(str[i]!='$'){
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	9b 81       	ldd	r25, Y+3	; 0x03
     e14:	fc 01       	movw	r30, r24
     e16:	e2 0f       	add	r30, r18
     e18:	f3 1f       	adc	r31, r19
     e1a:	80 81       	ld	r24, Z
     e1c:	84 32       	cpi	r24, 0x24	; 36
     e1e:	31 f7       	brne	.-52     	; 0xdec <UART_receiveString+0x30>
			i++;
			str[i]=UART_ReceiveByte();

		}
		str[i] = '\0';
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	9b 81       	ldd	r25, Y+3	; 0x03
     e2a:	fc 01       	movw	r30, r24
     e2c:	e2 0f       	add	r30, r18
     e2e:	f3 1f       	adc	r31, r19
     e30:	10 82       	st	Z, r1
}
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	cf 91       	pop	r28
     e3a:	df 91       	pop	r29
     e3c:	1f 91       	pop	r17
     e3e:	0f 91       	pop	r16
     e40:	08 95       	ret

00000e42 <EEPROM_init>:
 *******************************************************************************/
#include "i2c.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init();
     e4a:	0e 94 cb 07 	call	0xf96	; 0xf96 <TWI_init>
}
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	00 d0       	rcall	.+0      	; 0xe5a <EEPROM_writeByte+0x6>
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <EEPROM_writeByte+0x8>
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	9a 83       	std	Y+2, r25	; 0x02
     e62:	89 83       	std	Y+1, r24	; 0x01
     e64:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     e66:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <TWI_start>
    if (TWI_getStatus() != TW_START)
     e6a:	0e 94 39 08 	call	0x1072	; 0x1072 <TWI_getStatus>
     e6e:	88 30       	cpi	r24, 0x08	; 8
     e70:	11 f0       	breq	.+4      	; 0xe76 <EEPROM_writeByte+0x22>
        return ERROR;
     e72:	1c 82       	std	Y+4, r1	; 0x04
     e74:	28 c0       	rjmp	.+80     	; 0xec6 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	9a 81       	ldd	r25, Y+2	; 0x02
     e7a:	80 70       	andi	r24, 0x00	; 0
     e7c:	97 70       	andi	r25, 0x07	; 7
     e7e:	88 0f       	add	r24, r24
     e80:	89 2f       	mov	r24, r25
     e82:	88 1f       	adc	r24, r24
     e84:	99 0b       	sbc	r25, r25
     e86:	91 95       	neg	r25
     e88:	80 6a       	ori	r24, 0xA0	; 160
     e8a:	0e 94 fc 07 	call	0xff8	; 0xff8 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     e8e:	0e 94 39 08 	call	0x1072	; 0x1072 <TWI_getStatus>
     e92:	88 31       	cpi	r24, 0x18	; 24
     e94:	11 f0       	breq	.+4      	; 0xe9a <EEPROM_writeByte+0x46>
        return ERROR; 
     e96:	1c 82       	std	Y+4, r1	; 0x04
     e98:	16 c0       	rjmp	.+44     	; 0xec6 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	0e 94 fc 07 	call	0xff8	; 0xff8 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     ea0:	0e 94 39 08 	call	0x1072	; 0x1072 <TWI_getStatus>
     ea4:	88 32       	cpi	r24, 0x28	; 40
     ea6:	11 f0       	breq	.+4      	; 0xeac <EEPROM_writeByte+0x58>
        return ERROR;
     ea8:	1c 82       	std	Y+4, r1	; 0x04
     eaa:	0d c0       	rjmp	.+26     	; 0xec6 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	0e 94 fc 07 	call	0xff8	; 0xff8 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     eb2:	0e 94 39 08 	call	0x1072	; 0x1072 <TWI_getStatus>
     eb6:	88 32       	cpi	r24, 0x28	; 40
     eb8:	11 f0       	breq	.+4      	; 0xebe <EEPROM_writeByte+0x6a>
        return ERROR;
     eba:	1c 82       	std	Y+4, r1	; 0x04
     ebc:	04 c0       	rjmp	.+8      	; 0xec6 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     ebe:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <TWI_stop>
	
    return SUCCESS;
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	8c 83       	std	Y+4, r24	; 0x04
     ec6:	8c 81       	ldd	r24, Y+4	; 0x04
}
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	00 d0       	rcall	.+0      	; 0xedc <EEPROM_readByte+0x6>
     edc:	00 d0       	rcall	.+0      	; 0xede <EEPROM_readByte+0x8>
     ede:	0f 92       	push	r0
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	9a 83       	std	Y+2, r25	; 0x02
     ee6:	89 83       	std	Y+1, r24	; 0x01
     ee8:	7c 83       	std	Y+4, r23	; 0x04
     eea:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     eec:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <TWI_start>
    if (TWI_getStatus() != TW_START)
     ef0:	0e 94 39 08 	call	0x1072	; 0x1072 <TWI_getStatus>
     ef4:	88 30       	cpi	r24, 0x08	; 8
     ef6:	11 f0       	breq	.+4      	; 0xefc <EEPROM_readByte+0x26>
        return ERROR;
     ef8:	1d 82       	std	Y+5, r1	; 0x05
     efa:	44 c0       	rjmp	.+136    	; 0xf84 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	9a 81       	ldd	r25, Y+2	; 0x02
     f00:	80 70       	andi	r24, 0x00	; 0
     f02:	97 70       	andi	r25, 0x07	; 7
     f04:	88 0f       	add	r24, r24
     f06:	89 2f       	mov	r24, r25
     f08:	88 1f       	adc	r24, r24
     f0a:	99 0b       	sbc	r25, r25
     f0c:	91 95       	neg	r25
     f0e:	80 6a       	ori	r24, 0xA0	; 160
     f10:	0e 94 fc 07 	call	0xff8	; 0xff8 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     f14:	0e 94 39 08 	call	0x1072	; 0x1072 <TWI_getStatus>
     f18:	88 31       	cpi	r24, 0x18	; 24
     f1a:	11 f0       	breq	.+4      	; 0xf20 <EEPROM_readByte+0x4a>
        return ERROR;
     f1c:	1d 82       	std	Y+5, r1	; 0x05
     f1e:	32 c0       	rjmp	.+100    	; 0xf84 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	0e 94 fc 07 	call	0xff8	; 0xff8 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     f26:	0e 94 39 08 	call	0x1072	; 0x1072 <TWI_getStatus>
     f2a:	88 32       	cpi	r24, 0x28	; 40
     f2c:	11 f0       	breq	.+4      	; 0xf32 <EEPROM_readByte+0x5c>
        return ERROR;
     f2e:	1d 82       	std	Y+5, r1	; 0x05
     f30:	29 c0       	rjmp	.+82     	; 0xf84 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     f32:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
     f36:	0e 94 39 08 	call	0x1072	; 0x1072 <TWI_getStatus>
     f3a:	80 31       	cpi	r24, 0x10	; 16
     f3c:	11 f0       	breq	.+4      	; 0xf42 <EEPROM_readByte+0x6c>
        return ERROR;
     f3e:	1d 82       	std	Y+5, r1	; 0x05
     f40:	21 c0       	rjmp	.+66     	; 0xf84 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	9a 81       	ldd	r25, Y+2	; 0x02
     f46:	80 70       	andi	r24, 0x00	; 0
     f48:	97 70       	andi	r25, 0x07	; 7
     f4a:	88 0f       	add	r24, r24
     f4c:	89 2f       	mov	r24, r25
     f4e:	88 1f       	adc	r24, r24
     f50:	99 0b       	sbc	r25, r25
     f52:	91 95       	neg	r25
     f54:	81 6a       	ori	r24, 0xA1	; 161
     f56:	0e 94 fc 07 	call	0xff8	; 0xff8 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
     f5a:	0e 94 39 08 	call	0x1072	; 0x1072 <TWI_getStatus>
     f5e:	80 34       	cpi	r24, 0x40	; 64
     f60:	11 f0       	breq	.+4      	; 0xf66 <EEPROM_readByte+0x90>
        return ERROR;
     f62:	1d 82       	std	Y+5, r1	; 0x05
     f64:	0f c0       	rjmp	.+30     	; 0xf84 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
     f66:	0e 94 26 08 	call	0x104c	; 0x104c <TWI_readWithNACK>
     f6a:	eb 81       	ldd	r30, Y+3	; 0x03
     f6c:	fc 81       	ldd	r31, Y+4	; 0x04
     f6e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
     f70:	0e 94 39 08 	call	0x1072	; 0x1072 <TWI_getStatus>
     f74:	88 35       	cpi	r24, 0x58	; 88
     f76:	11 f0       	breq	.+4      	; 0xf7c <EEPROM_readByte+0xa6>
        return ERROR;
     f78:	1d 82       	std	Y+5, r1	; 0x05
     f7a:	04 c0       	rjmp	.+8      	; 0xf84 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     f7c:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <TWI_stop>
    return SUCCESS;
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	8d 83       	std	Y+5, r24	; 0x05
     f84:	8d 81       	ldd	r24, Y+5	; 0x05
}
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	08 95       	ret

00000f96 <TWI_init>:
 *******************************************************************************/
 
#include "i2c.h"

void TWI_init(void)
{
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
     f9e:	e0 e2       	ldi	r30, 0x20	; 32
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	82 e0       	ldi	r24, 0x02	; 2
     fa4:	80 83       	st	Z, r24
	TWSR = 0x00;
     fa6:	e1 e2       	ldi	r30, 0x21	; 33
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
     fac:	e2 e2       	ldi	r30, 0x22	; 34
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	82 e0       	ldi	r24, 0x02	; 2
     fb2:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
     fb4:	e6 e5       	ldi	r30, 0x56	; 86
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	84 e0       	ldi	r24, 0x04	; 4
     fba:	80 83       	st	Z, r24
}
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	08 95       	ret

00000fc2 <TWI_start>:

void TWI_start(void)
{
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     fca:	e6 e5       	ldi	r30, 0x56	; 86
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	84 ea       	ldi	r24, 0xA4	; 164
     fd0:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     fd2:	e6 e5       	ldi	r30, 0x56	; 86
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	88 23       	and	r24, r24
     fda:	dc f7       	brge	.-10     	; 0xfd2 <TWI_start+0x10>
}
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <TWI_stop>:

void TWI_stop(void)
{
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     fea:	e6 e5       	ldi	r30, 0x56	; 86
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	84 e9       	ldi	r24, 0x94	; 148
     ff0:	80 83       	st	Z, r24
}
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	08 95       	ret

00000ff8 <TWI_write>:

void TWI_write(uint8 data)
{
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	0f 92       	push	r0
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
    1002:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1004:	e3 e2       	ldi	r30, 0x23	; 35
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    100c:	e6 e5       	ldi	r30, 0x56	; 86
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	84 e8       	ldi	r24, 0x84	; 132
    1012:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1014:	e6 e5       	ldi	r30, 0x56	; 86
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	88 23       	and	r24, r24
    101c:	dc f7       	brge	.-10     	; 0x1014 <TWI_write+0x1c>
}
    101e:	0f 90       	pop	r0
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    102e:	e6 e5       	ldi	r30, 0x56	; 86
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	84 ec       	ldi	r24, 0xC4	; 196
    1034:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1036:	e6 e5       	ldi	r30, 0x56	; 86
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	88 23       	and	r24, r24
    103e:	dc f7       	brge	.-10     	; 0x1036 <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
    1040:	e3 e2       	ldi	r30, 0x23	; 35
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
}
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1054:	e6 e5       	ldi	r30, 0x56	; 86
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	84 e8       	ldi	r24, 0x84	; 132
    105a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    105c:	e6 e5       	ldi	r30, 0x56	; 86
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	88 23       	and	r24, r24
    1064:	dc f7       	brge	.-10     	; 0x105c <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1066:	e3 e2       	ldi	r30, 0x23	; 35
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
}
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	08 95       	ret

00001072 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	0f 92       	push	r0
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    107c:	e1 e2       	ldi	r30, 0x21	; 33
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	88 7f       	andi	r24, 0xF8	; 248
    1084:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1086:	89 81       	ldd	r24, Y+1	; 0x01
}
    1088:	0f 90       	pop	r0
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <lcd_init>:
 *      Author: Aya Hussein
 */

#include "lcd.h"

void lcd_init(void){
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR|=(1<<RS);
    1098:	a1 e3       	ldi	r26, 0x31	; 49
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e1 e3       	ldi	r30, 0x31	; 49
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	80 61       	ori	r24, 0x10	; 16
    10a4:	8c 93       	st	X, r24
	LCD_CTRL_PORT_DIR|=(1<<RW);
    10a6:	a1 e3       	ldi	r26, 0x31	; 49
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e1 e3       	ldi	r30, 0x31	; 49
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	80 62       	ori	r24, 0x20	; 32
    10b2:	8c 93       	st	X, r24
	LCD_CTRL_PORT_DIR|=(1<<E);
    10b4:	a1 e3       	ldi	r26, 0x31	; 49
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e1 e3       	ldi	r30, 0x31	; 49
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	80 64       	ori	r24, 0x40	; 64
    10c0:	8c 93       	st	X, r24
	LCD_DATA_PORT_DIR=0xFF;
	lcd_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE);

#elif(USED_MODE==4)
	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT_DIR=0xF0;
    10c2:	e4 e3       	ldi	r30, 0x34	; 52
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 ef       	ldi	r24, 0xF0	; 240
    10c8:	80 83       	st	Z, r24
	#elif
	LCD_DATA_PORT_DIR=0x0F;
	#endif
	lcd_sendCommand(FOUR_BITS_DATA_MODE);
    10ca:	82 e0       	ldi	r24, 0x02	; 2
    10cc:	0e 94 74 08 	call	0x10e8	; 0x10e8 <lcd_sendCommand>
	lcd_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
    10d0:	88 e2       	ldi	r24, 0x28	; 40
    10d2:	0e 94 74 08 	call	0x10e8	; 0x10e8 <lcd_sendCommand>
#endif

	lcd_sendCommand(CURSOR_OFF);
    10d6:	8c e0       	ldi	r24, 0x0C	; 12
    10d8:	0e 94 74 08 	call	0x10e8	; 0x10e8 <lcd_sendCommand>
	lcd_sendCommand(CLEAR_SCREEN);
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	0e 94 74 08 	call	0x10e8	; 0x10e8 <lcd_sendCommand>
}
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	08 95       	ret

000010e8 <lcd_sendCommand>:


void lcd_sendCommand(unsigned char command){
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	cd 56       	subi	r28, 0x6D	; 109
    10f6:	d0 40       	sbci	r29, 0x00	; 0
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	f8 94       	cli
    10fc:	de bf       	out	0x3e, r29	; 62
    10fe:	0f be       	out	0x3f, r0	; 63
    1100:	cd bf       	out	0x3d, r28	; 61
    1102:	fe 01       	movw	r30, r28
    1104:	e3 59       	subi	r30, 0x93	; 147
    1106:	ff 4f       	sbci	r31, 0xFF	; 255
    1108:	80 83       	st	Z, r24
	LCD_CTRL_PORT&=~(1<<RS);
    110a:	a2 e3       	ldi	r26, 0x32	; 50
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e2 e3       	ldi	r30, 0x32	; 50
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	8f 7e       	andi	r24, 0xEF	; 239
    1116:	8c 93       	st	X, r24
	LCD_CTRL_PORT&=~(1<<RW);
    1118:	a2 e3       	ldi	r26, 0x32	; 50
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e2 e3       	ldi	r30, 0x32	; 50
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	8f 7d       	andi	r24, 0xDF	; 223
    1124:	8c 93       	st	X, r24
    1126:	fe 01       	movw	r30, r28
    1128:	e7 59       	subi	r30, 0x97	; 151
    112a:	ff 4f       	sbci	r31, 0xFF	; 255
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	a0 e8       	ldi	r26, 0x80	; 128
    1132:	bf e3       	ldi	r27, 0x3F	; 63
    1134:	80 83       	st	Z, r24
    1136:	91 83       	std	Z+1, r25	; 0x01
    1138:	a2 83       	std	Z+2, r26	; 0x02
    113a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    113c:	8e 01       	movw	r16, r28
    113e:	0b 59       	subi	r16, 0x9B	; 155
    1140:	1f 4f       	sbci	r17, 0xFF	; 255
    1142:	fe 01       	movw	r30, r28
    1144:	e7 59       	subi	r30, 0x97	; 151
    1146:	ff 4f       	sbci	r31, 0xFF	; 255
    1148:	60 81       	ld	r22, Z
    114a:	71 81       	ldd	r23, Z+1	; 0x01
    114c:	82 81       	ldd	r24, Z+2	; 0x02
    114e:	93 81       	ldd	r25, Z+3	; 0x03
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	4a e7       	ldi	r20, 0x7A	; 122
    1156:	53 e4       	ldi	r21, 0x43	; 67
    1158:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	f8 01       	movw	r30, r16
    1162:	80 83       	st	Z, r24
    1164:	91 83       	std	Z+1, r25	; 0x01
    1166:	a2 83       	std	Z+2, r26	; 0x02
    1168:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    116a:	fe 01       	movw	r30, r28
    116c:	eb 59       	subi	r30, 0x9B	; 155
    116e:	ff 4f       	sbci	r31, 0xFF	; 255
    1170:	60 81       	ld	r22, Z
    1172:	71 81       	ldd	r23, Z+1	; 0x01
    1174:	82 81       	ldd	r24, Z+2	; 0x02
    1176:	93 81       	ldd	r25, Z+3	; 0x03
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	40 e8       	ldi	r20, 0x80	; 128
    117e:	5f e3       	ldi	r21, 0x3F	; 63
    1180:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1184:	88 23       	and	r24, r24
    1186:	44 f4       	brge	.+16     	; 0x1198 <lcd_sendCommand+0xb0>
		__ticks = 1;
    1188:	fe 01       	movw	r30, r28
    118a:	ed 59       	subi	r30, 0x9D	; 157
    118c:	ff 4f       	sbci	r31, 0xFF	; 255
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	91 83       	std	Z+1, r25	; 0x01
    1194:	80 83       	st	Z, r24
    1196:	64 c0       	rjmp	.+200    	; 0x1260 <lcd_sendCommand+0x178>
	else if (__tmp > 65535)
    1198:	fe 01       	movw	r30, r28
    119a:	eb 59       	subi	r30, 0x9B	; 155
    119c:	ff 4f       	sbci	r31, 0xFF	; 255
    119e:	60 81       	ld	r22, Z
    11a0:	71 81       	ldd	r23, Z+1	; 0x01
    11a2:	82 81       	ldd	r24, Z+2	; 0x02
    11a4:	93 81       	ldd	r25, Z+3	; 0x03
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	3f ef       	ldi	r19, 0xFF	; 255
    11aa:	4f e7       	ldi	r20, 0x7F	; 127
    11ac:	57 e4       	ldi	r21, 0x47	; 71
    11ae:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    11b2:	18 16       	cp	r1, r24
    11b4:	0c f0       	brlt	.+2      	; 0x11b8 <lcd_sendCommand+0xd0>
    11b6:	43 c0       	rjmp	.+134    	; 0x123e <lcd_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b8:	fe 01       	movw	r30, r28
    11ba:	e7 59       	subi	r30, 0x97	; 151
    11bc:	ff 4f       	sbci	r31, 0xFF	; 255
    11be:	60 81       	ld	r22, Z
    11c0:	71 81       	ldd	r23, Z+1	; 0x01
    11c2:	82 81       	ldd	r24, Z+2	; 0x02
    11c4:	93 81       	ldd	r25, Z+3	; 0x03
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	40 e2       	ldi	r20, 0x20	; 32
    11cc:	51 e4       	ldi	r21, 0x41	; 65
    11ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	8e 01       	movw	r16, r28
    11d8:	0d 59       	subi	r16, 0x9D	; 157
    11da:	1f 4f       	sbci	r17, 0xFF	; 255
    11dc:	bc 01       	movw	r22, r24
    11de:	cd 01       	movw	r24, r26
    11e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	f8 01       	movw	r30, r16
    11ea:	91 83       	std	Z+1, r25	; 0x01
    11ec:	80 83       	st	Z, r24
    11ee:	1f c0       	rjmp	.+62     	; 0x122e <lcd_sendCommand+0x146>
    11f0:	fe 01       	movw	r30, r28
    11f2:	ef 59       	subi	r30, 0x9F	; 159
    11f4:	ff 4f       	sbci	r31, 0xFF	; 255
    11f6:	89 e1       	ldi	r24, 0x19	; 25
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	91 83       	std	Z+1, r25	; 0x01
    11fc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11fe:	fe 01       	movw	r30, r28
    1200:	ef 59       	subi	r30, 0x9F	; 159
    1202:	ff 4f       	sbci	r31, 0xFF	; 255
    1204:	80 81       	ld	r24, Z
    1206:	91 81       	ldd	r25, Z+1	; 0x01
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	f1 f7       	brne	.-4      	; 0x1208 <lcd_sendCommand+0x120>
    120c:	fe 01       	movw	r30, r28
    120e:	ef 59       	subi	r30, 0x9F	; 159
    1210:	ff 4f       	sbci	r31, 0xFF	; 255
    1212:	91 83       	std	Z+1, r25	; 0x01
    1214:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1216:	de 01       	movw	r26, r28
    1218:	ad 59       	subi	r26, 0x9D	; 157
    121a:	bf 4f       	sbci	r27, 0xFF	; 255
    121c:	fe 01       	movw	r30, r28
    121e:	ed 59       	subi	r30, 0x9D	; 157
    1220:	ff 4f       	sbci	r31, 0xFF	; 255
    1222:	80 81       	ld	r24, Z
    1224:	91 81       	ldd	r25, Z+1	; 0x01
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	11 96       	adiw	r26, 0x01	; 1
    122a:	9c 93       	st	X, r25
    122c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    122e:	fe 01       	movw	r30, r28
    1230:	ed 59       	subi	r30, 0x9D	; 157
    1232:	ff 4f       	sbci	r31, 0xFF	; 255
    1234:	80 81       	ld	r24, Z
    1236:	91 81       	ldd	r25, Z+1	; 0x01
    1238:	00 97       	sbiw	r24, 0x00	; 0
    123a:	d1 f6       	brne	.-76     	; 0x11f0 <lcd_sendCommand+0x108>
    123c:	27 c0       	rjmp	.+78     	; 0x128c <lcd_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    123e:	8e 01       	movw	r16, r28
    1240:	0d 59       	subi	r16, 0x9D	; 157
    1242:	1f 4f       	sbci	r17, 0xFF	; 255
    1244:	fe 01       	movw	r30, r28
    1246:	eb 59       	subi	r30, 0x9B	; 155
    1248:	ff 4f       	sbci	r31, 0xFF	; 255
    124a:	60 81       	ld	r22, Z
    124c:	71 81       	ldd	r23, Z+1	; 0x01
    124e:	82 81       	ldd	r24, Z+2	; 0x02
    1250:	93 81       	ldd	r25, Z+3	; 0x03
    1252:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1256:	dc 01       	movw	r26, r24
    1258:	cb 01       	movw	r24, r22
    125a:	f8 01       	movw	r30, r16
    125c:	91 83       	std	Z+1, r25	; 0x01
    125e:	80 83       	st	Z, r24
    1260:	de 01       	movw	r26, r28
    1262:	a1 5a       	subi	r26, 0xA1	; 161
    1264:	bf 4f       	sbci	r27, 0xFF	; 255
    1266:	fe 01       	movw	r30, r28
    1268:	ed 59       	subi	r30, 0x9D	; 157
    126a:	ff 4f       	sbci	r31, 0xFF	; 255
    126c:	80 81       	ld	r24, Z
    126e:	91 81       	ldd	r25, Z+1	; 0x01
    1270:	8d 93       	st	X+, r24
    1272:	9c 93       	st	X, r25
    1274:	fe 01       	movw	r30, r28
    1276:	e1 5a       	subi	r30, 0xA1	; 161
    1278:	ff 4f       	sbci	r31, 0xFF	; 255
    127a:	80 81       	ld	r24, Z
    127c:	91 81       	ldd	r25, Z+1	; 0x01
    127e:	01 97       	sbiw	r24, 0x01	; 1
    1280:	f1 f7       	brne	.-4      	; 0x127e <lcd_sendCommand+0x196>
    1282:	fe 01       	movw	r30, r28
    1284:	e1 5a       	subi	r30, 0xA1	; 161
    1286:	ff 4f       	sbci	r31, 0xFF	; 255
    1288:	91 83       	std	Z+1, r25	; 0x01
    128a:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_CTRL_PORT|=(1<<E);
    128c:	a2 e3       	ldi	r26, 0x32	; 50
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	e2 e3       	ldi	r30, 0x32	; 50
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	80 64       	ori	r24, 0x40	; 64
    1298:	8c 93       	st	X, r24
    129a:	fe 01       	movw	r30, r28
    129c:	e5 5a       	subi	r30, 0xA5	; 165
    129e:	ff 4f       	sbci	r31, 0xFF	; 255
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	a0 e8       	ldi	r26, 0x80	; 128
    12a6:	bf e3       	ldi	r27, 0x3F	; 63
    12a8:	80 83       	st	Z, r24
    12aa:	91 83       	std	Z+1, r25	; 0x01
    12ac:	a2 83       	std	Z+2, r26	; 0x02
    12ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12b0:	8e 01       	movw	r16, r28
    12b2:	09 5a       	subi	r16, 0xA9	; 169
    12b4:	1f 4f       	sbci	r17, 0xFF	; 255
    12b6:	fe 01       	movw	r30, r28
    12b8:	e5 5a       	subi	r30, 0xA5	; 165
    12ba:	ff 4f       	sbci	r31, 0xFF	; 255
    12bc:	60 81       	ld	r22, Z
    12be:	71 81       	ldd	r23, Z+1	; 0x01
    12c0:	82 81       	ldd	r24, Z+2	; 0x02
    12c2:	93 81       	ldd	r25, Z+3	; 0x03
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	4a e7       	ldi	r20, 0x7A	; 122
    12ca:	53 e4       	ldi	r21, 0x43	; 67
    12cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	f8 01       	movw	r30, r16
    12d6:	80 83       	st	Z, r24
    12d8:	91 83       	std	Z+1, r25	; 0x01
    12da:	a2 83       	std	Z+2, r26	; 0x02
    12dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12de:	fe 01       	movw	r30, r28
    12e0:	e9 5a       	subi	r30, 0xA9	; 169
    12e2:	ff 4f       	sbci	r31, 0xFF	; 255
    12e4:	60 81       	ld	r22, Z
    12e6:	71 81       	ldd	r23, Z+1	; 0x01
    12e8:	82 81       	ldd	r24, Z+2	; 0x02
    12ea:	93 81       	ldd	r25, Z+3	; 0x03
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	40 e8       	ldi	r20, 0x80	; 128
    12f2:	5f e3       	ldi	r21, 0x3F	; 63
    12f4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    12f8:	88 23       	and	r24, r24
    12fa:	44 f4       	brge	.+16     	; 0x130c <lcd_sendCommand+0x224>
		__ticks = 1;
    12fc:	fe 01       	movw	r30, r28
    12fe:	eb 5a       	subi	r30, 0xAB	; 171
    1300:	ff 4f       	sbci	r31, 0xFF	; 255
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	91 83       	std	Z+1, r25	; 0x01
    1308:	80 83       	st	Z, r24
    130a:	64 c0       	rjmp	.+200    	; 0x13d4 <lcd_sendCommand+0x2ec>
	else if (__tmp > 65535)
    130c:	fe 01       	movw	r30, r28
    130e:	e9 5a       	subi	r30, 0xA9	; 169
    1310:	ff 4f       	sbci	r31, 0xFF	; 255
    1312:	60 81       	ld	r22, Z
    1314:	71 81       	ldd	r23, Z+1	; 0x01
    1316:	82 81       	ldd	r24, Z+2	; 0x02
    1318:	93 81       	ldd	r25, Z+3	; 0x03
    131a:	20 e0       	ldi	r18, 0x00	; 0
    131c:	3f ef       	ldi	r19, 0xFF	; 255
    131e:	4f e7       	ldi	r20, 0x7F	; 127
    1320:	57 e4       	ldi	r21, 0x47	; 71
    1322:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1326:	18 16       	cp	r1, r24
    1328:	0c f0       	brlt	.+2      	; 0x132c <lcd_sendCommand+0x244>
    132a:	43 c0       	rjmp	.+134    	; 0x13b2 <lcd_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    132c:	fe 01       	movw	r30, r28
    132e:	e5 5a       	subi	r30, 0xA5	; 165
    1330:	ff 4f       	sbci	r31, 0xFF	; 255
    1332:	60 81       	ld	r22, Z
    1334:	71 81       	ldd	r23, Z+1	; 0x01
    1336:	82 81       	ldd	r24, Z+2	; 0x02
    1338:	93 81       	ldd	r25, Z+3	; 0x03
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	40 e2       	ldi	r20, 0x20	; 32
    1340:	51 e4       	ldi	r21, 0x41	; 65
    1342:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	8e 01       	movw	r16, r28
    134c:	0b 5a       	subi	r16, 0xAB	; 171
    134e:	1f 4f       	sbci	r17, 0xFF	; 255
    1350:	bc 01       	movw	r22, r24
    1352:	cd 01       	movw	r24, r26
    1354:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	f8 01       	movw	r30, r16
    135e:	91 83       	std	Z+1, r25	; 0x01
    1360:	80 83       	st	Z, r24
    1362:	1f c0       	rjmp	.+62     	; 0x13a2 <lcd_sendCommand+0x2ba>
    1364:	fe 01       	movw	r30, r28
    1366:	ed 5a       	subi	r30, 0xAD	; 173
    1368:	ff 4f       	sbci	r31, 0xFF	; 255
    136a:	89 e1       	ldi	r24, 0x19	; 25
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	91 83       	std	Z+1, r25	; 0x01
    1370:	80 83       	st	Z, r24
    1372:	fe 01       	movw	r30, r28
    1374:	ed 5a       	subi	r30, 0xAD	; 173
    1376:	ff 4f       	sbci	r31, 0xFF	; 255
    1378:	80 81       	ld	r24, Z
    137a:	91 81       	ldd	r25, Z+1	; 0x01
    137c:	01 97       	sbiw	r24, 0x01	; 1
    137e:	f1 f7       	brne	.-4      	; 0x137c <lcd_sendCommand+0x294>
    1380:	fe 01       	movw	r30, r28
    1382:	ed 5a       	subi	r30, 0xAD	; 173
    1384:	ff 4f       	sbci	r31, 0xFF	; 255
    1386:	91 83       	std	Z+1, r25	; 0x01
    1388:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    138a:	de 01       	movw	r26, r28
    138c:	ab 5a       	subi	r26, 0xAB	; 171
    138e:	bf 4f       	sbci	r27, 0xFF	; 255
    1390:	fe 01       	movw	r30, r28
    1392:	eb 5a       	subi	r30, 0xAB	; 171
    1394:	ff 4f       	sbci	r31, 0xFF	; 255
    1396:	80 81       	ld	r24, Z
    1398:	91 81       	ldd	r25, Z+1	; 0x01
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	11 96       	adiw	r26, 0x01	; 1
    139e:	9c 93       	st	X, r25
    13a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a2:	fe 01       	movw	r30, r28
    13a4:	eb 5a       	subi	r30, 0xAB	; 171
    13a6:	ff 4f       	sbci	r31, 0xFF	; 255
    13a8:	80 81       	ld	r24, Z
    13aa:	91 81       	ldd	r25, Z+1	; 0x01
    13ac:	00 97       	sbiw	r24, 0x00	; 0
    13ae:	d1 f6       	brne	.-76     	; 0x1364 <lcd_sendCommand+0x27c>
    13b0:	27 c0       	rjmp	.+78     	; 0x1400 <lcd_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13b2:	8e 01       	movw	r16, r28
    13b4:	0b 5a       	subi	r16, 0xAB	; 171
    13b6:	1f 4f       	sbci	r17, 0xFF	; 255
    13b8:	fe 01       	movw	r30, r28
    13ba:	e9 5a       	subi	r30, 0xA9	; 169
    13bc:	ff 4f       	sbci	r31, 0xFF	; 255
    13be:	60 81       	ld	r22, Z
    13c0:	71 81       	ldd	r23, Z+1	; 0x01
    13c2:	82 81       	ldd	r24, Z+2	; 0x02
    13c4:	93 81       	ldd	r25, Z+3	; 0x03
    13c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
    13ce:	f8 01       	movw	r30, r16
    13d0:	91 83       	std	Z+1, r25	; 0x01
    13d2:	80 83       	st	Z, r24
    13d4:	de 01       	movw	r26, r28
    13d6:	af 5a       	subi	r26, 0xAF	; 175
    13d8:	bf 4f       	sbci	r27, 0xFF	; 255
    13da:	fe 01       	movw	r30, r28
    13dc:	eb 5a       	subi	r30, 0xAB	; 171
    13de:	ff 4f       	sbci	r31, 0xFF	; 255
    13e0:	80 81       	ld	r24, Z
    13e2:	91 81       	ldd	r25, Z+1	; 0x01
    13e4:	8d 93       	st	X+, r24
    13e6:	9c 93       	st	X, r25
    13e8:	fe 01       	movw	r30, r28
    13ea:	ef 5a       	subi	r30, 0xAF	; 175
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	80 81       	ld	r24, Z
    13f0:	91 81       	ldd	r25, Z+1	; 0x01
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	f1 f7       	brne	.-4      	; 0x13f2 <lcd_sendCommand+0x30a>
    13f6:	fe 01       	movw	r30, r28
    13f8:	ef 5a       	subi	r30, 0xAF	; 175
    13fa:	ff 4f       	sbci	r31, 0xFF	; 255
    13fc:	91 83       	std	Z+1, r25	; 0x01
    13fe:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_CTRL_PORT&=~(1<<E); //clear en
	_delay_ms(1);
#elif(USED_MODE==4)
	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|(command&0xF0);
    1400:	a5 e3       	ldi	r26, 0x35	; 53
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	e5 e3       	ldi	r30, 0x35	; 53
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	98 2f       	mov	r25, r24
    140c:	9f 70       	andi	r25, 0x0F	; 15
    140e:	fe 01       	movw	r30, r28
    1410:	e3 59       	subi	r30, 0x93	; 147
    1412:	ff 4f       	sbci	r31, 0xFF	; 255
    1414:	80 81       	ld	r24, Z
    1416:	80 7f       	andi	r24, 0xF0	; 240
    1418:	89 2b       	or	r24, r25
    141a:	8c 93       	st	X, r24
    141c:	fe 01       	movw	r30, r28
    141e:	e3 5b       	subi	r30, 0xB3	; 179
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	a0 e8       	ldi	r26, 0x80	; 128
    1428:	bf e3       	ldi	r27, 0x3F	; 63
    142a:	80 83       	st	Z, r24
    142c:	91 83       	std	Z+1, r25	; 0x01
    142e:	a2 83       	std	Z+2, r26	; 0x02
    1430:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1432:	8e 01       	movw	r16, r28
    1434:	07 5b       	subi	r16, 0xB7	; 183
    1436:	1f 4f       	sbci	r17, 0xFF	; 255
    1438:	fe 01       	movw	r30, r28
    143a:	e3 5b       	subi	r30, 0xB3	; 179
    143c:	ff 4f       	sbci	r31, 0xFF	; 255
    143e:	60 81       	ld	r22, Z
    1440:	71 81       	ldd	r23, Z+1	; 0x01
    1442:	82 81       	ldd	r24, Z+2	; 0x02
    1444:	93 81       	ldd	r25, Z+3	; 0x03
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	4a e7       	ldi	r20, 0x7A	; 122
    144c:	53 e4       	ldi	r21, 0x43	; 67
    144e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	f8 01       	movw	r30, r16
    1458:	80 83       	st	Z, r24
    145a:	91 83       	std	Z+1, r25	; 0x01
    145c:	a2 83       	std	Z+2, r26	; 0x02
    145e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1460:	fe 01       	movw	r30, r28
    1462:	e7 5b       	subi	r30, 0xB7	; 183
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	60 81       	ld	r22, Z
    1468:	71 81       	ldd	r23, Z+1	; 0x01
    146a:	82 81       	ldd	r24, Z+2	; 0x02
    146c:	93 81       	ldd	r25, Z+3	; 0x03
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	40 e8       	ldi	r20, 0x80	; 128
    1474:	5f e3       	ldi	r21, 0x3F	; 63
    1476:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    147a:	88 23       	and	r24, r24
    147c:	44 f4       	brge	.+16     	; 0x148e <lcd_sendCommand+0x3a6>
		__ticks = 1;
    147e:	fe 01       	movw	r30, r28
    1480:	e9 5b       	subi	r30, 0xB9	; 185
    1482:	ff 4f       	sbci	r31, 0xFF	; 255
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	91 83       	std	Z+1, r25	; 0x01
    148a:	80 83       	st	Z, r24
    148c:	64 c0       	rjmp	.+200    	; 0x1556 <lcd_sendCommand+0x46e>
	else if (__tmp > 65535)
    148e:	fe 01       	movw	r30, r28
    1490:	e7 5b       	subi	r30, 0xB7	; 183
    1492:	ff 4f       	sbci	r31, 0xFF	; 255
    1494:	60 81       	ld	r22, Z
    1496:	71 81       	ldd	r23, Z+1	; 0x01
    1498:	82 81       	ldd	r24, Z+2	; 0x02
    149a:	93 81       	ldd	r25, Z+3	; 0x03
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	3f ef       	ldi	r19, 0xFF	; 255
    14a0:	4f e7       	ldi	r20, 0x7F	; 127
    14a2:	57 e4       	ldi	r21, 0x47	; 71
    14a4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    14a8:	18 16       	cp	r1, r24
    14aa:	0c f0       	brlt	.+2      	; 0x14ae <lcd_sendCommand+0x3c6>
    14ac:	43 c0       	rjmp	.+134    	; 0x1534 <lcd_sendCommand+0x44c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ae:	fe 01       	movw	r30, r28
    14b0:	e3 5b       	subi	r30, 0xB3	; 179
    14b2:	ff 4f       	sbci	r31, 0xFF	; 255
    14b4:	60 81       	ld	r22, Z
    14b6:	71 81       	ldd	r23, Z+1	; 0x01
    14b8:	82 81       	ldd	r24, Z+2	; 0x02
    14ba:	93 81       	ldd	r25, Z+3	; 0x03
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	40 e2       	ldi	r20, 0x20	; 32
    14c2:	51 e4       	ldi	r21, 0x41	; 65
    14c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	8e 01       	movw	r16, r28
    14ce:	09 5b       	subi	r16, 0xB9	; 185
    14d0:	1f 4f       	sbci	r17, 0xFF	; 255
    14d2:	bc 01       	movw	r22, r24
    14d4:	cd 01       	movw	r24, r26
    14d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	f8 01       	movw	r30, r16
    14e0:	91 83       	std	Z+1, r25	; 0x01
    14e2:	80 83       	st	Z, r24
    14e4:	1f c0       	rjmp	.+62     	; 0x1524 <lcd_sendCommand+0x43c>
    14e6:	fe 01       	movw	r30, r28
    14e8:	eb 5b       	subi	r30, 0xBB	; 187
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	89 e1       	ldi	r24, 0x19	; 25
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	91 83       	std	Z+1, r25	; 0x01
    14f2:	80 83       	st	Z, r24
    14f4:	fe 01       	movw	r30, r28
    14f6:	eb 5b       	subi	r30, 0xBB	; 187
    14f8:	ff 4f       	sbci	r31, 0xFF	; 255
    14fa:	80 81       	ld	r24, Z
    14fc:	91 81       	ldd	r25, Z+1	; 0x01
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	f1 f7       	brne	.-4      	; 0x14fe <lcd_sendCommand+0x416>
    1502:	fe 01       	movw	r30, r28
    1504:	eb 5b       	subi	r30, 0xBB	; 187
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	91 83       	std	Z+1, r25	; 0x01
    150a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    150c:	de 01       	movw	r26, r28
    150e:	a9 5b       	subi	r26, 0xB9	; 185
    1510:	bf 4f       	sbci	r27, 0xFF	; 255
    1512:	fe 01       	movw	r30, r28
    1514:	e9 5b       	subi	r30, 0xB9	; 185
    1516:	ff 4f       	sbci	r31, 0xFF	; 255
    1518:	80 81       	ld	r24, Z
    151a:	91 81       	ldd	r25, Z+1	; 0x01
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	11 96       	adiw	r26, 0x01	; 1
    1520:	9c 93       	st	X, r25
    1522:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1524:	fe 01       	movw	r30, r28
    1526:	e9 5b       	subi	r30, 0xB9	; 185
    1528:	ff 4f       	sbci	r31, 0xFF	; 255
    152a:	80 81       	ld	r24, Z
    152c:	91 81       	ldd	r25, Z+1	; 0x01
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	d1 f6       	brne	.-76     	; 0x14e6 <lcd_sendCommand+0x3fe>
    1532:	27 c0       	rjmp	.+78     	; 0x1582 <lcd_sendCommand+0x49a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1534:	8e 01       	movw	r16, r28
    1536:	09 5b       	subi	r16, 0xB9	; 185
    1538:	1f 4f       	sbci	r17, 0xFF	; 255
    153a:	fe 01       	movw	r30, r28
    153c:	e7 5b       	subi	r30, 0xB7	; 183
    153e:	ff 4f       	sbci	r31, 0xFF	; 255
    1540:	60 81       	ld	r22, Z
    1542:	71 81       	ldd	r23, Z+1	; 0x01
    1544:	82 81       	ldd	r24, Z+2	; 0x02
    1546:	93 81       	ldd	r25, Z+3	; 0x03
    1548:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	f8 01       	movw	r30, r16
    1552:	91 83       	std	Z+1, r25	; 0x01
    1554:	80 83       	st	Z, r24
    1556:	de 01       	movw	r26, r28
    1558:	ad 5b       	subi	r26, 0xBD	; 189
    155a:	bf 4f       	sbci	r27, 0xFF	; 255
    155c:	fe 01       	movw	r30, r28
    155e:	e9 5b       	subi	r30, 0xB9	; 185
    1560:	ff 4f       	sbci	r31, 0xFF	; 255
    1562:	80 81       	ld	r24, Z
    1564:	91 81       	ldd	r25, Z+1	; 0x01
    1566:	8d 93       	st	X+, r24
    1568:	9c 93       	st	X, r25
    156a:	fe 01       	movw	r30, r28
    156c:	ed 5b       	subi	r30, 0xBD	; 189
    156e:	ff 4f       	sbci	r31, 0xFF	; 255
    1570:	80 81       	ld	r24, Z
    1572:	91 81       	ldd	r25, Z+1	; 0x01
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	f1 f7       	brne	.-4      	; 0x1574 <lcd_sendCommand+0x48c>
    1578:	fe 01       	movw	r30, r28
    157a:	ed 5b       	subi	r30, 0xBD	; 189
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	91 83       	std	Z+1, r25	; 0x01
    1580:	80 83       	st	Z, r24
	LCD_DATA_PORT=(LCD_DATA_PORT&0xF0)|((command&0xF0)>>4); /*Because we want to insert the last 4 bits of command with the first 4 bits in port*/
	#endif

	/*least 4 bits of command*/
		_delay_ms(1);
		LCD_CTRL_PORT&=~(1<<E); //clear en
    1582:	a2 e3       	ldi	r26, 0x32	; 50
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e2 e3       	ldi	r30, 0x32	; 50
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	8f 7b       	andi	r24, 0xBF	; 191
    158e:	8c 93       	st	X, r24
    1590:	fe 01       	movw	r30, r28
    1592:	ff 96       	adiw	r30, 0x3f	; 63
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	a0 e8       	ldi	r26, 0x80	; 128
    159a:	bf e3       	ldi	r27, 0x3F	; 63
    159c:	80 83       	st	Z, r24
    159e:	91 83       	std	Z+1, r25	; 0x01
    15a0:	a2 83       	std	Z+2, r26	; 0x02
    15a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a4:	fe 01       	movw	r30, r28
    15a6:	ff 96       	adiw	r30, 0x3f	; 63
    15a8:	60 81       	ld	r22, Z
    15aa:	71 81       	ldd	r23, Z+1	; 0x01
    15ac:	82 81       	ldd	r24, Z+2	; 0x02
    15ae:	93 81       	ldd	r25, Z+3	; 0x03
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	4a e7       	ldi	r20, 0x7A	; 122
    15b6:	53 e4       	ldi	r21, 0x43	; 67
    15b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15bc:	dc 01       	movw	r26, r24
    15be:	cb 01       	movw	r24, r22
    15c0:	8b af       	std	Y+59, r24	; 0x3b
    15c2:	9c af       	std	Y+60, r25	; 0x3c
    15c4:	ad af       	std	Y+61, r26	; 0x3d
    15c6:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
    15c8:	6b ad       	ldd	r22, Y+59	; 0x3b
    15ca:	7c ad       	ldd	r23, Y+60	; 0x3c
    15cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    15ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	40 e8       	ldi	r20, 0x80	; 128
    15d6:	5f e3       	ldi	r21, 0x3F	; 63
    15d8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15dc:	88 23       	and	r24, r24
    15de:	2c f4       	brge	.+10     	; 0x15ea <lcd_sendCommand+0x502>
		__ticks = 1;
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	9a af       	std	Y+58, r25	; 0x3a
    15e6:	89 af       	std	Y+57, r24	; 0x39
    15e8:	41 c0       	rjmp	.+130    	; 0x166c <lcd_sendCommand+0x584>
	else if (__tmp > 65535)
    15ea:	6b ad       	ldd	r22, Y+59	; 0x3b
    15ec:	7c ad       	ldd	r23, Y+60	; 0x3c
    15ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    15f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	3f ef       	ldi	r19, 0xFF	; 255
    15f6:	4f e7       	ldi	r20, 0x7F	; 127
    15f8:	57 e4       	ldi	r21, 0x47	; 71
    15fa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15fe:	18 16       	cp	r1, r24
    1600:	5c f5       	brge	.+86     	; 0x1658 <lcd_sendCommand+0x570>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1602:	fe 01       	movw	r30, r28
    1604:	ff 96       	adiw	r30, 0x3f	; 63
    1606:	60 81       	ld	r22, Z
    1608:	71 81       	ldd	r23, Z+1	; 0x01
    160a:	82 81       	ldd	r24, Z+2	; 0x02
    160c:	93 81       	ldd	r25, Z+3	; 0x03
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	40 e2       	ldi	r20, 0x20	; 32
    1614:	51 e4       	ldi	r21, 0x41	; 65
    1616:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	bc 01       	movw	r22, r24
    1620:	cd 01       	movw	r24, r26
    1622:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	9a af       	std	Y+58, r25	; 0x3a
    162c:	89 af       	std	Y+57, r24	; 0x39
    162e:	0f c0       	rjmp	.+30     	; 0x164e <lcd_sendCommand+0x566>
    1630:	89 e1       	ldi	r24, 0x19	; 25
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	98 af       	std	Y+56, r25	; 0x38
    1636:	8f ab       	std	Y+55, r24	; 0x37
    1638:	8f a9       	ldd	r24, Y+55	; 0x37
    163a:	98 ad       	ldd	r25, Y+56	; 0x38
    163c:	01 97       	sbiw	r24, 0x01	; 1
    163e:	f1 f7       	brne	.-4      	; 0x163c <lcd_sendCommand+0x554>
    1640:	98 af       	std	Y+56, r25	; 0x38
    1642:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1644:	89 ad       	ldd	r24, Y+57	; 0x39
    1646:	9a ad       	ldd	r25, Y+58	; 0x3a
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	9a af       	std	Y+58, r25	; 0x3a
    164c:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    164e:	89 ad       	ldd	r24, Y+57	; 0x39
    1650:	9a ad       	ldd	r25, Y+58	; 0x3a
    1652:	00 97       	sbiw	r24, 0x00	; 0
    1654:	69 f7       	brne	.-38     	; 0x1630 <lcd_sendCommand+0x548>
    1656:	14 c0       	rjmp	.+40     	; 0x1680 <lcd_sendCommand+0x598>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1658:	6b ad       	ldd	r22, Y+59	; 0x3b
    165a:	7c ad       	ldd	r23, Y+60	; 0x3c
    165c:	8d ad       	ldd	r24, Y+61	; 0x3d
    165e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1660:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	9a af       	std	Y+58, r25	; 0x3a
    166a:	89 af       	std	Y+57, r24	; 0x39
    166c:	89 ad       	ldd	r24, Y+57	; 0x39
    166e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1670:	9e ab       	std	Y+54, r25	; 0x36
    1672:	8d ab       	std	Y+53, r24	; 0x35
    1674:	8d a9       	ldd	r24, Y+53	; 0x35
    1676:	9e a9       	ldd	r25, Y+54	; 0x36
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	f1 f7       	brne	.-4      	; 0x1678 <lcd_sendCommand+0x590>
    167c:	9e ab       	std	Y+54, r25	; 0x36
    167e:	8d ab       	std	Y+53, r24	; 0x35
		_delay_ms(1);
		LCD_CTRL_PORT|=(1<<E);//set en to send the rest of the data
    1680:	a2 e3       	ldi	r26, 0x32	; 50
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e2 e3       	ldi	r30, 0x32	; 50
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	80 64       	ori	r24, 0x40	; 64
    168c:	8c 93       	st	X, r24
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	a0 e8       	ldi	r26, 0x80	; 128
    1694:	bf e3       	ldi	r27, 0x3F	; 63
    1696:	89 ab       	std	Y+49, r24	; 0x31
    1698:	9a ab       	std	Y+50, r25	; 0x32
    169a:	ab ab       	std	Y+51, r26	; 0x33
    169c:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    169e:	69 a9       	ldd	r22, Y+49	; 0x31
    16a0:	7a a9       	ldd	r23, Y+50	; 0x32
    16a2:	8b a9       	ldd	r24, Y+51	; 0x33
    16a4:	9c a9       	ldd	r25, Y+52	; 0x34
    16a6:	2b ea       	ldi	r18, 0xAB	; 171
    16a8:	3a ea       	ldi	r19, 0xAA	; 170
    16aa:	4a ea       	ldi	r20, 0xAA	; 170
    16ac:	5e e3       	ldi	r21, 0x3E	; 62
    16ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	8d a7       	std	Y+45, r24	; 0x2d
    16b8:	9e a7       	std	Y+46, r25	; 0x2e
    16ba:	af a7       	std	Y+47, r26	; 0x2f
    16bc:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    16be:	6d a5       	ldd	r22, Y+45	; 0x2d
    16c0:	7e a5       	ldd	r23, Y+46	; 0x2e
    16c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    16c4:	98 a9       	ldd	r25, Y+48	; 0x30
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	40 e8       	ldi	r20, 0x80	; 128
    16cc:	5f e3       	ldi	r21, 0x3F	; 63
    16ce:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16d2:	88 23       	and	r24, r24
    16d4:	1c f4       	brge	.+6      	; 0x16dc <lcd_sendCommand+0x5f4>
		__ticks = 1;
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	8c a7       	std	Y+44, r24	; 0x2c
    16da:	91 c0       	rjmp	.+290    	; 0x17fe <lcd_sendCommand+0x716>
	else if (__tmp > 255)
    16dc:	6d a5       	ldd	r22, Y+45	; 0x2d
    16de:	7e a5       	ldd	r23, Y+46	; 0x2e
    16e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    16e2:	98 a9       	ldd	r25, Y+48	; 0x30
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	4f e7       	ldi	r20, 0x7F	; 127
    16ea:	53 e4       	ldi	r21, 0x43	; 67
    16ec:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16f0:	18 16       	cp	r1, r24
    16f2:	0c f0       	brlt	.+2      	; 0x16f6 <lcd_sendCommand+0x60e>
    16f4:	7b c0       	rjmp	.+246    	; 0x17ec <lcd_sendCommand+0x704>
	{
		_delay_ms(__us / 1000.0);
    16f6:	69 a9       	ldd	r22, Y+49	; 0x31
    16f8:	7a a9       	ldd	r23, Y+50	; 0x32
    16fa:	8b a9       	ldd	r24, Y+51	; 0x33
    16fc:	9c a9       	ldd	r25, Y+52	; 0x34
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	4a e7       	ldi	r20, 0x7A	; 122
    1704:	54 e4       	ldi	r21, 0x44	; 68
    1706:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	88 a7       	std	Y+40, r24	; 0x28
    1710:	99 a7       	std	Y+41, r25	; 0x29
    1712:	aa a7       	std	Y+42, r26	; 0x2a
    1714:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1716:	68 a5       	ldd	r22, Y+40	; 0x28
    1718:	79 a5       	ldd	r23, Y+41	; 0x29
    171a:	8a a5       	ldd	r24, Y+42	; 0x2a
    171c:	9b a5       	ldd	r25, Y+43	; 0x2b
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	4a e7       	ldi	r20, 0x7A	; 122
    1724:	53 e4       	ldi	r21, 0x43	; 67
    1726:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	8c a3       	std	Y+36, r24	; 0x24
    1730:	9d a3       	std	Y+37, r25	; 0x25
    1732:	ae a3       	std	Y+38, r26	; 0x26
    1734:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    1736:	6c a1       	ldd	r22, Y+36	; 0x24
    1738:	7d a1       	ldd	r23, Y+37	; 0x25
    173a:	8e a1       	ldd	r24, Y+38	; 0x26
    173c:	9f a1       	ldd	r25, Y+39	; 0x27
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	40 e8       	ldi	r20, 0x80	; 128
    1744:	5f e3       	ldi	r21, 0x3F	; 63
    1746:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    174a:	88 23       	and	r24, r24
    174c:	2c f4       	brge	.+10     	; 0x1758 <lcd_sendCommand+0x670>
		__ticks = 1;
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	9b a3       	std	Y+35, r25	; 0x23
    1754:	8a a3       	std	Y+34, r24	; 0x22
    1756:	3f c0       	rjmp	.+126    	; 0x17d6 <lcd_sendCommand+0x6ee>
	else if (__tmp > 65535)
    1758:	6c a1       	ldd	r22, Y+36	; 0x24
    175a:	7d a1       	ldd	r23, Y+37	; 0x25
    175c:	8e a1       	ldd	r24, Y+38	; 0x26
    175e:	9f a1       	ldd	r25, Y+39	; 0x27
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	3f ef       	ldi	r19, 0xFF	; 255
    1764:	4f e7       	ldi	r20, 0x7F	; 127
    1766:	57 e4       	ldi	r21, 0x47	; 71
    1768:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    176c:	18 16       	cp	r1, r24
    176e:	4c f5       	brge	.+82     	; 0x17c2 <lcd_sendCommand+0x6da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1770:	68 a5       	ldd	r22, Y+40	; 0x28
    1772:	79 a5       	ldd	r23, Y+41	; 0x29
    1774:	8a a5       	ldd	r24, Y+42	; 0x2a
    1776:	9b a5       	ldd	r25, Y+43	; 0x2b
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	40 e2       	ldi	r20, 0x20	; 32
    177e:	51 e4       	ldi	r21, 0x41	; 65
    1780:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	bc 01       	movw	r22, r24
    178a:	cd 01       	movw	r24, r26
    178c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	9b a3       	std	Y+35, r25	; 0x23
    1796:	8a a3       	std	Y+34, r24	; 0x22
    1798:	0f c0       	rjmp	.+30     	; 0x17b8 <lcd_sendCommand+0x6d0>
    179a:	89 e1       	ldi	r24, 0x19	; 25
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	99 a3       	std	Y+33, r25	; 0x21
    17a0:	88 a3       	std	Y+32, r24	; 0x20
    17a2:	88 a1       	ldd	r24, Y+32	; 0x20
    17a4:	99 a1       	ldd	r25, Y+33	; 0x21
    17a6:	01 97       	sbiw	r24, 0x01	; 1
    17a8:	f1 f7       	brne	.-4      	; 0x17a6 <lcd_sendCommand+0x6be>
    17aa:	99 a3       	std	Y+33, r25	; 0x21
    17ac:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ae:	8a a1       	ldd	r24, Y+34	; 0x22
    17b0:	9b a1       	ldd	r25, Y+35	; 0x23
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	9b a3       	std	Y+35, r25	; 0x23
    17b6:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b8:	8a a1       	ldd	r24, Y+34	; 0x22
    17ba:	9b a1       	ldd	r25, Y+35	; 0x23
    17bc:	00 97       	sbiw	r24, 0x00	; 0
    17be:	69 f7       	brne	.-38     	; 0x179a <lcd_sendCommand+0x6b2>
    17c0:	24 c0       	rjmp	.+72     	; 0x180a <lcd_sendCommand+0x722>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c2:	6c a1       	ldd	r22, Y+36	; 0x24
    17c4:	7d a1       	ldd	r23, Y+37	; 0x25
    17c6:	8e a1       	ldd	r24, Y+38	; 0x26
    17c8:	9f a1       	ldd	r25, Y+39	; 0x27
    17ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ce:	dc 01       	movw	r26, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	9b a3       	std	Y+35, r25	; 0x23
    17d4:	8a a3       	std	Y+34, r24	; 0x22
    17d6:	8a a1       	ldd	r24, Y+34	; 0x22
    17d8:	9b a1       	ldd	r25, Y+35	; 0x23
    17da:	9f 8f       	std	Y+31, r25	; 0x1f
    17dc:	8e 8f       	std	Y+30, r24	; 0x1e
    17de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17e0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17e2:	01 97       	sbiw	r24, 0x01	; 1
    17e4:	f1 f7       	brne	.-4      	; 0x17e2 <lcd_sendCommand+0x6fa>
    17e6:	9f 8f       	std	Y+31, r25	; 0x1f
    17e8:	8e 8f       	std	Y+30, r24	; 0x1e
    17ea:	0f c0       	rjmp	.+30     	; 0x180a <lcd_sendCommand+0x722>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17ec:	6d a5       	ldd	r22, Y+45	; 0x2d
    17ee:	7e a5       	ldd	r23, Y+46	; 0x2e
    17f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    17f2:	98 a9       	ldd	r25, Y+48	; 0x30
    17f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	8c a7       	std	Y+44, r24	; 0x2c
    17fe:	8c a5       	ldd	r24, Y+44	; 0x2c
    1800:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1802:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1804:	8a 95       	dec	r24
    1806:	f1 f7       	brne	.-4      	; 0x1804 <lcd_sendCommand+0x71c>
    1808:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_us(1);
		#ifdef UPPER_PORT_PINS
		LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|((command&0x0F)<<4);
    180a:	a5 e3       	ldi	r26, 0x35	; 53
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e5 e3       	ldi	r30, 0x35	; 53
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	28 2f       	mov	r18, r24
    1816:	2f 70       	andi	r18, 0x0F	; 15
    1818:	fe 01       	movw	r30, r28
    181a:	e3 59       	subi	r30, 0x93	; 147
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	80 81       	ld	r24, Z
    1820:	88 2f       	mov	r24, r24
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	82 95       	swap	r24
    1826:	92 95       	swap	r25
    1828:	90 7f       	andi	r25, 0xF0	; 240
    182a:	98 27       	eor	r25, r24
    182c:	80 7f       	andi	r24, 0xF0	; 240
    182e:	98 27       	eor	r25, r24
    1830:	82 2b       	or	r24, r18
    1832:	8c 93       	st	X, r24
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	a0 e8       	ldi	r26, 0x80	; 128
    183a:	bf e3       	ldi	r27, 0x3F	; 63
    183c:	89 8f       	std	Y+25, r24	; 0x19
    183e:	9a 8f       	std	Y+26, r25	; 0x1a
    1840:	ab 8f       	std	Y+27, r26	; 0x1b
    1842:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1844:	69 8d       	ldd	r22, Y+25	; 0x19
    1846:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1848:	8b 8d       	ldd	r24, Y+27	; 0x1b
    184a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	4a e7       	ldi	r20, 0x7A	; 122
    1852:	53 e4       	ldi	r21, 0x43	; 67
    1854:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	8d 8b       	std	Y+21, r24	; 0x15
    185e:	9e 8b       	std	Y+22, r25	; 0x16
    1860:	af 8b       	std	Y+23, r26	; 0x17
    1862:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1864:	6d 89       	ldd	r22, Y+21	; 0x15
    1866:	7e 89       	ldd	r23, Y+22	; 0x16
    1868:	8f 89       	ldd	r24, Y+23	; 0x17
    186a:	98 8d       	ldd	r25, Y+24	; 0x18
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	40 e8       	ldi	r20, 0x80	; 128
    1872:	5f e3       	ldi	r21, 0x3F	; 63
    1874:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1878:	88 23       	and	r24, r24
    187a:	2c f4       	brge	.+10     	; 0x1886 <lcd_sendCommand+0x79e>
		__ticks = 1;
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	9c 8b       	std	Y+20, r25	; 0x14
    1882:	8b 8b       	std	Y+19, r24	; 0x13
    1884:	3f c0       	rjmp	.+126    	; 0x1904 <lcd_sendCommand+0x81c>
	else if (__tmp > 65535)
    1886:	6d 89       	ldd	r22, Y+21	; 0x15
    1888:	7e 89       	ldd	r23, Y+22	; 0x16
    188a:	8f 89       	ldd	r24, Y+23	; 0x17
    188c:	98 8d       	ldd	r25, Y+24	; 0x18
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	3f ef       	ldi	r19, 0xFF	; 255
    1892:	4f e7       	ldi	r20, 0x7F	; 127
    1894:	57 e4       	ldi	r21, 0x47	; 71
    1896:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    189a:	18 16       	cp	r1, r24
    189c:	4c f5       	brge	.+82     	; 0x18f0 <lcd_sendCommand+0x808>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189e:	69 8d       	ldd	r22, Y+25	; 0x19
    18a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e2       	ldi	r20, 0x20	; 32
    18ac:	51 e4       	ldi	r21, 0x41	; 65
    18ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	bc 01       	movw	r22, r24
    18b8:	cd 01       	movw	r24, r26
    18ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	9c 8b       	std	Y+20, r25	; 0x14
    18c4:	8b 8b       	std	Y+19, r24	; 0x13
    18c6:	0f c0       	rjmp	.+30     	; 0x18e6 <lcd_sendCommand+0x7fe>
    18c8:	89 e1       	ldi	r24, 0x19	; 25
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	9a 8b       	std	Y+18, r25	; 0x12
    18ce:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18d0:	89 89       	ldd	r24, Y+17	; 0x11
    18d2:	9a 89       	ldd	r25, Y+18	; 0x12
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <lcd_sendCommand+0x7ec>
    18d8:	9a 8b       	std	Y+18, r25	; 0x12
    18da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18dc:	8b 89       	ldd	r24, Y+19	; 0x13
    18de:	9c 89       	ldd	r25, Y+20	; 0x14
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	9c 8b       	std	Y+20, r25	; 0x14
    18e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e6:	8b 89       	ldd	r24, Y+19	; 0x13
    18e8:	9c 89       	ldd	r25, Y+20	; 0x14
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	69 f7       	brne	.-38     	; 0x18c8 <lcd_sendCommand+0x7e0>
    18ee:	14 c0       	rjmp	.+40     	; 0x1918 <lcd_sendCommand+0x830>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f0:	6d 89       	ldd	r22, Y+21	; 0x15
    18f2:	7e 89       	ldd	r23, Y+22	; 0x16
    18f4:	8f 89       	ldd	r24, Y+23	; 0x17
    18f6:	98 8d       	ldd	r25, Y+24	; 0x18
    18f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	9c 8b       	std	Y+20, r25	; 0x14
    1902:	8b 8b       	std	Y+19, r24	; 0x13
    1904:	8b 89       	ldd	r24, Y+19	; 0x13
    1906:	9c 89       	ldd	r25, Y+20	; 0x14
    1908:	98 8b       	std	Y+16, r25	; 0x10
    190a:	8f 87       	std	Y+15, r24	; 0x0f
    190c:	8f 85       	ldd	r24, Y+15	; 0x0f
    190e:	98 89       	ldd	r25, Y+16	; 0x10
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	f1 f7       	brne	.-4      	; 0x1910 <lcd_sendCommand+0x828>
    1914:	98 8b       	std	Y+16, r25	; 0x10
    1916:	8f 87       	std	Y+15, r24	; 0x0f
		#elif
		LCD_DATA_PORT=(LCD_DATA_PORT&0xF0)|(command&0x0F);
		#endif
		_delay_ms(1);
		LCD_CTRL_PORT&=~(1<<E); //clear en
    1918:	a2 e3       	ldi	r26, 0x32	; 50
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e2 e3       	ldi	r30, 0x32	; 50
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	8f 7b       	andi	r24, 0xBF	; 191
    1924:	8c 93       	st	X, r24
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	a0 e8       	ldi	r26, 0x80	; 128
    192c:	bf e3       	ldi	r27, 0x3F	; 63
    192e:	8b 87       	std	Y+11, r24	; 0x0b
    1930:	9c 87       	std	Y+12, r25	; 0x0c
    1932:	ad 87       	std	Y+13, r26	; 0x0d
    1934:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1936:	6b 85       	ldd	r22, Y+11	; 0x0b
    1938:	7c 85       	ldd	r23, Y+12	; 0x0c
    193a:	8d 85       	ldd	r24, Y+13	; 0x0d
    193c:	9e 85       	ldd	r25, Y+14	; 0x0e
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	4a e7       	ldi	r20, 0x7A	; 122
    1944:	53 e4       	ldi	r21, 0x43	; 67
    1946:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	8f 83       	std	Y+7, r24	; 0x07
    1950:	98 87       	std	Y+8, r25	; 0x08
    1952:	a9 87       	std	Y+9, r26	; 0x09
    1954:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1956:	6f 81       	ldd	r22, Y+7	; 0x07
    1958:	78 85       	ldd	r23, Y+8	; 0x08
    195a:	89 85       	ldd	r24, Y+9	; 0x09
    195c:	9a 85       	ldd	r25, Y+10	; 0x0a
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	40 e8       	ldi	r20, 0x80	; 128
    1964:	5f e3       	ldi	r21, 0x3F	; 63
    1966:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    196a:	88 23       	and	r24, r24
    196c:	2c f4       	brge	.+10     	; 0x1978 <lcd_sendCommand+0x890>
		__ticks = 1;
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	9e 83       	std	Y+6, r25	; 0x06
    1974:	8d 83       	std	Y+5, r24	; 0x05
    1976:	3f c0       	rjmp	.+126    	; 0x19f6 <lcd_sendCommand+0x90e>
	else if (__tmp > 65535)
    1978:	6f 81       	ldd	r22, Y+7	; 0x07
    197a:	78 85       	ldd	r23, Y+8	; 0x08
    197c:	89 85       	ldd	r24, Y+9	; 0x09
    197e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	3f ef       	ldi	r19, 0xFF	; 255
    1984:	4f e7       	ldi	r20, 0x7F	; 127
    1986:	57 e4       	ldi	r21, 0x47	; 71
    1988:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    198c:	18 16       	cp	r1, r24
    198e:	4c f5       	brge	.+82     	; 0x19e2 <lcd_sendCommand+0x8fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1990:	6b 85       	ldd	r22, Y+11	; 0x0b
    1992:	7c 85       	ldd	r23, Y+12	; 0x0c
    1994:	8d 85       	ldd	r24, Y+13	; 0x0d
    1996:	9e 85       	ldd	r25, Y+14	; 0x0e
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	40 e2       	ldi	r20, 0x20	; 32
    199e:	51 e4       	ldi	r21, 0x41	; 65
    19a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	bc 01       	movw	r22, r24
    19aa:	cd 01       	movw	r24, r26
    19ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	9e 83       	std	Y+6, r25	; 0x06
    19b6:	8d 83       	std	Y+5, r24	; 0x05
    19b8:	0f c0       	rjmp	.+30     	; 0x19d8 <lcd_sendCommand+0x8f0>
    19ba:	89 e1       	ldi	r24, 0x19	; 25
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	9c 83       	std	Y+4, r25	; 0x04
    19c0:	8b 83       	std	Y+3, r24	; 0x03
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	9c 81       	ldd	r25, Y+4	; 0x04
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	f1 f7       	brne	.-4      	; 0x19c6 <lcd_sendCommand+0x8de>
    19ca:	9c 83       	std	Y+4, r25	; 0x04
    19cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ce:	8d 81       	ldd	r24, Y+5	; 0x05
    19d0:	9e 81       	ldd	r25, Y+6	; 0x06
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	9e 83       	std	Y+6, r25	; 0x06
    19d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d8:	8d 81       	ldd	r24, Y+5	; 0x05
    19da:	9e 81       	ldd	r25, Y+6	; 0x06
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	69 f7       	brne	.-38     	; 0x19ba <lcd_sendCommand+0x8d2>
    19e0:	14 c0       	rjmp	.+40     	; 0x1a0a <lcd_sendCommand+0x922>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e2:	6f 81       	ldd	r22, Y+7	; 0x07
    19e4:	78 85       	ldd	r23, Y+8	; 0x08
    19e6:	89 85       	ldd	r24, Y+9	; 0x09
    19e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	9e 83       	std	Y+6, r25	; 0x06
    19f4:	8d 83       	std	Y+5, r24	; 0x05
    19f6:	8d 81       	ldd	r24, Y+5	; 0x05
    19f8:	9e 81       	ldd	r25, Y+6	; 0x06
    19fa:	9a 83       	std	Y+2, r25	; 0x02
    19fc:	89 83       	std	Y+1, r24	; 0x01
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	9a 81       	ldd	r25, Y+2	; 0x02
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	f1 f7       	brne	.-4      	; 0x1a02 <lcd_sendCommand+0x91a>
    1a06:	9a 83       	std	Y+2, r25	; 0x02
    1a08:	89 83       	std	Y+1, r24	; 0x01





}
    1a0a:	c3 59       	subi	r28, 0x93	; 147
    1a0c:	df 4f       	sbci	r29, 0xFF	; 255
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	f8 94       	cli
    1a12:	de bf       	out	0x3e, r29	; 62
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	cd bf       	out	0x3d, r28	; 61
    1a18:	cf 91       	pop	r28
    1a1a:	df 91       	pop	r29
    1a1c:	1f 91       	pop	r17
    1a1e:	0f 91       	pop	r16
    1a20:	08 95       	ret

00001a22 <lcd_displayChar>:


void lcd_displayChar(unsigned char data){
    1a22:	0f 93       	push	r16
    1a24:	1f 93       	push	r17
    1a26:	df 93       	push	r29
    1a28:	cf 93       	push	r28
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
    1a2e:	cd 56       	subi	r28, 0x6D	; 109
    1a30:	d0 40       	sbci	r29, 0x00	; 0
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	f8 94       	cli
    1a36:	de bf       	out	0x3e, r29	; 62
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	cd bf       	out	0x3d, r28	; 61
    1a3c:	fe 01       	movw	r30, r28
    1a3e:	e3 59       	subi	r30, 0x93	; 147
    1a40:	ff 4f       	sbci	r31, 0xFF	; 255
    1a42:	80 83       	st	Z, r24
	LCD_CTRL_PORT|=(1<<RS);
    1a44:	a2 e3       	ldi	r26, 0x32	; 50
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	e2 e3       	ldi	r30, 0x32	; 50
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	80 61       	ori	r24, 0x10	; 16
    1a50:	8c 93       	st	X, r24
	LCD_CTRL_PORT&=~(1<<RW);
    1a52:	a2 e3       	ldi	r26, 0x32	; 50
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e2 e3       	ldi	r30, 0x32	; 50
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	8f 7d       	andi	r24, 0xDF	; 223
    1a5e:	8c 93       	st	X, r24
    1a60:	fe 01       	movw	r30, r28
    1a62:	e7 59       	subi	r30, 0x97	; 151
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	a0 e8       	ldi	r26, 0x80	; 128
    1a6c:	bf e3       	ldi	r27, 0x3F	; 63
    1a6e:	80 83       	st	Z, r24
    1a70:	91 83       	std	Z+1, r25	; 0x01
    1a72:	a2 83       	std	Z+2, r26	; 0x02
    1a74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a76:	8e 01       	movw	r16, r28
    1a78:	0b 59       	subi	r16, 0x9B	; 155
    1a7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	e7 59       	subi	r30, 0x97	; 151
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	60 81       	ld	r22, Z
    1a84:	71 81       	ldd	r23, Z+1	; 0x01
    1a86:	82 81       	ldd	r24, Z+2	; 0x02
    1a88:	93 81       	ldd	r25, Z+3	; 0x03
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	4a e7       	ldi	r20, 0x7A	; 122
    1a90:	53 e4       	ldi	r21, 0x43	; 67
    1a92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	f8 01       	movw	r30, r16
    1a9c:	80 83       	st	Z, r24
    1a9e:	91 83       	std	Z+1, r25	; 0x01
    1aa0:	a2 83       	std	Z+2, r26	; 0x02
    1aa2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1aa4:	fe 01       	movw	r30, r28
    1aa6:	eb 59       	subi	r30, 0x9B	; 155
    1aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aaa:	60 81       	ld	r22, Z
    1aac:	71 81       	ldd	r23, Z+1	; 0x01
    1aae:	82 81       	ldd	r24, Z+2	; 0x02
    1ab0:	93 81       	ldd	r25, Z+3	; 0x03
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	40 e8       	ldi	r20, 0x80	; 128
    1ab8:	5f e3       	ldi	r21, 0x3F	; 63
    1aba:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1abe:	88 23       	and	r24, r24
    1ac0:	44 f4       	brge	.+16     	; 0x1ad2 <lcd_displayChar+0xb0>
		__ticks = 1;
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	ed 59       	subi	r30, 0x9D	; 157
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	91 83       	std	Z+1, r25	; 0x01
    1ace:	80 83       	st	Z, r24
    1ad0:	64 c0       	rjmp	.+200    	; 0x1b9a <lcd_displayChar+0x178>
	else if (__tmp > 65535)
    1ad2:	fe 01       	movw	r30, r28
    1ad4:	eb 59       	subi	r30, 0x9B	; 155
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	60 81       	ld	r22, Z
    1ada:	71 81       	ldd	r23, Z+1	; 0x01
    1adc:	82 81       	ldd	r24, Z+2	; 0x02
    1ade:	93 81       	ldd	r25, Z+3	; 0x03
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	3f ef       	ldi	r19, 0xFF	; 255
    1ae4:	4f e7       	ldi	r20, 0x7F	; 127
    1ae6:	57 e4       	ldi	r21, 0x47	; 71
    1ae8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1aec:	18 16       	cp	r1, r24
    1aee:	0c f0       	brlt	.+2      	; 0x1af2 <lcd_displayChar+0xd0>
    1af0:	43 c0       	rjmp	.+134    	; 0x1b78 <lcd_displayChar+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af2:	fe 01       	movw	r30, r28
    1af4:	e7 59       	subi	r30, 0x97	; 151
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	60 81       	ld	r22, Z
    1afa:	71 81       	ldd	r23, Z+1	; 0x01
    1afc:	82 81       	ldd	r24, Z+2	; 0x02
    1afe:	93 81       	ldd	r25, Z+3	; 0x03
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 e2       	ldi	r20, 0x20	; 32
    1b06:	51 e4       	ldi	r21, 0x41	; 65
    1b08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	8e 01       	movw	r16, r28
    1b12:	0d 59       	subi	r16, 0x9D	; 157
    1b14:	1f 4f       	sbci	r17, 0xFF	; 255
    1b16:	bc 01       	movw	r22, r24
    1b18:	cd 01       	movw	r24, r26
    1b1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	f8 01       	movw	r30, r16
    1b24:	91 83       	std	Z+1, r25	; 0x01
    1b26:	80 83       	st	Z, r24
    1b28:	1f c0       	rjmp	.+62     	; 0x1b68 <lcd_displayChar+0x146>
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	ef 59       	subi	r30, 0x9F	; 159
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	89 e1       	ldi	r24, 0x19	; 25
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	91 83       	std	Z+1, r25	; 0x01
    1b36:	80 83       	st	Z, r24
    1b38:	fe 01       	movw	r30, r28
    1b3a:	ef 59       	subi	r30, 0x9F	; 159
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	80 81       	ld	r24, Z
    1b40:	91 81       	ldd	r25, Z+1	; 0x01
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <lcd_displayChar+0x120>
    1b46:	fe 01       	movw	r30, r28
    1b48:	ef 59       	subi	r30, 0x9F	; 159
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	91 83       	std	Z+1, r25	; 0x01
    1b4e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b50:	de 01       	movw	r26, r28
    1b52:	ad 59       	subi	r26, 0x9D	; 157
    1b54:	bf 4f       	sbci	r27, 0xFF	; 255
    1b56:	fe 01       	movw	r30, r28
    1b58:	ed 59       	subi	r30, 0x9D	; 157
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	80 81       	ld	r24, Z
    1b5e:	91 81       	ldd	r25, Z+1	; 0x01
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	11 96       	adiw	r26, 0x01	; 1
    1b64:	9c 93       	st	X, r25
    1b66:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b68:	fe 01       	movw	r30, r28
    1b6a:	ed 59       	subi	r30, 0x9D	; 157
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	80 81       	ld	r24, Z
    1b70:	91 81       	ldd	r25, Z+1	; 0x01
    1b72:	00 97       	sbiw	r24, 0x00	; 0
    1b74:	d1 f6       	brne	.-76     	; 0x1b2a <lcd_displayChar+0x108>
    1b76:	27 c0       	rjmp	.+78     	; 0x1bc6 <lcd_displayChar+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b78:	8e 01       	movw	r16, r28
    1b7a:	0d 59       	subi	r16, 0x9D	; 157
    1b7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7e:	fe 01       	movw	r30, r28
    1b80:	eb 59       	subi	r30, 0x9B	; 155
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	60 81       	ld	r22, Z
    1b86:	71 81       	ldd	r23, Z+1	; 0x01
    1b88:	82 81       	ldd	r24, Z+2	; 0x02
    1b8a:	93 81       	ldd	r25, Z+3	; 0x03
    1b8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	f8 01       	movw	r30, r16
    1b96:	91 83       	std	Z+1, r25	; 0x01
    1b98:	80 83       	st	Z, r24
    1b9a:	de 01       	movw	r26, r28
    1b9c:	a1 5a       	subi	r26, 0xA1	; 161
    1b9e:	bf 4f       	sbci	r27, 0xFF	; 255
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	ed 59       	subi	r30, 0x9D	; 157
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	80 81       	ld	r24, Z
    1ba8:	91 81       	ldd	r25, Z+1	; 0x01
    1baa:	8d 93       	st	X+, r24
    1bac:	9c 93       	st	X, r25
    1bae:	fe 01       	movw	r30, r28
    1bb0:	e1 5a       	subi	r30, 0xA1	; 161
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	80 81       	ld	r24, Z
    1bb6:	91 81       	ldd	r25, Z+1	; 0x01
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	f1 f7       	brne	.-4      	; 0x1bb8 <lcd_displayChar+0x196>
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	e1 5a       	subi	r30, 0xA1	; 161
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	91 83       	std	Z+1, r25	; 0x01
    1bc4:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_CTRL_PORT|=(1<<E);
    1bc6:	a2 e3       	ldi	r26, 0x32	; 50
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e2 e3       	ldi	r30, 0x32	; 50
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	80 64       	ori	r24, 0x40	; 64
    1bd2:	8c 93       	st	X, r24
    1bd4:	fe 01       	movw	r30, r28
    1bd6:	e5 5a       	subi	r30, 0xA5	; 165
    1bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	a0 e8       	ldi	r26, 0x80	; 128
    1be0:	bf e3       	ldi	r27, 0x3F	; 63
    1be2:	80 83       	st	Z, r24
    1be4:	91 83       	std	Z+1, r25	; 0x01
    1be6:	a2 83       	std	Z+2, r26	; 0x02
    1be8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bea:	8e 01       	movw	r16, r28
    1bec:	09 5a       	subi	r16, 0xA9	; 169
    1bee:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	e5 5a       	subi	r30, 0xA5	; 165
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	60 81       	ld	r22, Z
    1bf8:	71 81       	ldd	r23, Z+1	; 0x01
    1bfa:	82 81       	ldd	r24, Z+2	; 0x02
    1bfc:	93 81       	ldd	r25, Z+3	; 0x03
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	4a e7       	ldi	r20, 0x7A	; 122
    1c04:	53 e4       	ldi	r21, 0x43	; 67
    1c06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	f8 01       	movw	r30, r16
    1c10:	80 83       	st	Z, r24
    1c12:	91 83       	std	Z+1, r25	; 0x01
    1c14:	a2 83       	std	Z+2, r26	; 0x02
    1c16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c18:	fe 01       	movw	r30, r28
    1c1a:	e9 5a       	subi	r30, 0xA9	; 169
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	60 81       	ld	r22, Z
    1c20:	71 81       	ldd	r23, Z+1	; 0x01
    1c22:	82 81       	ldd	r24, Z+2	; 0x02
    1c24:	93 81       	ldd	r25, Z+3	; 0x03
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e8       	ldi	r20, 0x80	; 128
    1c2c:	5f e3       	ldi	r21, 0x3F	; 63
    1c2e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c32:	88 23       	and	r24, r24
    1c34:	44 f4       	brge	.+16     	; 0x1c46 <lcd_displayChar+0x224>
		__ticks = 1;
    1c36:	fe 01       	movw	r30, r28
    1c38:	eb 5a       	subi	r30, 0xAB	; 171
    1c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	91 83       	std	Z+1, r25	; 0x01
    1c42:	80 83       	st	Z, r24
    1c44:	64 c0       	rjmp	.+200    	; 0x1d0e <lcd_displayChar+0x2ec>
	else if (__tmp > 65535)
    1c46:	fe 01       	movw	r30, r28
    1c48:	e9 5a       	subi	r30, 0xA9	; 169
    1c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4c:	60 81       	ld	r22, Z
    1c4e:	71 81       	ldd	r23, Z+1	; 0x01
    1c50:	82 81       	ldd	r24, Z+2	; 0x02
    1c52:	93 81       	ldd	r25, Z+3	; 0x03
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	3f ef       	ldi	r19, 0xFF	; 255
    1c58:	4f e7       	ldi	r20, 0x7F	; 127
    1c5a:	57 e4       	ldi	r21, 0x47	; 71
    1c5c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c60:	18 16       	cp	r1, r24
    1c62:	0c f0       	brlt	.+2      	; 0x1c66 <lcd_displayChar+0x244>
    1c64:	43 c0       	rjmp	.+134    	; 0x1cec <lcd_displayChar+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c66:	fe 01       	movw	r30, r28
    1c68:	e5 5a       	subi	r30, 0xA5	; 165
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	60 81       	ld	r22, Z
    1c6e:	71 81       	ldd	r23, Z+1	; 0x01
    1c70:	82 81       	ldd	r24, Z+2	; 0x02
    1c72:	93 81       	ldd	r25, Z+3	; 0x03
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	40 e2       	ldi	r20, 0x20	; 32
    1c7a:	51 e4       	ldi	r21, 0x41	; 65
    1c7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	8e 01       	movw	r16, r28
    1c86:	0b 5a       	subi	r16, 0xAB	; 171
    1c88:	1f 4f       	sbci	r17, 0xFF	; 255
    1c8a:	bc 01       	movw	r22, r24
    1c8c:	cd 01       	movw	r24, r26
    1c8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	f8 01       	movw	r30, r16
    1c98:	91 83       	std	Z+1, r25	; 0x01
    1c9a:	80 83       	st	Z, r24
    1c9c:	1f c0       	rjmp	.+62     	; 0x1cdc <lcd_displayChar+0x2ba>
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	ed 5a       	subi	r30, 0xAD	; 173
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	89 e1       	ldi	r24, 0x19	; 25
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	91 83       	std	Z+1, r25	; 0x01
    1caa:	80 83       	st	Z, r24
    1cac:	fe 01       	movw	r30, r28
    1cae:	ed 5a       	subi	r30, 0xAD	; 173
    1cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb2:	80 81       	ld	r24, Z
    1cb4:	91 81       	ldd	r25, Z+1	; 0x01
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	f1 f7       	brne	.-4      	; 0x1cb6 <lcd_displayChar+0x294>
    1cba:	fe 01       	movw	r30, r28
    1cbc:	ed 5a       	subi	r30, 0xAD	; 173
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	91 83       	std	Z+1, r25	; 0x01
    1cc2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc4:	de 01       	movw	r26, r28
    1cc6:	ab 5a       	subi	r26, 0xAB	; 171
    1cc8:	bf 4f       	sbci	r27, 0xFF	; 255
    1cca:	fe 01       	movw	r30, r28
    1ccc:	eb 5a       	subi	r30, 0xAB	; 171
    1cce:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd0:	80 81       	ld	r24, Z
    1cd2:	91 81       	ldd	r25, Z+1	; 0x01
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	11 96       	adiw	r26, 0x01	; 1
    1cd8:	9c 93       	st	X, r25
    1cda:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cdc:	fe 01       	movw	r30, r28
    1cde:	eb 5a       	subi	r30, 0xAB	; 171
    1ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce2:	80 81       	ld	r24, Z
    1ce4:	91 81       	ldd	r25, Z+1	; 0x01
    1ce6:	00 97       	sbiw	r24, 0x00	; 0
    1ce8:	d1 f6       	brne	.-76     	; 0x1c9e <lcd_displayChar+0x27c>
    1cea:	27 c0       	rjmp	.+78     	; 0x1d3a <lcd_displayChar+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cec:	8e 01       	movw	r16, r28
    1cee:	0b 5a       	subi	r16, 0xAB	; 171
    1cf0:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf2:	fe 01       	movw	r30, r28
    1cf4:	e9 5a       	subi	r30, 0xA9	; 169
    1cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf8:	60 81       	ld	r22, Z
    1cfa:	71 81       	ldd	r23, Z+1	; 0x01
    1cfc:	82 81       	ldd	r24, Z+2	; 0x02
    1cfe:	93 81       	ldd	r25, Z+3	; 0x03
    1d00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	f8 01       	movw	r30, r16
    1d0a:	91 83       	std	Z+1, r25	; 0x01
    1d0c:	80 83       	st	Z, r24
    1d0e:	de 01       	movw	r26, r28
    1d10:	af 5a       	subi	r26, 0xAF	; 175
    1d12:	bf 4f       	sbci	r27, 0xFF	; 255
    1d14:	fe 01       	movw	r30, r28
    1d16:	eb 5a       	subi	r30, 0xAB	; 171
    1d18:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1a:	80 81       	ld	r24, Z
    1d1c:	91 81       	ldd	r25, Z+1	; 0x01
    1d1e:	8d 93       	st	X+, r24
    1d20:	9c 93       	st	X, r25
    1d22:	fe 01       	movw	r30, r28
    1d24:	ef 5a       	subi	r30, 0xAF	; 175
    1d26:	ff 4f       	sbci	r31, 0xFF	; 255
    1d28:	80 81       	ld	r24, Z
    1d2a:	91 81       	ldd	r25, Z+1	; 0x01
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	f1 f7       	brne	.-4      	; 0x1d2c <lcd_displayChar+0x30a>
    1d30:	fe 01       	movw	r30, r28
    1d32:	ef 5a       	subi	r30, 0xAF	; 175
    1d34:	ff 4f       	sbci	r31, 0xFF	; 255
    1d36:	91 83       	std	Z+1, r25	; 0x01
    1d38:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_CTRL_PORT&=~(1<<E); //clear en
	_delay_ms(1);
#elif(USED_MODE==4)
	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|(data&0xF0);
    1d3a:	a5 e3       	ldi	r26, 0x35	; 53
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e5 e3       	ldi	r30, 0x35	; 53
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	98 2f       	mov	r25, r24
    1d46:	9f 70       	andi	r25, 0x0F	; 15
    1d48:	fe 01       	movw	r30, r28
    1d4a:	e3 59       	subi	r30, 0x93	; 147
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	80 81       	ld	r24, Z
    1d50:	80 7f       	andi	r24, 0xF0	; 240
    1d52:	89 2b       	or	r24, r25
    1d54:	8c 93       	st	X, r24
    1d56:	fe 01       	movw	r30, r28
    1d58:	e3 5b       	subi	r30, 0xB3	; 179
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	a0 e8       	ldi	r26, 0x80	; 128
    1d62:	bf e3       	ldi	r27, 0x3F	; 63
    1d64:	80 83       	st	Z, r24
    1d66:	91 83       	std	Z+1, r25	; 0x01
    1d68:	a2 83       	std	Z+2, r26	; 0x02
    1d6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d6c:	8e 01       	movw	r16, r28
    1d6e:	07 5b       	subi	r16, 0xB7	; 183
    1d70:	1f 4f       	sbci	r17, 0xFF	; 255
    1d72:	fe 01       	movw	r30, r28
    1d74:	e3 5b       	subi	r30, 0xB3	; 179
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	60 81       	ld	r22, Z
    1d7a:	71 81       	ldd	r23, Z+1	; 0x01
    1d7c:	82 81       	ldd	r24, Z+2	; 0x02
    1d7e:	93 81       	ldd	r25, Z+3	; 0x03
    1d80:	2b ea       	ldi	r18, 0xAB	; 171
    1d82:	3a ea       	ldi	r19, 0xAA	; 170
    1d84:	4a ea       	ldi	r20, 0xAA	; 170
    1d86:	5e e3       	ldi	r21, 0x3E	; 62
    1d88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	f8 01       	movw	r30, r16
    1d92:	80 83       	st	Z, r24
    1d94:	91 83       	std	Z+1, r25	; 0x01
    1d96:	a2 83       	std	Z+2, r26	; 0x02
    1d98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d9a:	fe 01       	movw	r30, r28
    1d9c:	e7 5b       	subi	r30, 0xB7	; 183
    1d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1da0:	60 81       	ld	r22, Z
    1da2:	71 81       	ldd	r23, Z+1	; 0x01
    1da4:	82 81       	ldd	r24, Z+2	; 0x02
    1da6:	93 81       	ldd	r25, Z+3	; 0x03
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	40 e8       	ldi	r20, 0x80	; 128
    1dae:	5f e3       	ldi	r21, 0x3F	; 63
    1db0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1db4:	88 23       	and	r24, r24
    1db6:	34 f4       	brge	.+12     	; 0x1dc4 <lcd_displayChar+0x3a2>
		__ticks = 1;
    1db8:	fe 01       	movw	r30, r28
    1dba:	e8 5b       	subi	r30, 0xB8	; 184
    1dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	80 83       	st	Z, r24
    1dc2:	b4 c0       	rjmp	.+360    	; 0x1f2c <lcd_displayChar+0x50a>
	else if (__tmp > 255)
    1dc4:	fe 01       	movw	r30, r28
    1dc6:	e7 5b       	subi	r30, 0xB7	; 183
    1dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dca:	60 81       	ld	r22, Z
    1dcc:	71 81       	ldd	r23, Z+1	; 0x01
    1dce:	82 81       	ldd	r24, Z+2	; 0x02
    1dd0:	93 81       	ldd	r25, Z+3	; 0x03
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	4f e7       	ldi	r20, 0x7F	; 127
    1dd8:	53 e4       	ldi	r21, 0x43	; 67
    1dda:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1dde:	18 16       	cp	r1, r24
    1de0:	0c f0       	brlt	.+2      	; 0x1de4 <lcd_displayChar+0x3c2>
    1de2:	94 c0       	rjmp	.+296    	; 0x1f0c <lcd_displayChar+0x4ea>
	{
		_delay_ms(__us / 1000.0);
    1de4:	fe 01       	movw	r30, r28
    1de6:	e3 5b       	subi	r30, 0xB3	; 179
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	60 81       	ld	r22, Z
    1dec:	71 81       	ldd	r23, Z+1	; 0x01
    1dee:	82 81       	ldd	r24, Z+2	; 0x02
    1df0:	93 81       	ldd	r25, Z+3	; 0x03
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	4a e7       	ldi	r20, 0x7A	; 122
    1df8:	54 e4       	ldi	r21, 0x44	; 68
    1dfa:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	fe 01       	movw	r30, r28
    1e04:	ec 5b       	subi	r30, 0xBC	; 188
    1e06:	ff 4f       	sbci	r31, 0xFF	; 255
    1e08:	80 83       	st	Z, r24
    1e0a:	91 83       	std	Z+1, r25	; 0x01
    1e0c:	a2 83       	std	Z+2, r26	; 0x02
    1e0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e10:	8e 01       	movw	r16, r28
    1e12:	00 5c       	subi	r16, 0xC0	; 192
    1e14:	1f 4f       	sbci	r17, 0xFF	; 255
    1e16:	fe 01       	movw	r30, r28
    1e18:	ec 5b       	subi	r30, 0xBC	; 188
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	60 81       	ld	r22, Z
    1e1e:	71 81       	ldd	r23, Z+1	; 0x01
    1e20:	82 81       	ldd	r24, Z+2	; 0x02
    1e22:	93 81       	ldd	r25, Z+3	; 0x03
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	4a e7       	ldi	r20, 0x7A	; 122
    1e2a:	53 e4       	ldi	r21, 0x43	; 67
    1e2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	f8 01       	movw	r30, r16
    1e36:	80 83       	st	Z, r24
    1e38:	91 83       	std	Z+1, r25	; 0x01
    1e3a:	a2 83       	std	Z+2, r26	; 0x02
    1e3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e3e:	fe 01       	movw	r30, r28
    1e40:	e0 5c       	subi	r30, 0xC0	; 192
    1e42:	ff 4f       	sbci	r31, 0xFF	; 255
    1e44:	60 81       	ld	r22, Z
    1e46:	71 81       	ldd	r23, Z+1	; 0x01
    1e48:	82 81       	ldd	r24, Z+2	; 0x02
    1e4a:	93 81       	ldd	r25, Z+3	; 0x03
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	40 e8       	ldi	r20, 0x80	; 128
    1e52:	5f e3       	ldi	r21, 0x3F	; 63
    1e54:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e58:	88 23       	and	r24, r24
    1e5a:	2c f4       	brge	.+10     	; 0x1e66 <lcd_displayChar+0x444>
		__ticks = 1;
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	9f af       	std	Y+63, r25	; 0x3f
    1e62:	8e af       	std	Y+62, r24	; 0x3e
    1e64:	48 c0       	rjmp	.+144    	; 0x1ef6 <lcd_displayChar+0x4d4>
	else if (__tmp > 65535)
    1e66:	fe 01       	movw	r30, r28
    1e68:	e0 5c       	subi	r30, 0xC0	; 192
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	60 81       	ld	r22, Z
    1e6e:	71 81       	ldd	r23, Z+1	; 0x01
    1e70:	82 81       	ldd	r24, Z+2	; 0x02
    1e72:	93 81       	ldd	r25, Z+3	; 0x03
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	3f ef       	ldi	r19, 0xFF	; 255
    1e78:	4f e7       	ldi	r20, 0x7F	; 127
    1e7a:	57 e4       	ldi	r21, 0x47	; 71
    1e7c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e80:	18 16       	cp	r1, r24
    1e82:	64 f5       	brge	.+88     	; 0x1edc <lcd_displayChar+0x4ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e84:	fe 01       	movw	r30, r28
    1e86:	ec 5b       	subi	r30, 0xBC	; 188
    1e88:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8a:	60 81       	ld	r22, Z
    1e8c:	71 81       	ldd	r23, Z+1	; 0x01
    1e8e:	82 81       	ldd	r24, Z+2	; 0x02
    1e90:	93 81       	ldd	r25, Z+3	; 0x03
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	40 e2       	ldi	r20, 0x20	; 32
    1e98:	51 e4       	ldi	r21, 0x41	; 65
    1e9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	bc 01       	movw	r22, r24
    1ea4:	cd 01       	movw	r24, r26
    1ea6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	9f af       	std	Y+63, r25	; 0x3f
    1eb0:	8e af       	std	Y+62, r24	; 0x3e
    1eb2:	0f c0       	rjmp	.+30     	; 0x1ed2 <lcd_displayChar+0x4b0>
    1eb4:	89 e1       	ldi	r24, 0x19	; 25
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	9d af       	std	Y+61, r25	; 0x3d
    1eba:	8c af       	std	Y+60, r24	; 0x3c
    1ebc:	8c ad       	ldd	r24, Y+60	; 0x3c
    1ebe:	9d ad       	ldd	r25, Y+61	; 0x3d
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	f1 f7       	brne	.-4      	; 0x1ec0 <lcd_displayChar+0x49e>
    1ec4:	9d af       	std	Y+61, r25	; 0x3d
    1ec6:	8c af       	std	Y+60, r24	; 0x3c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec8:	8e ad       	ldd	r24, Y+62	; 0x3e
    1eca:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	9f af       	std	Y+63, r25	; 0x3f
    1ed0:	8e af       	std	Y+62, r24	; 0x3e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed2:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ed4:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ed6:	00 97       	sbiw	r24, 0x00	; 0
    1ed8:	69 f7       	brne	.-38     	; 0x1eb4 <lcd_displayChar+0x492>
    1eda:	31 c0       	rjmp	.+98     	; 0x1f3e <lcd_displayChar+0x51c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1edc:	fe 01       	movw	r30, r28
    1ede:	e0 5c       	subi	r30, 0xC0	; 192
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	60 81       	ld	r22, Z
    1ee4:	71 81       	ldd	r23, Z+1	; 0x01
    1ee6:	82 81       	ldd	r24, Z+2	; 0x02
    1ee8:	93 81       	ldd	r25, Z+3	; 0x03
    1eea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	9f af       	std	Y+63, r25	; 0x3f
    1ef4:	8e af       	std	Y+62, r24	; 0x3e
    1ef6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ef8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1efa:	9b af       	std	Y+59, r25	; 0x3b
    1efc:	8a af       	std	Y+58, r24	; 0x3a
    1efe:	8a ad       	ldd	r24, Y+58	; 0x3a
    1f00:	9b ad       	ldd	r25, Y+59	; 0x3b
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <lcd_displayChar+0x4e0>
    1f06:	9b af       	std	Y+59, r25	; 0x3b
    1f08:	8a af       	std	Y+58, r24	; 0x3a
    1f0a:	19 c0       	rjmp	.+50     	; 0x1f3e <lcd_displayChar+0x51c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f0c:	8e 01       	movw	r16, r28
    1f0e:	08 5b       	subi	r16, 0xB8	; 184
    1f10:	1f 4f       	sbci	r17, 0xFF	; 255
    1f12:	fe 01       	movw	r30, r28
    1f14:	e7 5b       	subi	r30, 0xB7	; 183
    1f16:	ff 4f       	sbci	r31, 0xFF	; 255
    1f18:	60 81       	ld	r22, Z
    1f1a:	71 81       	ldd	r23, Z+1	; 0x01
    1f1c:	82 81       	ldd	r24, Z+2	; 0x02
    1f1e:	93 81       	ldd	r25, Z+3	; 0x03
    1f20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	f8 01       	movw	r30, r16
    1f2a:	80 83       	st	Z, r24
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	e8 5b       	subi	r30, 0xB8	; 184
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	80 81       	ld	r24, Z
    1f34:	89 af       	std	Y+57, r24	; 0x39
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f36:	89 ad       	ldd	r24, Y+57	; 0x39
    1f38:	8a 95       	dec	r24
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <lcd_displayChar+0x516>
    1f3c:	89 af       	std	Y+57, r24	; 0x39
	LCD_DATA_PORT=(LCD_DATA_PORT&0xF0)|((data&0xF0)>>4); /*Because we want to insert the last 4 bits of command with the first 4 bits in port*/
	#endif

	/*least 4 bits of data*/
	_delay_us(1);
	LCD_CTRL_PORT&=~(1<<E); //clear en
    1f3e:	a2 e3       	ldi	r26, 0x32	; 50
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	e2 e3       	ldi	r30, 0x32	; 50
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	8f 7b       	andi	r24, 0xBF	; 191
    1f4a:	8c 93       	st	X, r24
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	a0 e8       	ldi	r26, 0x80	; 128
    1f52:	bf e3       	ldi	r27, 0x3F	; 63
    1f54:	8d ab       	std	Y+53, r24	; 0x35
    1f56:	9e ab       	std	Y+54, r25	; 0x36
    1f58:	af ab       	std	Y+55, r26	; 0x37
    1f5a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5c:	6d a9       	ldd	r22, Y+53	; 0x35
    1f5e:	7e a9       	ldd	r23, Y+54	; 0x36
    1f60:	8f a9       	ldd	r24, Y+55	; 0x37
    1f62:	98 ad       	ldd	r25, Y+56	; 0x38
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	4a e7       	ldi	r20, 0x7A	; 122
    1f6a:	53 e4       	ldi	r21, 0x43	; 67
    1f6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	89 ab       	std	Y+49, r24	; 0x31
    1f76:	9a ab       	std	Y+50, r25	; 0x32
    1f78:	ab ab       	std	Y+51, r26	; 0x33
    1f7a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f7c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f7e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f80:	8b a9       	ldd	r24, Y+51	; 0x33
    1f82:	9c a9       	ldd	r25, Y+52	; 0x34
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e8       	ldi	r20, 0x80	; 128
    1f8a:	5f e3       	ldi	r21, 0x3F	; 63
    1f8c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f90:	88 23       	and	r24, r24
    1f92:	2c f4       	brge	.+10     	; 0x1f9e <lcd_displayChar+0x57c>
		__ticks = 1;
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	98 ab       	std	Y+48, r25	; 0x30
    1f9a:	8f a7       	std	Y+47, r24	; 0x2f
    1f9c:	3f c0       	rjmp	.+126    	; 0x201c <lcd_displayChar+0x5fa>
	else if (__tmp > 65535)
    1f9e:	69 a9       	ldd	r22, Y+49	; 0x31
    1fa0:	7a a9       	ldd	r23, Y+50	; 0x32
    1fa2:	8b a9       	ldd	r24, Y+51	; 0x33
    1fa4:	9c a9       	ldd	r25, Y+52	; 0x34
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	3f ef       	ldi	r19, 0xFF	; 255
    1faa:	4f e7       	ldi	r20, 0x7F	; 127
    1fac:	57 e4       	ldi	r21, 0x47	; 71
    1fae:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fb2:	18 16       	cp	r1, r24
    1fb4:	4c f5       	brge	.+82     	; 0x2008 <lcd_displayChar+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb6:	6d a9       	ldd	r22, Y+53	; 0x35
    1fb8:	7e a9       	ldd	r23, Y+54	; 0x36
    1fba:	8f a9       	ldd	r24, Y+55	; 0x37
    1fbc:	98 ad       	ldd	r25, Y+56	; 0x38
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	40 e2       	ldi	r20, 0x20	; 32
    1fc4:	51 e4       	ldi	r21, 0x41	; 65
    1fc6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	bc 01       	movw	r22, r24
    1fd0:	cd 01       	movw	r24, r26
    1fd2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	98 ab       	std	Y+48, r25	; 0x30
    1fdc:	8f a7       	std	Y+47, r24	; 0x2f
    1fde:	0f c0       	rjmp	.+30     	; 0x1ffe <lcd_displayChar+0x5dc>
    1fe0:	89 e1       	ldi	r24, 0x19	; 25
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	9e a7       	std	Y+46, r25	; 0x2e
    1fe6:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fe8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fea:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	f1 f7       	brne	.-4      	; 0x1fec <lcd_displayChar+0x5ca>
    1ff0:	9e a7       	std	Y+46, r25	; 0x2e
    1ff2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ff6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	98 ab       	std	Y+48, r25	; 0x30
    1ffc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2000:	98 a9       	ldd	r25, Y+48	; 0x30
    2002:	00 97       	sbiw	r24, 0x00	; 0
    2004:	69 f7       	brne	.-38     	; 0x1fe0 <lcd_displayChar+0x5be>
    2006:	14 c0       	rjmp	.+40     	; 0x2030 <lcd_displayChar+0x60e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2008:	69 a9       	ldd	r22, Y+49	; 0x31
    200a:	7a a9       	ldd	r23, Y+50	; 0x32
    200c:	8b a9       	ldd	r24, Y+51	; 0x33
    200e:	9c a9       	ldd	r25, Y+52	; 0x34
    2010:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	98 ab       	std	Y+48, r25	; 0x30
    201a:	8f a7       	std	Y+47, r24	; 0x2f
    201c:	8f a5       	ldd	r24, Y+47	; 0x2f
    201e:	98 a9       	ldd	r25, Y+48	; 0x30
    2020:	9c a7       	std	Y+44, r25	; 0x2c
    2022:	8b a7       	std	Y+43, r24	; 0x2b
    2024:	8b a5       	ldd	r24, Y+43	; 0x2b
    2026:	9c a5       	ldd	r25, Y+44	; 0x2c
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	f1 f7       	brne	.-4      	; 0x2028 <lcd_displayChar+0x606>
    202c:	9c a7       	std	Y+44, r25	; 0x2c
    202e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_CTRL_PORT|=(1<<E);//set en to send the rest of the data
    2030:	a2 e3       	ldi	r26, 0x32	; 50
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	e2 e3       	ldi	r30, 0x32	; 50
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	80 64       	ori	r24, 0x40	; 64
    203c:	8c 93       	st	X, r24
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	a0 e8       	ldi	r26, 0x80	; 128
    2044:	bf e3       	ldi	r27, 0x3F	; 63
    2046:	8f a3       	std	Y+39, r24	; 0x27
    2048:	98 a7       	std	Y+40, r25	; 0x28
    204a:	a9 a7       	std	Y+41, r26	; 0x29
    204c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    204e:	6f a1       	ldd	r22, Y+39	; 0x27
    2050:	78 a5       	ldd	r23, Y+40	; 0x28
    2052:	89 a5       	ldd	r24, Y+41	; 0x29
    2054:	9a a5       	ldd	r25, Y+42	; 0x2a
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	4a e7       	ldi	r20, 0x7A	; 122
    205c:	53 e4       	ldi	r21, 0x43	; 67
    205e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	8b a3       	std	Y+35, r24	; 0x23
    2068:	9c a3       	std	Y+36, r25	; 0x24
    206a:	ad a3       	std	Y+37, r26	; 0x25
    206c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    206e:	6b a1       	ldd	r22, Y+35	; 0x23
    2070:	7c a1       	ldd	r23, Y+36	; 0x24
    2072:	8d a1       	ldd	r24, Y+37	; 0x25
    2074:	9e a1       	ldd	r25, Y+38	; 0x26
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	40 e8       	ldi	r20, 0x80	; 128
    207c:	5f e3       	ldi	r21, 0x3F	; 63
    207e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2082:	88 23       	and	r24, r24
    2084:	2c f4       	brge	.+10     	; 0x2090 <lcd_displayChar+0x66e>
		__ticks = 1;
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	9a a3       	std	Y+34, r25	; 0x22
    208c:	89 a3       	std	Y+33, r24	; 0x21
    208e:	3f c0       	rjmp	.+126    	; 0x210e <lcd_displayChar+0x6ec>
	else if (__tmp > 65535)
    2090:	6b a1       	ldd	r22, Y+35	; 0x23
    2092:	7c a1       	ldd	r23, Y+36	; 0x24
    2094:	8d a1       	ldd	r24, Y+37	; 0x25
    2096:	9e a1       	ldd	r25, Y+38	; 0x26
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	3f ef       	ldi	r19, 0xFF	; 255
    209c:	4f e7       	ldi	r20, 0x7F	; 127
    209e:	57 e4       	ldi	r21, 0x47	; 71
    20a0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20a4:	18 16       	cp	r1, r24
    20a6:	4c f5       	brge	.+82     	; 0x20fa <lcd_displayChar+0x6d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a8:	6f a1       	ldd	r22, Y+39	; 0x27
    20aa:	78 a5       	ldd	r23, Y+40	; 0x28
    20ac:	89 a5       	ldd	r24, Y+41	; 0x29
    20ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	40 e2       	ldi	r20, 0x20	; 32
    20b6:	51 e4       	ldi	r21, 0x41	; 65
    20b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	bc 01       	movw	r22, r24
    20c2:	cd 01       	movw	r24, r26
    20c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	9a a3       	std	Y+34, r25	; 0x22
    20ce:	89 a3       	std	Y+33, r24	; 0x21
    20d0:	0f c0       	rjmp	.+30     	; 0x20f0 <lcd_displayChar+0x6ce>
    20d2:	89 e1       	ldi	r24, 0x19	; 25
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	98 a3       	std	Y+32, r25	; 0x20
    20d8:	8f 8f       	std	Y+31, r24	; 0x1f
    20da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20dc:	98 a1       	ldd	r25, Y+32	; 0x20
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	f1 f7       	brne	.-4      	; 0x20de <lcd_displayChar+0x6bc>
    20e2:	98 a3       	std	Y+32, r25	; 0x20
    20e4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e6:	89 a1       	ldd	r24, Y+33	; 0x21
    20e8:	9a a1       	ldd	r25, Y+34	; 0x22
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	9a a3       	std	Y+34, r25	; 0x22
    20ee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f0:	89 a1       	ldd	r24, Y+33	; 0x21
    20f2:	9a a1       	ldd	r25, Y+34	; 0x22
    20f4:	00 97       	sbiw	r24, 0x00	; 0
    20f6:	69 f7       	brne	.-38     	; 0x20d2 <lcd_displayChar+0x6b0>
    20f8:	14 c0       	rjmp	.+40     	; 0x2122 <lcd_displayChar+0x700>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fa:	6b a1       	ldd	r22, Y+35	; 0x23
    20fc:	7c a1       	ldd	r23, Y+36	; 0x24
    20fe:	8d a1       	ldd	r24, Y+37	; 0x25
    2100:	9e a1       	ldd	r25, Y+38	; 0x26
    2102:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	9a a3       	std	Y+34, r25	; 0x22
    210c:	89 a3       	std	Y+33, r24	; 0x21
    210e:	89 a1       	ldd	r24, Y+33	; 0x21
    2110:	9a a1       	ldd	r25, Y+34	; 0x22
    2112:	9e 8f       	std	Y+30, r25	; 0x1e
    2114:	8d 8f       	std	Y+29, r24	; 0x1d
    2116:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2118:	9e 8d       	ldd	r25, Y+30	; 0x1e
    211a:	01 97       	sbiw	r24, 0x01	; 1
    211c:	f1 f7       	brne	.-4      	; 0x211a <lcd_displayChar+0x6f8>
    211e:	9e 8f       	std	Y+30, r25	; 0x1e
    2120:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|((data&0x0F)<<4);
    2122:	a5 e3       	ldi	r26, 0x35	; 53
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	e5 e3       	ldi	r30, 0x35	; 53
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	28 2f       	mov	r18, r24
    212e:	2f 70       	andi	r18, 0x0F	; 15
    2130:	fe 01       	movw	r30, r28
    2132:	e3 59       	subi	r30, 0x93	; 147
    2134:	ff 4f       	sbci	r31, 0xFF	; 255
    2136:	80 81       	ld	r24, Z
    2138:	88 2f       	mov	r24, r24
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	82 95       	swap	r24
    213e:	92 95       	swap	r25
    2140:	90 7f       	andi	r25, 0xF0	; 240
    2142:	98 27       	eor	r25, r24
    2144:	80 7f       	andi	r24, 0xF0	; 240
    2146:	98 27       	eor	r25, r24
    2148:	82 2b       	or	r24, r18
    214a:	8c 93       	st	X, r24
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	a0 e8       	ldi	r26, 0x80	; 128
    2152:	bf e3       	ldi	r27, 0x3F	; 63
    2154:	89 8f       	std	Y+25, r24	; 0x19
    2156:	9a 8f       	std	Y+26, r25	; 0x1a
    2158:	ab 8f       	std	Y+27, r26	; 0x1b
    215a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    215c:	69 8d       	ldd	r22, Y+25	; 0x19
    215e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2160:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2162:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	4a e7       	ldi	r20, 0x7A	; 122
    216a:	53 e4       	ldi	r21, 0x43	; 67
    216c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	8d 8b       	std	Y+21, r24	; 0x15
    2176:	9e 8b       	std	Y+22, r25	; 0x16
    2178:	af 8b       	std	Y+23, r26	; 0x17
    217a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    217c:	6d 89       	ldd	r22, Y+21	; 0x15
    217e:	7e 89       	ldd	r23, Y+22	; 0x16
    2180:	8f 89       	ldd	r24, Y+23	; 0x17
    2182:	98 8d       	ldd	r25, Y+24	; 0x18
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e8       	ldi	r20, 0x80	; 128
    218a:	5f e3       	ldi	r21, 0x3F	; 63
    218c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2190:	88 23       	and	r24, r24
    2192:	2c f4       	brge	.+10     	; 0x219e <lcd_displayChar+0x77c>
		__ticks = 1;
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	9c 8b       	std	Y+20, r25	; 0x14
    219a:	8b 8b       	std	Y+19, r24	; 0x13
    219c:	3f c0       	rjmp	.+126    	; 0x221c <lcd_displayChar+0x7fa>
	else if (__tmp > 65535)
    219e:	6d 89       	ldd	r22, Y+21	; 0x15
    21a0:	7e 89       	ldd	r23, Y+22	; 0x16
    21a2:	8f 89       	ldd	r24, Y+23	; 0x17
    21a4:	98 8d       	ldd	r25, Y+24	; 0x18
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	3f ef       	ldi	r19, 0xFF	; 255
    21aa:	4f e7       	ldi	r20, 0x7F	; 127
    21ac:	57 e4       	ldi	r21, 0x47	; 71
    21ae:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    21b2:	18 16       	cp	r1, r24
    21b4:	4c f5       	brge	.+82     	; 0x2208 <lcd_displayChar+0x7e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b6:	69 8d       	ldd	r22, Y+25	; 0x19
    21b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	40 e2       	ldi	r20, 0x20	; 32
    21c4:	51 e4       	ldi	r21, 0x41	; 65
    21c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	bc 01       	movw	r22, r24
    21d0:	cd 01       	movw	r24, r26
    21d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	9c 8b       	std	Y+20, r25	; 0x14
    21dc:	8b 8b       	std	Y+19, r24	; 0x13
    21de:	0f c0       	rjmp	.+30     	; 0x21fe <lcd_displayChar+0x7dc>
    21e0:	89 e1       	ldi	r24, 0x19	; 25
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	9a 8b       	std	Y+18, r25	; 0x12
    21e6:	89 8b       	std	Y+17, r24	; 0x11
    21e8:	89 89       	ldd	r24, Y+17	; 0x11
    21ea:	9a 89       	ldd	r25, Y+18	; 0x12
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	f1 f7       	brne	.-4      	; 0x21ec <lcd_displayChar+0x7ca>
    21f0:	9a 8b       	std	Y+18, r25	; 0x12
    21f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f4:	8b 89       	ldd	r24, Y+19	; 0x13
    21f6:	9c 89       	ldd	r25, Y+20	; 0x14
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	9c 8b       	std	Y+20, r25	; 0x14
    21fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2200:	9c 89       	ldd	r25, Y+20	; 0x14
    2202:	00 97       	sbiw	r24, 0x00	; 0
    2204:	69 f7       	brne	.-38     	; 0x21e0 <lcd_displayChar+0x7be>
    2206:	14 c0       	rjmp	.+40     	; 0x2230 <lcd_displayChar+0x80e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2208:	6d 89       	ldd	r22, Y+21	; 0x15
    220a:	7e 89       	ldd	r23, Y+22	; 0x16
    220c:	8f 89       	ldd	r24, Y+23	; 0x17
    220e:	98 8d       	ldd	r25, Y+24	; 0x18
    2210:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	9c 8b       	std	Y+20, r25	; 0x14
    221a:	8b 8b       	std	Y+19, r24	; 0x13
    221c:	8b 89       	ldd	r24, Y+19	; 0x13
    221e:	9c 89       	ldd	r25, Y+20	; 0x14
    2220:	98 8b       	std	Y+16, r25	; 0x10
    2222:	8f 87       	std	Y+15, r24	; 0x0f
    2224:	8f 85       	ldd	r24, Y+15	; 0x0f
    2226:	98 89       	ldd	r25, Y+16	; 0x10
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	f1 f7       	brne	.-4      	; 0x2228 <lcd_displayChar+0x806>
    222c:	98 8b       	std	Y+16, r25	; 0x10
    222e:	8f 87       	std	Y+15, r24	; 0x0f
	#elif
	LCD_DATA_PORT=(LCD_DATA_PORT&0xF0)|(data&0x0F);
	#endif
	_delay_ms(1);
	LCD_CTRL_PORT&=~(1<<E); //clear en
    2230:	a2 e3       	ldi	r26, 0x32	; 50
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	e2 e3       	ldi	r30, 0x32	; 50
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	8f 7b       	andi	r24, 0xBF	; 191
    223c:	8c 93       	st	X, r24
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	a0 e8       	ldi	r26, 0x80	; 128
    2244:	bf e3       	ldi	r27, 0x3F	; 63
    2246:	8b 87       	std	Y+11, r24	; 0x0b
    2248:	9c 87       	std	Y+12, r25	; 0x0c
    224a:	ad 87       	std	Y+13, r26	; 0x0d
    224c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2250:	7c 85       	ldd	r23, Y+12	; 0x0c
    2252:	8d 85       	ldd	r24, Y+13	; 0x0d
    2254:	9e 85       	ldd	r25, Y+14	; 0x0e
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	4a e7       	ldi	r20, 0x7A	; 122
    225c:	53 e4       	ldi	r21, 0x43	; 67
    225e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	8f 83       	std	Y+7, r24	; 0x07
    2268:	98 87       	std	Y+8, r25	; 0x08
    226a:	a9 87       	std	Y+9, r26	; 0x09
    226c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    226e:	6f 81       	ldd	r22, Y+7	; 0x07
    2270:	78 85       	ldd	r23, Y+8	; 0x08
    2272:	89 85       	ldd	r24, Y+9	; 0x09
    2274:	9a 85       	ldd	r25, Y+10	; 0x0a
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	40 e8       	ldi	r20, 0x80	; 128
    227c:	5f e3       	ldi	r21, 0x3F	; 63
    227e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2282:	88 23       	and	r24, r24
    2284:	2c f4       	brge	.+10     	; 0x2290 <lcd_displayChar+0x86e>
		__ticks = 1;
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	9e 83       	std	Y+6, r25	; 0x06
    228c:	8d 83       	std	Y+5, r24	; 0x05
    228e:	3f c0       	rjmp	.+126    	; 0x230e <lcd_displayChar+0x8ec>
	else if (__tmp > 65535)
    2290:	6f 81       	ldd	r22, Y+7	; 0x07
    2292:	78 85       	ldd	r23, Y+8	; 0x08
    2294:	89 85       	ldd	r24, Y+9	; 0x09
    2296:	9a 85       	ldd	r25, Y+10	; 0x0a
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	3f ef       	ldi	r19, 0xFF	; 255
    229c:	4f e7       	ldi	r20, 0x7F	; 127
    229e:	57 e4       	ldi	r21, 0x47	; 71
    22a0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22a4:	18 16       	cp	r1, r24
    22a6:	4c f5       	brge	.+82     	; 0x22fa <lcd_displayChar+0x8d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	40 e2       	ldi	r20, 0x20	; 32
    22b6:	51 e4       	ldi	r21, 0x41	; 65
    22b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	bc 01       	movw	r22, r24
    22c2:	cd 01       	movw	r24, r26
    22c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	9e 83       	std	Y+6, r25	; 0x06
    22ce:	8d 83       	std	Y+5, r24	; 0x05
    22d0:	0f c0       	rjmp	.+30     	; 0x22f0 <lcd_displayChar+0x8ce>
    22d2:	89 e1       	ldi	r24, 0x19	; 25
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	9c 83       	std	Y+4, r25	; 0x04
    22d8:	8b 83       	std	Y+3, r24	; 0x03
    22da:	8b 81       	ldd	r24, Y+3	; 0x03
    22dc:	9c 81       	ldd	r25, Y+4	; 0x04
    22de:	01 97       	sbiw	r24, 0x01	; 1
    22e0:	f1 f7       	brne	.-4      	; 0x22de <lcd_displayChar+0x8bc>
    22e2:	9c 83       	std	Y+4, r25	; 0x04
    22e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e6:	8d 81       	ldd	r24, Y+5	; 0x05
    22e8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	9e 83       	std	Y+6, r25	; 0x06
    22ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f0:	8d 81       	ldd	r24, Y+5	; 0x05
    22f2:	9e 81       	ldd	r25, Y+6	; 0x06
    22f4:	00 97       	sbiw	r24, 0x00	; 0
    22f6:	69 f7       	brne	.-38     	; 0x22d2 <lcd_displayChar+0x8b0>
    22f8:	14 c0       	rjmp	.+40     	; 0x2322 <lcd_displayChar+0x900>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fa:	6f 81       	ldd	r22, Y+7	; 0x07
    22fc:	78 85       	ldd	r23, Y+8	; 0x08
    22fe:	89 85       	ldd	r24, Y+9	; 0x09
    2300:	9a 85       	ldd	r25, Y+10	; 0x0a
    2302:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	9e 83       	std	Y+6, r25	; 0x06
    230c:	8d 83       	std	Y+5, r24	; 0x05
    230e:	8d 81       	ldd	r24, Y+5	; 0x05
    2310:	9e 81       	ldd	r25, Y+6	; 0x06
    2312:	9a 83       	std	Y+2, r25	; 0x02
    2314:	89 83       	std	Y+1, r24	; 0x01
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	9a 81       	ldd	r25, Y+2	; 0x02
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	f1 f7       	brne	.-4      	; 0x231a <lcd_displayChar+0x8f8>
    231e:	9a 83       	std	Y+2, r25	; 0x02
    2320:	89 83       	std	Y+1, r24	; 0x01





}
    2322:	c3 59       	subi	r28, 0x93	; 147
    2324:	df 4f       	sbci	r29, 0xFF	; 255
    2326:	0f b6       	in	r0, 0x3f	; 63
    2328:	f8 94       	cli
    232a:	de bf       	out	0x3e, r29	; 62
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	cd bf       	out	0x3d, r28	; 61
    2330:	cf 91       	pop	r28
    2332:	df 91       	pop	r29
    2334:	1f 91       	pop	r17
    2336:	0f 91       	pop	r16
    2338:	08 95       	ret

0000233a <lcd_displayString>:


void lcd_displayString(unsigned char *str){
    233a:	df 93       	push	r29
    233c:	cf 93       	push	r28
    233e:	00 d0       	rcall	.+0      	; 0x2340 <lcd_displayString+0x6>
    2340:	00 d0       	rcall	.+0      	; 0x2342 <lcd_displayString+0x8>
    2342:	cd b7       	in	r28, 0x3d	; 61
    2344:	de b7       	in	r29, 0x3e	; 62
    2346:	9c 83       	std	Y+4, r25	; 0x04
    2348:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0;str[i]!='\0';i++){
    234a:	1a 82       	std	Y+2, r1	; 0x02
    234c:	19 82       	std	Y+1, r1	; 0x01
    234e:	0f c0       	rjmp	.+30     	; 0x236e <lcd_displayString+0x34>
		lcd_displayChar(str[i]);}
    2350:	29 81       	ldd	r18, Y+1	; 0x01
    2352:	3a 81       	ldd	r19, Y+2	; 0x02
    2354:	8b 81       	ldd	r24, Y+3	; 0x03
    2356:	9c 81       	ldd	r25, Y+4	; 0x04
    2358:	fc 01       	movw	r30, r24
    235a:	e2 0f       	add	r30, r18
    235c:	f3 1f       	adc	r31, r19
    235e:	80 81       	ld	r24, Z
    2360:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <lcd_displayChar>
}


void lcd_displayString(unsigned char *str){
	int i;
	for(i=0;str[i]!='\0';i++){
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	9a 81       	ldd	r25, Y+2	; 0x02
    2368:	01 96       	adiw	r24, 0x01	; 1
    236a:	9a 83       	std	Y+2, r25	; 0x02
    236c:	89 83       	std	Y+1, r24	; 0x01
    236e:	29 81       	ldd	r18, Y+1	; 0x01
    2370:	3a 81       	ldd	r19, Y+2	; 0x02
    2372:	8b 81       	ldd	r24, Y+3	; 0x03
    2374:	9c 81       	ldd	r25, Y+4	; 0x04
    2376:	fc 01       	movw	r30, r24
    2378:	e2 0f       	add	r30, r18
    237a:	f3 1f       	adc	r31, r19
    237c:	80 81       	ld	r24, Z
    237e:	88 23       	and	r24, r24
    2380:	39 f7       	brne	.-50     	; 0x2350 <lcd_displayString+0x16>
		lcd_displayChar(str[i]);}
}
    2382:	0f 90       	pop	r0
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
    2388:	0f 90       	pop	r0
    238a:	cf 91       	pop	r28
    238c:	df 91       	pop	r29
    238e:	08 95       	ret

00002390 <lcd_goToRowColumn>:


void lcd_goToRowColumn(unsigned char row, unsigned char col){
    2390:	df 93       	push	r29
    2392:	cf 93       	push	r28
    2394:	00 d0       	rcall	.+0      	; 0x2396 <lcd_goToRowColumn+0x6>
    2396:	00 d0       	rcall	.+0      	; 0x2398 <lcd_goToRowColumn+0x8>
    2398:	0f 92       	push	r0
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62
    239e:	8a 83       	std	Y+2, r24	; 0x02
    23a0:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char command;
	switch(row){
    23a2:	8a 81       	ldd	r24, Y+2	; 0x02
    23a4:	28 2f       	mov	r18, r24
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	3d 83       	std	Y+5, r19	; 0x05
    23aa:	2c 83       	std	Y+4, r18	; 0x04
    23ac:	8c 81       	ldd	r24, Y+4	; 0x04
    23ae:	9d 81       	ldd	r25, Y+5	; 0x05
    23b0:	81 30       	cpi	r24, 0x01	; 1
    23b2:	91 05       	cpc	r25, r1
    23b4:	e1 f0       	breq	.+56     	; 0x23ee <lcd_goToRowColumn+0x5e>
    23b6:	2c 81       	ldd	r18, Y+4	; 0x04
    23b8:	3d 81       	ldd	r19, Y+5	; 0x05
    23ba:	22 30       	cpi	r18, 0x02	; 2
    23bc:	31 05       	cpc	r19, r1
    23be:	2c f4       	brge	.+10     	; 0x23ca <lcd_goToRowColumn+0x3a>
    23c0:	8c 81       	ldd	r24, Y+4	; 0x04
    23c2:	9d 81       	ldd	r25, Y+5	; 0x05
    23c4:	00 97       	sbiw	r24, 0x00	; 0
    23c6:	61 f0       	breq	.+24     	; 0x23e0 <lcd_goToRowColumn+0x50>
    23c8:	2f c0       	rjmp	.+94     	; 0x2428 <lcd_goToRowColumn+0x98>
    23ca:	2c 81       	ldd	r18, Y+4	; 0x04
    23cc:	3d 81       	ldd	r19, Y+5	; 0x05
    23ce:	22 30       	cpi	r18, 0x02	; 2
    23d0:	31 05       	cpc	r19, r1
    23d2:	b9 f0       	breq	.+46     	; 0x2402 <lcd_goToRowColumn+0x72>
    23d4:	8c 81       	ldd	r24, Y+4	; 0x04
    23d6:	9d 81       	ldd	r25, Y+5	; 0x05
    23d8:	83 30       	cpi	r24, 0x03	; 3
    23da:	91 05       	cpc	r25, r1
    23dc:	e1 f0       	breq	.+56     	; 0x2416 <lcd_goToRowColumn+0x86>
    23de:	24 c0       	rjmp	.+72     	; 0x2428 <lcd_goToRowColumn+0x98>
	case 0: command= col|0x80;
    23e0:	8b 81       	ldd	r24, Y+3	; 0x03
    23e2:	80 68       	ori	r24, 0x80	; 128
    23e4:	89 83       	std	Y+1, r24	; 0x01
		lcd_sendCommand(command);
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	0e 94 74 08 	call	0x10e8	; 0x10e8 <lcd_sendCommand>
    23ec:	1d c0       	rjmp	.+58     	; 0x2428 <lcd_goToRowColumn+0x98>
		break;
	case 1:
		command=0x40+col;
    23ee:	8b 81       	ldd	r24, Y+3	; 0x03
    23f0:	80 5c       	subi	r24, 0xC0	; 192
    23f2:	89 83       	std	Y+1, r24	; 0x01
		command|=0x80;
    23f4:	89 81       	ldd	r24, Y+1	; 0x01
    23f6:	80 68       	ori	r24, 0x80	; 128
    23f8:	89 83       	std	Y+1, r24	; 0x01
	    lcd_sendCommand(command);
    23fa:	89 81       	ldd	r24, Y+1	; 0x01
    23fc:	0e 94 74 08 	call	0x10e8	; 0x10e8 <lcd_sendCommand>
    2400:	13 c0       	rjmp	.+38     	; 0x2428 <lcd_goToRowColumn+0x98>
	    break;
	case 2:
		command=0x10+col;
    2402:	8b 81       	ldd	r24, Y+3	; 0x03
    2404:	80 5f       	subi	r24, 0xF0	; 240
    2406:	89 83       	std	Y+1, r24	; 0x01
		command|=0x80;
    2408:	89 81       	ldd	r24, Y+1	; 0x01
    240a:	80 68       	ori	r24, 0x80	; 128
    240c:	89 83       	std	Y+1, r24	; 0x01
	    lcd_sendCommand(command);
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	0e 94 74 08 	call	0x10e8	; 0x10e8 <lcd_sendCommand>
    2414:	09 c0       	rjmp	.+18     	; 0x2428 <lcd_goToRowColumn+0x98>
		break;
	case 3:
		command=0x50+col;
    2416:	8b 81       	ldd	r24, Y+3	; 0x03
    2418:	80 5b       	subi	r24, 0xB0	; 176
    241a:	89 83       	std	Y+1, r24	; 0x01
		command|=0x80;
    241c:	89 81       	ldd	r24, Y+1	; 0x01
    241e:	80 68       	ori	r24, 0x80	; 128
    2420:	89 83       	std	Y+1, r24	; 0x01
		lcd_sendCommand(command);
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	0e 94 74 08 	call	0x10e8	; 0x10e8 <lcd_sendCommand>
		break;
	}


	}
    2428:	0f 90       	pop	r0
    242a:	0f 90       	pop	r0
    242c:	0f 90       	pop	r0
    242e:	0f 90       	pop	r0
    2430:	0f 90       	pop	r0
    2432:	cf 91       	pop	r28
    2434:	df 91       	pop	r29
    2436:	08 95       	ret

00002438 <lcd_displayStringRowColumn>:


void lcd_displayStringRowColumn(unsigned char row, unsigned char col,unsigned char *str){
    2438:	df 93       	push	r29
    243a:	cf 93       	push	r28
    243c:	00 d0       	rcall	.+0      	; 0x243e <lcd_displayStringRowColumn+0x6>
    243e:	00 d0       	rcall	.+0      	; 0x2440 <lcd_displayStringRowColumn+0x8>
    2440:	cd b7       	in	r28, 0x3d	; 61
    2442:	de b7       	in	r29, 0x3e	; 62
    2444:	89 83       	std	Y+1, r24	; 0x01
    2446:	6a 83       	std	Y+2, r22	; 0x02
    2448:	5c 83       	std	Y+4, r21	; 0x04
    244a:	4b 83       	std	Y+3, r20	; 0x03

	lcd_goToRowColumn(row,col);
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	6a 81       	ldd	r22, Y+2	; 0x02
    2450:	0e 94 c8 11 	call	0x2390	; 0x2390 <lcd_goToRowColumn>
	lcd_displayString(str);
    2454:	8b 81       	ldd	r24, Y+3	; 0x03
    2456:	9c 81       	ldd	r25, Y+4	; 0x04
    2458:	0e 94 9d 11 	call	0x233a	; 0x233a <lcd_displayString>

}
    245c:	0f 90       	pop	r0
    245e:	0f 90       	pop	r0
    2460:	0f 90       	pop	r0
    2462:	0f 90       	pop	r0
    2464:	cf 91       	pop	r28
    2466:	df 91       	pop	r29
    2468:	08 95       	ret

0000246a <lcd_intgerToString>:

void lcd_intgerToString(int data)
{
    246a:	df 93       	push	r29
    246c:	cf 93       	push	r28
    246e:	cd b7       	in	r28, 0x3d	; 61
    2470:	de b7       	in	r29, 0x3e	; 62
    2472:	62 97       	sbiw	r28, 0x12	; 18
    2474:	0f b6       	in	r0, 0x3f	; 63
    2476:	f8 94       	cli
    2478:	de bf       	out	0x3e, r29	; 62
    247a:	0f be       	out	0x3f, r0	; 63
    247c:	cd bf       	out	0x3d, r28	; 61
    247e:	9a 8b       	std	Y+18, r25	; 0x12
    2480:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2482:	89 89       	ldd	r24, Y+17	; 0x11
    2484:	9a 89       	ldd	r25, Y+18	; 0x12
    2486:	9e 01       	movw	r18, r28
    2488:	2f 5f       	subi	r18, 0xFF	; 255
    248a:	3f 4f       	sbci	r19, 0xFF	; 255
    248c:	b9 01       	movw	r22, r18
    248e:	4a e0       	ldi	r20, 0x0A	; 10
    2490:	50 e0       	ldi	r21, 0x00	; 0
    2492:	0e 94 72 14 	call	0x28e4	; 0x28e4 <itoa>
   lcd_displayString(buff);
    2496:	ce 01       	movw	r24, r28
    2498:	01 96       	adiw	r24, 0x01	; 1
    249a:	0e 94 9d 11 	call	0x233a	; 0x233a <lcd_displayString>
}
    249e:	62 96       	adiw	r28, 0x12	; 18
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	f8 94       	cli
    24a4:	de bf       	out	0x3e, r29	; 62
    24a6:	0f be       	out	0x3f, r0	; 63
    24a8:	cd bf       	out	0x3d, r28	; 61
    24aa:	cf 91       	pop	r28
    24ac:	df 91       	pop	r29
    24ae:	08 95       	ret

000024b0 <main>:
void changePassword(void);
void openDoor(void);



int main(){
    24b0:	df 93       	push	r29
    24b2:	cf 93       	push	r28
    24b4:	00 d0       	rcall	.+0      	; 0x24b6 <main+0x6>
    24b6:	0f 92       	push	r0
    24b8:	cd b7       	in	r28, 0x3d	; 61
    24ba:	de b7       	in	r29, 0x3e	; 62
    DDRD|=(1<<PD4)|(1<<PD5);
    24bc:	a1 e3       	ldi	r26, 0x31	; 49
    24be:	b0 e0       	ldi	r27, 0x00	; 0
    24c0:	e1 e3       	ldi	r30, 0x31	; 49
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	80 81       	ld	r24, Z
    24c6:	80 63       	ori	r24, 0x30	; 48
    24c8:	8c 93       	st	X, r24
    motor_stop();
    24ca:	0e 94 1d 14 	call	0x283a	; 0x283a <motor_stop>

    lcd_init();
    24ce:	0e 94 48 08 	call	0x1090	; 0x1090 <lcd_init>
	UART_init();
    24d2:	0e 94 63 06 	call	0xcc6	; 0xcc6 <UART_init>
	EEPROM_init();
    24d6:	0e 94 21 07 	call	0xe42	; 0xe42 <EEPROM_init>


	/**********************APPLICATION CODE********************************/
	while(1){
		unsigned char byte;
		byte=UART_ReceiveByte();
    24da:	0e 94 8f 06 	call	0xd1e	; 0xd1e <UART_ReceiveByte>
    24de:	89 83       	std	Y+1, r24	; 0x01

		if( (byte >= 0) && (byte <= 9) )
    24e0:	89 81       	ldd	r24, Y+1	; 0x01
    24e2:	8a 30       	cpi	r24, 0x0A	; 10
    24e4:	30 f4       	brcc	.+12     	; 0x24f2 <main+0x42>
		{
			lcd_intgerToString(byte); //display the pressed keypad switch
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	88 2f       	mov	r24, r24
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	0e 94 35 12 	call	0x246a	; 0x246a <lcd_intgerToString>
    24f0:	03 c0       	rjmp	.+6      	; 0x24f8 <main+0x48>
		}
		else
		{
			lcd_displayChar(byte); //display the pressed keypad switch
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <lcd_displayChar>
		}

		switch (byte)
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	28 2f       	mov	r18, r24
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	3b 83       	std	Y+3, r19	; 0x03
    2500:	2a 83       	std	Y+2, r18	; 0x02
    2502:	8a 81       	ldd	r24, Y+2	; 0x02
    2504:	9b 81       	ldd	r25, Y+3	; 0x03
    2506:	83 32       	cpi	r24, 0x23	; 35
    2508:	91 05       	cpc	r25, r1
    250a:	41 f0       	breq	.+16     	; 0x251c <main+0x6c>
    250c:	2a 81       	ldd	r18, Y+2	; 0x02
    250e:	3b 81       	ldd	r19, Y+3	; 0x03
    2510:	2a 32       	cpi	r18, 0x2A	; 42
    2512:	31 05       	cpc	r19, r1
    2514:	11 f7       	brne	.-60     	; 0x24da <main+0x2a>
		{case'*':
			changePassword();
    2516:	0e 94 91 12 	call	0x2522	; 0x2522 <changePassword>
    251a:	df cf       	rjmp	.-66     	; 0x24da <main+0x2a>
			break;
		case'#':
			openDoor();
    251c:	0e 94 f6 12 	call	0x25ec	; 0x25ec <openDoor>
    2520:	dc cf       	rjmp	.-72     	; 0x24da <main+0x2a>

00002522 <changePassword>:
	}
}



void changePassword(void){
    2522:	df 93       	push	r29
    2524:	cf 93       	push	r28
    2526:	cd b7       	in	r28, 0x3d	; 61
    2528:	de b7       	in	r29, 0x3e	; 62
    252a:	a0 97       	sbiw	r28, 0x20	; 32
    252c:	0f b6       	in	r0, 0x3f	; 63
    252e:	f8 94       	cli
    2530:	de bf       	out	0x3e, r29	; 62
    2532:	0f be       	out	0x3f, r0	; 63
    2534:	cd bf       	out	0x3d, r28	; 61
	unsigned char* value[5];
	unsigned char* oldPass[5];
	UART_receiveString(oldPass);
    2536:	ce 01       	movw	r24, r28
    2538:	0d 96       	adiw	r24, 0x0d	; 13
    253a:	0e 94 de 06 	call	0xdbc	; 0xdbc <UART_receiveString>

	unsigned char i=0;
    253e:	1a 82       	std	Y+2, r1	; 0x02
    2540:	17 c0       	rjmp	.+46     	; 0x2570 <changePassword+0x4e>
	while(i<=4){
	EEPROM_readByte(0x0311+i, &value[i]);
    2542:	8a 81       	ldd	r24, Y+2	; 0x02
    2544:	88 2f       	mov	r24, r24
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	8f 5e       	subi	r24, 0xEF	; 239
    254a:	9c 4f       	sbci	r25, 0xFC	; 252
    254c:	ac 01       	movw	r20, r24
    254e:	9e 01       	movw	r18, r28
    2550:	2d 5f       	subi	r18, 0xFD	; 253
    2552:	3f 4f       	sbci	r19, 0xFF	; 255
    2554:	8a 81       	ldd	r24, Y+2	; 0x02
    2556:	88 2f       	mov	r24, r24
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	88 0f       	add	r24, r24
    255c:	99 1f       	adc	r25, r25
    255e:	28 0f       	add	r18, r24
    2560:	39 1f       	adc	r19, r25
    2562:	ca 01       	movw	r24, r20
    2564:	b9 01       	movw	r22, r18
    2566:	0e 94 6b 07 	call	0xed6	; 0xed6 <EEPROM_readByte>
	i++;
    256a:	8a 81       	ldd	r24, Y+2	; 0x02
    256c:	8f 5f       	subi	r24, 0xFF	; 255
    256e:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char* value[5];
	unsigned char* oldPass[5];
	UART_receiveString(oldPass);

	unsigned char i=0;
	while(i<=4){
    2570:	8a 81       	ldd	r24, Y+2	; 0x02
    2572:	85 30       	cpi	r24, 0x05	; 5
    2574:	30 f3       	brcs	.-52     	; 0x2542 <changePassword+0x20>
	EEPROM_readByte(0x0311+i, &value[i]);
	i++;
	}


	if(!(strcmp(value,oldPass)))
    2576:	ce 01       	movw	r24, r28
    2578:	03 96       	adiw	r24, 0x03	; 3
    257a:	9e 01       	movw	r18, r28
    257c:	23 5f       	subi	r18, 0xF3	; 243
    257e:	3f 4f       	sbci	r19, 0xFF	; 255
    2580:	b9 01       	movw	r22, r18
    2582:	0e 94 69 14 	call	0x28d2	; 0x28d2 <strcmp>
    2586:	00 97       	sbiw	r24, 0x00	; 0
    2588:	41 f5       	brne	.+80     	; 0x25da <changePassword+0xb8>
	{   UART_SendByte(correctPassword);
    258a:	85 e2       	ldi	r24, 0x25	; 37
    258c:	0e 94 9e 06 	call	0xd3c	; 0xd3c <UART_SendByte>
		unsigned char* newPass[5];
		UART_receiveString(newPass);
    2590:	ce 01       	movw	r24, r28
    2592:	47 96       	adiw	r24, 0x17	; 23
    2594:	0e 94 de 06 	call	0xdbc	; 0xdbc <UART_receiveString>
		unsigned char j=0;
    2598:	19 82       	std	Y+1, r1	; 0x01
    259a:	1c c0       	rjmp	.+56     	; 0x25d4 <changePassword+0xb2>
		while(j<=4){
		EEPROM_writeByte(0x0311+j, newPass[j]);
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	88 2f       	mov	r24, r24
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	8f 5e       	subi	r24, 0xEF	; 239
    25a4:	9c 4f       	sbci	r25, 0xFC	; 252
    25a6:	ac 01       	movw	r20, r24
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	88 2f       	mov	r24, r24
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	9c 01       	movw	r18, r24
    25b0:	22 0f       	add	r18, r18
    25b2:	33 1f       	adc	r19, r19
    25b4:	ce 01       	movw	r24, r28
    25b6:	01 96       	adiw	r24, 0x01	; 1
    25b8:	82 0f       	add	r24, r18
    25ba:	93 1f       	adc	r25, r19
    25bc:	fc 01       	movw	r30, r24
    25be:	76 96       	adiw	r30, 0x16	; 22
    25c0:	80 81       	ld	r24, Z
    25c2:	91 81       	ldd	r25, Z+1	; 0x01
    25c4:	28 2f       	mov	r18, r24
    25c6:	ca 01       	movw	r24, r20
    25c8:	62 2f       	mov	r22, r18
    25ca:	0e 94 2a 07 	call	0xe54	; 0xe54 <EEPROM_writeByte>
		j++;
    25ce:	89 81       	ldd	r24, Y+1	; 0x01
    25d0:	8f 5f       	subi	r24, 0xFF	; 255
    25d2:	89 83       	std	Y+1, r24	; 0x01
	if(!(strcmp(value,oldPass)))
	{   UART_SendByte(correctPassword);
		unsigned char* newPass[5];
		UART_receiveString(newPass);
		unsigned char j=0;
		while(j<=4){
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
    25d6:	85 30       	cpi	r24, 0x05	; 5
    25d8:	08 f3       	brcs	.-62     	; 0x259c <changePassword+0x7a>
	}
	else{

	}

}
    25da:	a0 96       	adiw	r28, 0x20	; 32
    25dc:	0f b6       	in	r0, 0x3f	; 63
    25de:	f8 94       	cli
    25e0:	de bf       	out	0x3e, r29	; 62
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	cd bf       	out	0x3d, r28	; 61
    25e6:	cf 91       	pop	r28
    25e8:	df 91       	pop	r29
    25ea:	08 95       	ret

000025ec <openDoor>:
void openDoor(void){
    25ec:	df 93       	push	r29
    25ee:	cf 93       	push	r28
    25f0:	cd b7       	in	r28, 0x3d	; 61
    25f2:	de b7       	in	r29, 0x3e	; 62
    25f4:	6c 97       	sbiw	r28, 0x1c	; 28
    25f6:	0f b6       	in	r0, 0x3f	; 63
    25f8:	f8 94       	cli
    25fa:	de bf       	out	0x3e, r29	; 62
    25fc:	0f be       	out	0x3f, r0	; 63
    25fe:	cd bf       	out	0x3d, r28	; 61
	 motor_clockwise();
    2600:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <motor_clockwise>
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	90 e6       	ldi	r25, 0x60	; 96
    2608:	aa e6       	ldi	r26, 0x6A	; 106
    260a:	b6 e4       	ldi	r27, 0x46	; 70
    260c:	89 8f       	std	Y+25, r24	; 0x19
    260e:	9a 8f       	std	Y+26, r25	; 0x1a
    2610:	ab 8f       	std	Y+27, r26	; 0x1b
    2612:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2614:	69 8d       	ldd	r22, Y+25	; 0x19
    2616:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2618:	8b 8d       	ldd	r24, Y+27	; 0x1b
    261a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	4a e7       	ldi	r20, 0x7A	; 122
    2622:	53 e4       	ldi	r21, 0x43	; 67
    2624:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	8d 8b       	std	Y+21, r24	; 0x15
    262e:	9e 8b       	std	Y+22, r25	; 0x16
    2630:	af 8b       	std	Y+23, r26	; 0x17
    2632:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2634:	6d 89       	ldd	r22, Y+21	; 0x15
    2636:	7e 89       	ldd	r23, Y+22	; 0x16
    2638:	8f 89       	ldd	r24, Y+23	; 0x17
    263a:	98 8d       	ldd	r25, Y+24	; 0x18
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	40 e8       	ldi	r20, 0x80	; 128
    2642:	5f e3       	ldi	r21, 0x3F	; 63
    2644:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2648:	88 23       	and	r24, r24
    264a:	2c f4       	brge	.+10     	; 0x2656 <openDoor+0x6a>
		__ticks = 1;
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	9c 8b       	std	Y+20, r25	; 0x14
    2652:	8b 8b       	std	Y+19, r24	; 0x13
    2654:	3f c0       	rjmp	.+126    	; 0x26d4 <openDoor+0xe8>
	else if (__tmp > 65535)
    2656:	6d 89       	ldd	r22, Y+21	; 0x15
    2658:	7e 89       	ldd	r23, Y+22	; 0x16
    265a:	8f 89       	ldd	r24, Y+23	; 0x17
    265c:	98 8d       	ldd	r25, Y+24	; 0x18
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	3f ef       	ldi	r19, 0xFF	; 255
    2662:	4f e7       	ldi	r20, 0x7F	; 127
    2664:	57 e4       	ldi	r21, 0x47	; 71
    2666:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    266a:	18 16       	cp	r1, r24
    266c:	4c f5       	brge	.+82     	; 0x26c0 <openDoor+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266e:	69 8d       	ldd	r22, Y+25	; 0x19
    2670:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2672:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2674:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	40 e2       	ldi	r20, 0x20	; 32
    267c:	51 e4       	ldi	r21, 0x41	; 65
    267e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	bc 01       	movw	r22, r24
    2688:	cd 01       	movw	r24, r26
    268a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	9c 8b       	std	Y+20, r25	; 0x14
    2694:	8b 8b       	std	Y+19, r24	; 0x13
    2696:	0f c0       	rjmp	.+30     	; 0x26b6 <openDoor+0xca>
    2698:	89 e1       	ldi	r24, 0x19	; 25
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	9a 8b       	std	Y+18, r25	; 0x12
    269e:	89 8b       	std	Y+17, r24	; 0x11
    26a0:	89 89       	ldd	r24, Y+17	; 0x11
    26a2:	9a 89       	ldd	r25, Y+18	; 0x12
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <openDoor+0xb8>
    26a8:	9a 8b       	std	Y+18, r25	; 0x12
    26aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ac:	8b 89       	ldd	r24, Y+19	; 0x13
    26ae:	9c 89       	ldd	r25, Y+20	; 0x14
    26b0:	01 97       	sbiw	r24, 0x01	; 1
    26b2:	9c 8b       	std	Y+20, r25	; 0x14
    26b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b6:	8b 89       	ldd	r24, Y+19	; 0x13
    26b8:	9c 89       	ldd	r25, Y+20	; 0x14
    26ba:	00 97       	sbiw	r24, 0x00	; 0
    26bc:	69 f7       	brne	.-38     	; 0x2698 <openDoor+0xac>
    26be:	14 c0       	rjmp	.+40     	; 0x26e8 <openDoor+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c0:	6d 89       	ldd	r22, Y+21	; 0x15
    26c2:	7e 89       	ldd	r23, Y+22	; 0x16
    26c4:	8f 89       	ldd	r24, Y+23	; 0x17
    26c6:	98 8d       	ldd	r25, Y+24	; 0x18
    26c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	9c 8b       	std	Y+20, r25	; 0x14
    26d2:	8b 8b       	std	Y+19, r24	; 0x13
    26d4:	8b 89       	ldd	r24, Y+19	; 0x13
    26d6:	9c 89       	ldd	r25, Y+20	; 0x14
    26d8:	98 8b       	std	Y+16, r25	; 0x10
    26da:	8f 87       	std	Y+15, r24	; 0x0f
    26dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    26de:	98 89       	ldd	r25, Y+16	; 0x10
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	f1 f7       	brne	.-4      	; 0x26e0 <openDoor+0xf4>
    26e4:	98 8b       	std	Y+16, r25	; 0x10
    26e6:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(15000);
	 motor_antiClockwise();
    26e8:	0e 94 08 14 	call	0x2810	; 0x2810 <motor_antiClockwise>
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	90 e6       	ldi	r25, 0x60	; 96
    26f0:	aa e6       	ldi	r26, 0x6A	; 106
    26f2:	b6 e4       	ldi	r27, 0x46	; 70
    26f4:	8b 87       	std	Y+11, r24	; 0x0b
    26f6:	9c 87       	std	Y+12, r25	; 0x0c
    26f8:	ad 87       	std	Y+13, r26	; 0x0d
    26fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    26fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2700:	8d 85       	ldd	r24, Y+13	; 0x0d
    2702:	9e 85       	ldd	r25, Y+14	; 0x0e
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	4a e7       	ldi	r20, 0x7A	; 122
    270a:	53 e4       	ldi	r21, 0x43	; 67
    270c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	8f 83       	std	Y+7, r24	; 0x07
    2716:	98 87       	std	Y+8, r25	; 0x08
    2718:	a9 87       	std	Y+9, r26	; 0x09
    271a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    271c:	6f 81       	ldd	r22, Y+7	; 0x07
    271e:	78 85       	ldd	r23, Y+8	; 0x08
    2720:	89 85       	ldd	r24, Y+9	; 0x09
    2722:	9a 85       	ldd	r25, Y+10	; 0x0a
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	40 e8       	ldi	r20, 0x80	; 128
    272a:	5f e3       	ldi	r21, 0x3F	; 63
    272c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2730:	88 23       	and	r24, r24
    2732:	2c f4       	brge	.+10     	; 0x273e <openDoor+0x152>
		__ticks = 1;
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	9e 83       	std	Y+6, r25	; 0x06
    273a:	8d 83       	std	Y+5, r24	; 0x05
    273c:	3f c0       	rjmp	.+126    	; 0x27bc <openDoor+0x1d0>
	else if (__tmp > 65535)
    273e:	6f 81       	ldd	r22, Y+7	; 0x07
    2740:	78 85       	ldd	r23, Y+8	; 0x08
    2742:	89 85       	ldd	r24, Y+9	; 0x09
    2744:	9a 85       	ldd	r25, Y+10	; 0x0a
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	3f ef       	ldi	r19, 0xFF	; 255
    274a:	4f e7       	ldi	r20, 0x7F	; 127
    274c:	57 e4       	ldi	r21, 0x47	; 71
    274e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2752:	18 16       	cp	r1, r24
    2754:	4c f5       	brge	.+82     	; 0x27a8 <openDoor+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2756:	6b 85       	ldd	r22, Y+11	; 0x0b
    2758:	7c 85       	ldd	r23, Y+12	; 0x0c
    275a:	8d 85       	ldd	r24, Y+13	; 0x0d
    275c:	9e 85       	ldd	r25, Y+14	; 0x0e
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	40 e2       	ldi	r20, 0x20	; 32
    2764:	51 e4       	ldi	r21, 0x41	; 65
    2766:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	bc 01       	movw	r22, r24
    2770:	cd 01       	movw	r24, r26
    2772:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	9e 83       	std	Y+6, r25	; 0x06
    277c:	8d 83       	std	Y+5, r24	; 0x05
    277e:	0f c0       	rjmp	.+30     	; 0x279e <openDoor+0x1b2>
    2780:	89 e1       	ldi	r24, 0x19	; 25
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	9c 83       	std	Y+4, r25	; 0x04
    2786:	8b 83       	std	Y+3, r24	; 0x03
    2788:	8b 81       	ldd	r24, Y+3	; 0x03
    278a:	9c 81       	ldd	r25, Y+4	; 0x04
    278c:	01 97       	sbiw	r24, 0x01	; 1
    278e:	f1 f7       	brne	.-4      	; 0x278c <openDoor+0x1a0>
    2790:	9c 83       	std	Y+4, r25	; 0x04
    2792:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2794:	8d 81       	ldd	r24, Y+5	; 0x05
    2796:	9e 81       	ldd	r25, Y+6	; 0x06
    2798:	01 97       	sbiw	r24, 0x01	; 1
    279a:	9e 83       	std	Y+6, r25	; 0x06
    279c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    279e:	8d 81       	ldd	r24, Y+5	; 0x05
    27a0:	9e 81       	ldd	r25, Y+6	; 0x06
    27a2:	00 97       	sbiw	r24, 0x00	; 0
    27a4:	69 f7       	brne	.-38     	; 0x2780 <openDoor+0x194>
    27a6:	14 c0       	rjmp	.+40     	; 0x27d0 <openDoor+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a8:	6f 81       	ldd	r22, Y+7	; 0x07
    27aa:	78 85       	ldd	r23, Y+8	; 0x08
    27ac:	89 85       	ldd	r24, Y+9	; 0x09
    27ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	9e 83       	std	Y+6, r25	; 0x06
    27ba:	8d 83       	std	Y+5, r24	; 0x05
    27bc:	8d 81       	ldd	r24, Y+5	; 0x05
    27be:	9e 81       	ldd	r25, Y+6	; 0x06
    27c0:	9a 83       	std	Y+2, r25	; 0x02
    27c2:	89 83       	std	Y+1, r24	; 0x01
    27c4:	89 81       	ldd	r24, Y+1	; 0x01
    27c6:	9a 81       	ldd	r25, Y+2	; 0x02
    27c8:	01 97       	sbiw	r24, 0x01	; 1
    27ca:	f1 f7       	brne	.-4      	; 0x27c8 <openDoor+0x1dc>
    27cc:	9a 83       	std	Y+2, r25	; 0x02
    27ce:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(15000);
	 motor_stop();
    27d0:	0e 94 1d 14 	call	0x283a	; 0x283a <motor_stop>
}
    27d4:	6c 96       	adiw	r28, 0x1c	; 28
    27d6:	0f b6       	in	r0, 0x3f	; 63
    27d8:	f8 94       	cli
    27da:	de bf       	out	0x3e, r29	; 62
    27dc:	0f be       	out	0x3f, r0	; 63
    27de:	cd bf       	out	0x3d, r28	; 61
    27e0:	cf 91       	pop	r28
    27e2:	df 91       	pop	r29
    27e4:	08 95       	ret

000027e6 <motor_clockwise>:

void motor_clockwise(void){
    27e6:	df 93       	push	r29
    27e8:	cf 93       	push	r28
    27ea:	cd b7       	in	r28, 0x3d	; 61
    27ec:	de b7       	in	r29, 0x3e	; 62
	PORTD|=(1<<PD4);
    27ee:	a2 e3       	ldi	r26, 0x32	; 50
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	e2 e3       	ldi	r30, 0x32	; 50
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	80 81       	ld	r24, Z
    27f8:	80 61       	ori	r24, 0x10	; 16
    27fa:	8c 93       	st	X, r24
	PORTD &=(1<<PD5);
    27fc:	a2 e3       	ldi	r26, 0x32	; 50
    27fe:	b0 e0       	ldi	r27, 0x00	; 0
    2800:	e2 e3       	ldi	r30, 0x32	; 50
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
    2806:	80 72       	andi	r24, 0x20	; 32
    2808:	8c 93       	st	X, r24
}
    280a:	cf 91       	pop	r28
    280c:	df 91       	pop	r29
    280e:	08 95       	ret

00002810 <motor_antiClockwise>:
void motor_antiClockwise(void){
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
	PORTD &=(1<<PD4);
    2818:	a2 e3       	ldi	r26, 0x32	; 50
    281a:	b0 e0       	ldi	r27, 0x00	; 0
    281c:	e2 e3       	ldi	r30, 0x32	; 50
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 81       	ld	r24, Z
    2822:	80 71       	andi	r24, 0x10	; 16
    2824:	8c 93       	st	X, r24
	PORTD|=(1<<PD5);
    2826:	a2 e3       	ldi	r26, 0x32	; 50
    2828:	b0 e0       	ldi	r27, 0x00	; 0
    282a:	e2 e3       	ldi	r30, 0x32	; 50
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	80 81       	ld	r24, Z
    2830:	80 62       	ori	r24, 0x20	; 32
    2832:	8c 93       	st	X, r24
}
    2834:	cf 91       	pop	r28
    2836:	df 91       	pop	r29
    2838:	08 95       	ret

0000283a <motor_stop>:
void motor_stop(void){
    283a:	df 93       	push	r29
    283c:	cf 93       	push	r28
    283e:	cd b7       	in	r28, 0x3d	; 61
    2840:	de b7       	in	r29, 0x3e	; 62
	PORTD &=(1<<PD4);
    2842:	a2 e3       	ldi	r26, 0x32	; 50
    2844:	b0 e0       	ldi	r27, 0x00	; 0
    2846:	e2 e3       	ldi	r30, 0x32	; 50
    2848:	f0 e0       	ldi	r31, 0x00	; 0
    284a:	80 81       	ld	r24, Z
    284c:	80 71       	andi	r24, 0x10	; 16
    284e:	8c 93       	st	X, r24
	PORTD &=(1<<PD5);
    2850:	a2 e3       	ldi	r26, 0x32	; 50
    2852:	b0 e0       	ldi	r27, 0x00	; 0
    2854:	e2 e3       	ldi	r30, 0x32	; 50
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	80 81       	ld	r24, Z
    285a:	80 72       	andi	r24, 0x20	; 32
    285c:	8c 93       	st	X, r24
}
    285e:	cf 91       	pop	r28
    2860:	df 91       	pop	r29
    2862:	08 95       	ret

00002864 <__prologue_saves__>:
    2864:	2f 92       	push	r2
    2866:	3f 92       	push	r3
    2868:	4f 92       	push	r4
    286a:	5f 92       	push	r5
    286c:	6f 92       	push	r6
    286e:	7f 92       	push	r7
    2870:	8f 92       	push	r8
    2872:	9f 92       	push	r9
    2874:	af 92       	push	r10
    2876:	bf 92       	push	r11
    2878:	cf 92       	push	r12
    287a:	df 92       	push	r13
    287c:	ef 92       	push	r14
    287e:	ff 92       	push	r15
    2880:	0f 93       	push	r16
    2882:	1f 93       	push	r17
    2884:	cf 93       	push	r28
    2886:	df 93       	push	r29
    2888:	cd b7       	in	r28, 0x3d	; 61
    288a:	de b7       	in	r29, 0x3e	; 62
    288c:	ca 1b       	sub	r28, r26
    288e:	db 0b       	sbc	r29, r27
    2890:	0f b6       	in	r0, 0x3f	; 63
    2892:	f8 94       	cli
    2894:	de bf       	out	0x3e, r29	; 62
    2896:	0f be       	out	0x3f, r0	; 63
    2898:	cd bf       	out	0x3d, r28	; 61
    289a:	09 94       	ijmp

0000289c <__epilogue_restores__>:
    289c:	2a 88       	ldd	r2, Y+18	; 0x12
    289e:	39 88       	ldd	r3, Y+17	; 0x11
    28a0:	48 88       	ldd	r4, Y+16	; 0x10
    28a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    28a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    28a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    28a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    28aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    28ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    28ae:	b9 84       	ldd	r11, Y+9	; 0x09
    28b0:	c8 84       	ldd	r12, Y+8	; 0x08
    28b2:	df 80       	ldd	r13, Y+7	; 0x07
    28b4:	ee 80       	ldd	r14, Y+6	; 0x06
    28b6:	fd 80       	ldd	r15, Y+5	; 0x05
    28b8:	0c 81       	ldd	r16, Y+4	; 0x04
    28ba:	1b 81       	ldd	r17, Y+3	; 0x03
    28bc:	aa 81       	ldd	r26, Y+2	; 0x02
    28be:	b9 81       	ldd	r27, Y+1	; 0x01
    28c0:	ce 0f       	add	r28, r30
    28c2:	d1 1d       	adc	r29, r1
    28c4:	0f b6       	in	r0, 0x3f	; 63
    28c6:	f8 94       	cli
    28c8:	de bf       	out	0x3e, r29	; 62
    28ca:	0f be       	out	0x3f, r0	; 63
    28cc:	cd bf       	out	0x3d, r28	; 61
    28ce:	ed 01       	movw	r28, r26
    28d0:	08 95       	ret

000028d2 <strcmp>:
    28d2:	fb 01       	movw	r30, r22
    28d4:	dc 01       	movw	r26, r24
    28d6:	8d 91       	ld	r24, X+
    28d8:	01 90       	ld	r0, Z+
    28da:	80 19       	sub	r24, r0
    28dc:	01 10       	cpse	r0, r1
    28de:	d9 f3       	breq	.-10     	; 0x28d6 <strcmp+0x4>
    28e0:	99 0b       	sbc	r25, r25
    28e2:	08 95       	ret

000028e4 <itoa>:
    28e4:	fb 01       	movw	r30, r22
    28e6:	9f 01       	movw	r18, r30
    28e8:	e8 94       	clt
    28ea:	42 30       	cpi	r20, 0x02	; 2
    28ec:	c4 f0       	brlt	.+48     	; 0x291e <itoa+0x3a>
    28ee:	45 32       	cpi	r20, 0x25	; 37
    28f0:	b4 f4       	brge	.+44     	; 0x291e <itoa+0x3a>
    28f2:	4a 30       	cpi	r20, 0x0A	; 10
    28f4:	29 f4       	brne	.+10     	; 0x2900 <itoa+0x1c>
    28f6:	97 fb       	bst	r25, 7
    28f8:	1e f4       	brtc	.+6      	; 0x2900 <itoa+0x1c>
    28fa:	90 95       	com	r25
    28fc:	81 95       	neg	r24
    28fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2900:	64 2f       	mov	r22, r20
    2902:	77 27       	eor	r23, r23
    2904:	0e 94 a3 14 	call	0x2946	; 0x2946 <__udivmodhi4>
    2908:	80 5d       	subi	r24, 0xD0	; 208
    290a:	8a 33       	cpi	r24, 0x3A	; 58
    290c:	0c f0       	brlt	.+2      	; 0x2910 <itoa+0x2c>
    290e:	89 5d       	subi	r24, 0xD9	; 217
    2910:	81 93       	st	Z+, r24
    2912:	cb 01       	movw	r24, r22
    2914:	00 97       	sbiw	r24, 0x00	; 0
    2916:	a1 f7       	brne	.-24     	; 0x2900 <itoa+0x1c>
    2918:	16 f4       	brtc	.+4      	; 0x291e <itoa+0x3a>
    291a:	5d e2       	ldi	r21, 0x2D	; 45
    291c:	51 93       	st	Z+, r21
    291e:	10 82       	st	Z, r1
    2920:	c9 01       	movw	r24, r18
    2922:	0c 94 93 14 	jmp	0x2926	; 0x2926 <strrev>

00002926 <strrev>:
    2926:	dc 01       	movw	r26, r24
    2928:	fc 01       	movw	r30, r24
    292a:	67 2f       	mov	r22, r23
    292c:	71 91       	ld	r23, Z+
    292e:	77 23       	and	r23, r23
    2930:	e1 f7       	brne	.-8      	; 0x292a <strrev+0x4>
    2932:	32 97       	sbiw	r30, 0x02	; 2
    2934:	04 c0       	rjmp	.+8      	; 0x293e <strrev+0x18>
    2936:	7c 91       	ld	r23, X
    2938:	6d 93       	st	X+, r22
    293a:	70 83       	st	Z, r23
    293c:	62 91       	ld	r22, -Z
    293e:	ae 17       	cp	r26, r30
    2940:	bf 07       	cpc	r27, r31
    2942:	c8 f3       	brcs	.-14     	; 0x2936 <strrev+0x10>
    2944:	08 95       	ret

00002946 <__udivmodhi4>:
    2946:	aa 1b       	sub	r26, r26
    2948:	bb 1b       	sub	r27, r27
    294a:	51 e1       	ldi	r21, 0x11	; 17
    294c:	07 c0       	rjmp	.+14     	; 0x295c <__udivmodhi4_ep>

0000294e <__udivmodhi4_loop>:
    294e:	aa 1f       	adc	r26, r26
    2950:	bb 1f       	adc	r27, r27
    2952:	a6 17       	cp	r26, r22
    2954:	b7 07       	cpc	r27, r23
    2956:	10 f0       	brcs	.+4      	; 0x295c <__udivmodhi4_ep>
    2958:	a6 1b       	sub	r26, r22
    295a:	b7 0b       	sbc	r27, r23

0000295c <__udivmodhi4_ep>:
    295c:	88 1f       	adc	r24, r24
    295e:	99 1f       	adc	r25, r25
    2960:	5a 95       	dec	r21
    2962:	a9 f7       	brne	.-22     	; 0x294e <__udivmodhi4_loop>
    2964:	80 95       	com	r24
    2966:	90 95       	com	r25
    2968:	bc 01       	movw	r22, r24
    296a:	cd 01       	movw	r24, r26
    296c:	08 95       	ret

0000296e <_exit>:
    296e:	f8 94       	cli

00002970 <__stop_program>:
    2970:	ff cf       	rjmp	.-2      	; 0x2970 <__stop_program>
